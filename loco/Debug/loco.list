
C:\Users\Lenovo\Documents\toll\firmware\generated\loco\Debug\loco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08005470  08005470  00015470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005540  08005540  00015540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005544  08005544  00015544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000174  20000000  08005548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000046fc  20000174  080056bc  00020174  2**2
                  ALLOC
  7 ._user_heap_stack 00000c00  20004870  080056bc  00024870  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
  9 .debug_info   00021008  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005820  00000000  00000000  000411ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000108dd  00000000  00000000  000469cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001638  00000000  00000000  000572b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001bc8  00000000  00000000  000588e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000b509  00000000  00000000  0005a4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007457  00000000  00000000  000659b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0006ce10  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003edc  00000000  00000000  0006ce90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000174 	.word	0x20000174
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005458 	.word	0x08005458

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000178 	.word	0x20000178
 800020c:	08005458 	.word	0x08005458

08000210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000210:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000212:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <HAL_Init+0x30>)
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800021a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000222:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800022a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800022c:	2003      	movs	r0, #3
 800022e:	f000 f827 	bl	8000280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000232:	2000      	movs	r0, #0
 8000234:	f004 fc9a 	bl	8004b6c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000238:	f004 fc68 	bl	8004b0c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800023c:	2000      	movs	r0, #0
 800023e:	bd08      	pop	{r3, pc}
 8000240:	40023c00 	.word	0x40023c00

08000244 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000244:	4a02      	ldr	r2, [pc, #8]	; (8000250 <HAL_IncTick+0xc>)
 8000246:	6813      	ldr	r3, [r2, #0]
 8000248:	3301      	adds	r3, #1
 800024a:	6013      	str	r3, [r2, #0]
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	20003eec 	.word	0x20003eec

08000254 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000254:	4b01      	ldr	r3, [pc, #4]	; (800025c <HAL_GetTick+0x8>)
 8000256:	6818      	ldr	r0, [r3, #0]
}
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	20003eec 	.word	0x20003eec

08000260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000262:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000264:	f7ff fff6 	bl	8000254 <HAL_GetTick>
  uint32_t wait = Delay;
 8000268:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800026a:	1c63      	adds	r3, r4, #1
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
  uint32_t tickstart = HAL_GetTick();
 800026c:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 800026e:	bf18      	it	ne
 8000270:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000272:	f7ff ffef 	bl	8000254 <HAL_GetTick>
 8000276:	1b40      	subs	r0, r0, r5
 8000278:	42a0      	cmp	r0, r4
 800027a:	d3fa      	bcc.n	8000272 <HAL_Delay+0x12>
  {
  }
}
 800027c:	b003      	add	sp, #12
 800027e:	bd30      	pop	{r4, r5, pc}

08000280 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000280:	4a07      	ldr	r2, [pc, #28]	; (80002a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000282:	68d3      	ldr	r3, [r2, #12]
 8000284:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000288:	041b      	lsls	r3, r3, #16
 800028a:	0c1b      	lsrs	r3, r3, #16
 800028c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000290:	0200      	lsls	r0, r0, #8
 8000292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000296:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800029a:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800029c:	60d3      	str	r3, [r2, #12]
 800029e:	4770      	bx	lr
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <HAL_NVIC_SetPriority+0x60>)
 80002a6:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002a8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002ac:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ae:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002b2:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002b4:	2c04      	cmp	r4, #4
 80002b6:	bf28      	it	cs
 80002b8:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ba:	2d06      	cmp	r5, #6

  return (
 80002bc:	f04f 0501 	mov.w	r5, #1
 80002c0:	fa05 f404 	lsl.w	r4, r5, r4
 80002c4:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c8:	bf8c      	ite	hi
 80002ca:	3b03      	subhi	r3, #3
 80002cc:	2300      	movls	r3, #0

  return (
 80002ce:	400c      	ands	r4, r1
 80002d0:	409c      	lsls	r4, r3
 80002d2:	fa05 f303 	lsl.w	r3, r5, r3
 80002d6:	3b01      	subs	r3, #1
 80002d8:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002da:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80002dc:	ea42 0204 	orr.w	r2, r2, r4
 80002e0:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	bfaf      	iteee	ge
 80002e6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ea:	f000 000f 	andlt.w	r0, r0, #15
 80002ee:	4b06      	ldrlt	r3, [pc, #24]	; (8000308 <HAL_NVIC_SetPriority+0x64>)
 80002f0:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	bfa5      	ittet	ge
 80002f4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002f8:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fa:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000300:	bd30      	pop	{r4, r5, pc}
 8000302:	bf00      	nop
 8000304:	e000ed00 	.word	0xe000ed00
 8000308:	e000ed14 	.word	0xe000ed14

0800030c <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800030c:	0942      	lsrs	r2, r0, #5
 800030e:	2301      	movs	r3, #1
 8000310:	f000 001f 	and.w	r0, r0, #31
 8000314:	fa03 f000 	lsl.w	r0, r3, r0
 8000318:	4b01      	ldr	r3, [pc, #4]	; (8000320 <HAL_NVIC_EnableIRQ+0x14>)
 800031a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800031e:	4770      	bx	lr
 8000320:	e000e100 	.word	0xe000e100

08000324 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000324:	3801      	subs	r0, #1
 8000326:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800032a:	d20a      	bcs.n	8000342 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032e:	4a07      	ldr	r2, [pc, #28]	; (800034c <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000330:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000332:	21f0      	movs	r1, #240	; 0xf0
 8000334:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000338:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033a:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800033c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000342:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000e010 	.word	0xe000e010
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000350:	4b04      	ldr	r3, [pc, #16]	; (8000364 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000352:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000354:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000356:	bf0c      	ite	eq
 8000358:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800035c:	f022 0204 	bicne.w	r2, r2, #4
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	4770      	bx	lr
 8000364:	e000e010 	.word	0xe000e010

08000368 <HAL_CRC_Init>:
  * @param  hcrc: pointer to a CRC_HandleTypeDef structure that contains
  *         the configuration information for CRC
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000368:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 800036a:	4604      	mov	r4, r0
 800036c:	b160      	cbz	r0, 8000388 <HAL_CRC_Init+0x20>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 800036e:	7943      	ldrb	r3, [r0, #5]
 8000370:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000374:	b913      	cbnz	r3, 800037c <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000376:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000378:	f004 fa08 	bl	800478c <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800037c:	2302      	movs	r3, #2
 800037e:	7163      	strb	r3, [r4, #5]
   
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000380:	2301      	movs	r3, #1
 8000382:	7163      	strb	r3, [r4, #5]
  
  /* Return function status */
  return HAL_OK;
 8000384:	2000      	movs	r0, #0
 8000386:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
  {
    return HAL_ERROR;
 8000388:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 800038a:	bd10      	pop	{r4, pc}

0800038c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800038c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000390:	4f67      	ldr	r7, [pc, #412]	; (8000530 <HAL_GPIO_Init+0x1a4>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000392:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000394:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8000538 <HAL_GPIO_Init+0x1ac>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000398:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800053c <HAL_GPIO_Init+0x1b0>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800039c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800039e:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003a0:	9301      	str	r3, [sp, #4]
 80003a2:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80003a4:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80003a6:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80003a8:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80003aa:	ea34 0303 	bics.w	r3, r4, r3
 80003ae:	f040 80b7 	bne.w	8000520 <HAL_GPIO_Init+0x194>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003b2:	684d      	ldr	r5, [r1, #4]
 80003b4:	f025 0a10 	bic.w	sl, r5, #16
 80003b8:	f1ba 0f02 	cmp.w	sl, #2
 80003bc:	d114      	bne.n	80003e8 <HAL_GPIO_Init+0x5c>
 80003be:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 80003c2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003c6:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80003ca:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003ce:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80003d2:	230f      	movs	r3, #15
 80003d4:	fa03 f30b 	lsl.w	r3, r3, fp
 80003d8:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80003dc:	690b      	ldr	r3, [r1, #16]
 80003de:	fa03 f30b 	lsl.w	r3, r3, fp
 80003e2:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 80003e4:	f8c9 3020 	str.w	r3, [r9, #32]
 80003e8:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003ec:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80003f0:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003f2:	fa09 f90b 	lsl.w	r9, r9, fp
 80003f6:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003fa:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003fe:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000402:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000406:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800040a:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800040c:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8000410:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000412:	d80f      	bhi.n	8000434 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000414:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000416:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000418:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 800041c:	fa06 f60b 	lsl.w	r6, r6, fp
 8000420:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 8000422:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000424:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000426:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800042a:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800042e:	4096      	lsls	r6, r2
 8000430:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000432:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000434:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000436:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800043a:	688b      	ldr	r3, [r1, #8]
 800043c:	fa03 f30b 	lsl.w	r3, r3, fp
 8000440:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8000444:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000446:	00eb      	lsls	r3, r5, #3
 8000448:	d56a      	bpl.n	8000520 <HAL_GPIO_Init+0x194>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044a:	2300      	movs	r3, #0
 800044c:	9303      	str	r3, [sp, #12]
 800044e:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000452:	4b38      	ldr	r3, [pc, #224]	; (8000534 <HAL_GPIO_Init+0x1a8>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000454:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000458:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 800045c:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8000460:	f022 0903 	bic.w	r9, r2, #3
 8000464:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8000468:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800046c:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8000470:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000472:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000476:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000478:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800047c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000480:	260f      	movs	r6, #15
 8000482:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000486:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000488:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800048c:	d018      	beq.n	80004c0 <HAL_GPIO_Init+0x134>
 800048e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000492:	4298      	cmp	r0, r3
 8000494:	d016      	beq.n	80004c4 <HAL_GPIO_Init+0x138>
 8000496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800049a:	4298      	cmp	r0, r3
 800049c:	d014      	beq.n	80004c8 <HAL_GPIO_Init+0x13c>
 800049e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80004a2:	4298      	cmp	r0, r3
 80004a4:	d012      	beq.n	80004cc <HAL_GPIO_Init+0x140>
 80004a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d010      	beq.n	80004d0 <HAL_GPIO_Init+0x144>
 80004ae:	4540      	cmp	r0, r8
 80004b0:	d010      	beq.n	80004d4 <HAL_GPIO_Init+0x148>
 80004b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80004b6:	4298      	cmp	r0, r3
 80004b8:	bf14      	ite	ne
 80004ba:	2307      	movne	r3, #7
 80004bc:	2306      	moveq	r3, #6
 80004be:	e00a      	b.n	80004d6 <HAL_GPIO_Init+0x14a>
 80004c0:	2300      	movs	r3, #0
 80004c2:	e008      	b.n	80004d6 <HAL_GPIO_Init+0x14a>
 80004c4:	2301      	movs	r3, #1
 80004c6:	e006      	b.n	80004d6 <HAL_GPIO_Init+0x14a>
 80004c8:	2302      	movs	r3, #2
 80004ca:	e004      	b.n	80004d6 <HAL_GPIO_Init+0x14a>
 80004cc:	2303      	movs	r3, #3
 80004ce:	e002      	b.n	80004d6 <HAL_GPIO_Init+0x14a>
 80004d0:	2304      	movs	r3, #4
 80004d2:	e000      	b.n	80004d6 <HAL_GPIO_Init+0x14a>
 80004d4:	2305      	movs	r3, #5
 80004d6:	fa03 f30a 	lsl.w	r3, r3, sl
 80004da:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80004dc:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80004e0:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 80004e2:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004e4:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80004e8:	bf0c      	ite	eq
 80004ea:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80004ec:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 80004ee:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 80004f2:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004f6:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80004fa:	bf0c      	ite	eq
 80004fc:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80004fe:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8000500:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000502:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000504:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8000508:	bf0c      	ite	eq
 800050a:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 800050c:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 800050e:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8000512:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000516:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000518:	bf54      	ite	pl
 800051a:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 800051c:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 800051e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000520:	3201      	adds	r2, #1
 8000522:	2a10      	cmp	r2, #16
 8000524:	f47f af3e 	bne.w	80003a4 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000528:	b005      	add	sp, #20
 800052a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800052e:	bf00      	nop
 8000530:	40013c00 	.word	0x40013c00
 8000534:	40020000 	.word	0x40020000
 8000538:	40023800 	.word	0x40023800
 800053c:	40021400 	.word	0x40021400

08000540 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000540:	b902      	cbnz	r2, 8000544 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000542:	0409      	lsls	r1, r1, #16
 8000544:	6181      	str	r1, [r0, #24]
 8000546:	4770      	bx	lr

08000548 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000548:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800054a:	4606      	mov	r6, r0
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 800054c:	b08b      	sub	sp, #44	; 0x2c
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800054e:	2800      	cmp	r0, #0
 8000550:	d069      	beq.n	8000626 <HAL_PCD_Init+0xde>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000552:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8000554:	4634      	mov	r4, r6
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000556:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 800055a:	f004 fc57 	bl	8004e0c <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 800055e:	f854 0b10 	ldr.w	r0, [r4], #16
 8000562:	f001 ff01 	bl	8002368 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000568:	466d      	mov	r5, sp
 800056a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800056c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800056e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000570:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000574:	e885 0003 	stmia.w	r5, {r0, r1}
 8000578:	1d37      	adds	r7, r6, #4
 800057a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800057e:	6830      	ldr	r0, [r6, #0]
 8000580:	f001 feb2 	bl	80022e8 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000584:	2100      	movs	r1, #0
 8000586:	6830      	ldr	r0, [r6, #0]
 8000588:	f001 fef4 	bl	8002374 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 800058c:	2100      	movs	r1, #0
 800058e:	4633      	mov	r3, r6
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000590:	4632      	mov	r2, r6
 8000592:	f106 0410 	add.w	r4, r6, #16
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000596:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000598:	4608      	mov	r0, r1
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
   hpcd->IN_ep[i].num = i;
 800059a:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 800059e:	87d1      	strh	r1, [r2, #62]	; 0x3e
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 80005a0:	3101      	adds	r1, #1
 80005a2:	290f      	cmp	r1, #15
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 80005a4:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80005a8:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 80005ac:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 80005ae:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 80005b0:	64d0      	str	r0, [r2, #76]	; 0x4c
 80005b2:	f102 021c 	add.w	r2, r2, #28
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 80005b6:	d1f0      	bne.n	800059a <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 80005b8:	2200      	movs	r2, #0
 80005ba:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 {
   hpcd->OUT_ep[i].is_in = 0U;
 80005be:	4611      	mov	r1, r2
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 80005c0:	f102 0040 	add.w	r0, r2, #64	; 0x40
 }
 
 for (i = 0U; i < 15U; i++)
 {
   hpcd->OUT_ep[i].is_in = 0U;
   hpcd->OUT_ep[i].num = i;
 80005c4:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 80005c8:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 80005ca:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
   hpcd->IN_ep[i].maxpacket = 0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 80005ce:	3201      	adds	r2, #1
 80005d0:	2a0f      	cmp	r2, #15
 {
   hpcd->OUT_ep[i].is_in = 0U;
 80005d2:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80005d6:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0U;
 80005da:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0U;
 80005de:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0U;
 80005e2:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 80005e6:	6041      	str	r1, [r0, #4]
 80005e8:	f103 031c 	add.w	r3, r3, #28
   hpcd->IN_ep[i].maxpacket = 0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 80005ec:	d1e8      	bne.n	80005c0 <HAL_PCD_Init+0x78>
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80005ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005f0:	466d      	mov	r5, sp
 80005f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000600:	4670      	mov	r0, lr
 8000602:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000606:	f001 fecb 	bl	80023a0 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 800060a:	2301      	movs	r3, #1
 800060c:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9
 
#ifdef USB_OTG_GLPMCFG_LPMEN
 /* Activate LPM */
 if (hpcd->Init.lpm_enable == 1U)
 8000610:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000612:	2b01      	cmp	r3, #1
 8000614:	d102      	bne.n	800061c <HAL_PCD_Init+0xd4>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 8000616:	4630      	mov	r0, r6
 8000618:	f000 fc2c 	bl	8000e74 <HAL_PCDEx_ActivateLPM>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 800061c:	6830      	ldr	r0, [r6, #0]
 800061e:	f002 faaa 	bl	8002b76 <USB_DevDisconnect>
 return HAL_OK;
 8000622:	2000      	movs	r0, #0
 8000624:	e000      	b.n	8000628 <HAL_PCD_Init+0xe0>
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 8000626:	2001      	movs	r0, #1
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 return HAL_OK;
}
 8000628:	b00b      	add	sp, #44	; 0x2c
 800062a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800062c <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 800062c:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8000630:	2b01      	cmp	r3, #1
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8000632:	b510      	push	{r4, lr}
 8000634:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000636:	d00c      	beq.n	8000652 <HAL_PCD_Start+0x26>
 8000638:	2301      	movs	r3, #1
 800063a:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 800063e:	6800      	ldr	r0, [r0, #0]
 8000640:	f002 fa8d 	bl	8002b5e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000644:	6820      	ldr	r0, [r4, #0]
 8000646:	f001 fe89 	bl	800235c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 800064a:	2000      	movs	r0, #0
 800064c:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000650:	bd10      	pop	{r4, pc}
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8000652:	2002      	movs	r0, #2
  USB_DevConnect (hpcd->Instance);  
  __HAL_PCD_ENABLE(hpcd);
  __HAL_UNLOCK(hpcd); 
  return HAL_OK;
}
 8000654:	bd10      	pop	{r4, pc}
	...

08000658 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800065c:	f8d0 a000 	ldr.w	sl, [r0]
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000660:	b087      	sub	sp, #28
 8000662:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000664:	4650      	mov	r0, sl
 8000666:	f002 fac0 	bl	8002bea <USB_GetMode>
 800066a:	2800      	cmp	r0, #0
 800066c:	f040 82a3 	bne.w	8000bb6 <HAL_PCD_IRQHandler+0x55e>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8000670:	6820      	ldr	r0, [r4, #0]
 8000672:	f002 fa8c 	bl	8002b8e <USB_ReadInterrupts>
 8000676:	2800      	cmp	r0, #0
 8000678:	f000 829d 	beq.w	8000bb6 <HAL_PCD_IRQHandler+0x55e>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800067c:	6820      	ldr	r0, [r4, #0]
 800067e:	f002 fa86 	bl	8002b8e <USB_ReadInterrupts>
 8000682:	0782      	lsls	r2, r0, #30
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000684:	bf48      	it	mi
 8000686:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000688:	6820      	ldr	r0, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800068a:	bf42      	ittt	mi
 800068c:	6953      	ldrmi	r3, [r2, #20]
 800068e:	f003 0302 	andmi.w	r3, r3, #2
 8000692:	6153      	strmi	r3, [r2, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000694:	f002 fa7b 	bl	8002b8e <USB_ReadInterrupts>
 8000698:	f410 2000 	ands.w	r0, r0, #524288	; 0x80000
 800069c:	d04f      	beq.n	800073e <HAL_PCD_IRQHandler+0xe6>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800069e:	6820      	ldr	r0, [r4, #0]
 80006a0:	f002 fa79 	bl	8002b96 <USB_ReadDevAllOutEpInterrupt>
 80006a4:	f50a 6630 	add.w	r6, sl, #2816	; 0xb00
 80006a8:	4607      	mov	r7, r0
 80006aa:	46a1      	mov	r9, r4
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
    {
      epnum = 0U;
 80006ac:	2500      	movs	r5, #0
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
      
      while ( ep_intr )
 80006ae:	2f00      	cmp	r7, #0
 80006b0:	d046      	beq.n	8000740 <HAL_PCD_IRQHandler+0xe8>
      {
        if (ep_intr & 0x1U)
 80006b2:	07fb      	lsls	r3, r7, #31
 80006b4:	d53d      	bpl.n	8000732 <HAL_PCD_IRQHandler+0xda>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 80006b6:	fa5f fb85 	uxtb.w	fp, r5
 80006ba:	4659      	mov	r1, fp
 80006bc:	6820      	ldr	r0, [r4, #0]
 80006be:	f002 fa7a 	bl	8002bb6 <USB_ReadDevOutEPInterrupt>
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80006c2:	f010 0f01 	tst.w	r0, #1
      
      while ( ep_intr )
      {
        if (ep_intr & 0x1U)
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 80006c6:	4680      	mov	r8, r0
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80006c8:	d021      	beq.n	800070e <HAL_PCD_IRQHandler+0xb6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80006ca:	2101      	movs	r1, #1
 80006cc:	60b1      	str	r1, [r6, #8]
            
            if(hpcd->Init.dma_enable == 1U)
 80006ce:	6921      	ldr	r1, [r4, #16]
 80006d0:	2901      	cmp	r1, #1
 80006d2:	d10c      	bne.n	80006ee <HAL_PCD_IRQHandler+0x96>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 80006d4:	6931      	ldr	r1, [r6, #16]
 80006d6:	f8d9 0200 	ldr.w	r0, [r9, #512]	; 0x200
 80006da:	f3c1 0112 	ubfx	r1, r1, #0, #19
 80006de:	1a41      	subs	r1, r0, r1
 80006e0:	f8c9 1210 	str.w	r1, [r9, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 80006e4:	f8d9 1204 	ldr.w	r1, [r9, #516]	; 0x204
 80006e8:	4408      	add	r0, r1
 80006ea:	f8c9 0204 	str.w	r0, [r9, #516]	; 0x204
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 80006ee:	4659      	mov	r1, fp
 80006f0:	4620      	mov	r0, r4
 80006f2:	f004 fbc3 	bl	8004e7c <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 80006f6:	6921      	ldr	r1, [r4, #16]
 80006f8:	2901      	cmp	r1, #1
 80006fa:	d108      	bne.n	800070e <HAL_PCD_IRQHandler+0xb6>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80006fc:	b93d      	cbnz	r5, 800070e <HAL_PCD_IRQHandler+0xb6>
 80006fe:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8000702:	b922      	cbnz	r2, 800070e <HAL_PCD_IRQHandler+0xb6>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000704:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000708:	6820      	ldr	r0, [r4, #0]
 800070a:	f002 fa8d 	bl	8002c28 <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800070e:	f018 0f08 	tst.w	r8, #8
 8000712:	d004      	beq.n	800071e <HAL_PCD_IRQHandler+0xc6>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 8000714:	4620      	mov	r0, r4
 8000716:	f004 fbab 	bl	8004e70 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800071a:	2308      	movs	r3, #8
 800071c:	60b3      	str	r3, [r6, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800071e:	f018 0f10 	tst.w	r8, #16
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000722:	bf1c      	itt	ne
 8000724:	2310      	movne	r3, #16
 8000726:	60b3      	strne	r3, [r6, #8]
          }

#ifdef USB_OTG_DOEPINT_OTEPSPR 
          /* Clear Status Phase Received interrupt */
          if(( epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000728:	f018 0f20 	tst.w	r8, #32
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800072c:	bf1c      	itt	ne
 800072e:	2320      	movne	r3, #32
 8000730:	60b3      	strne	r3, [r6, #8]
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 8000732:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000734:	087f      	lsrs	r7, r7, #1
 8000736:	3620      	adds	r6, #32
 8000738:	f109 091c 	add.w	r9, r9, #28
 800073c:	e7b7      	b.n	80006ae <HAL_PCD_IRQHandler+0x56>
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 800073e:	4605      	mov	r5, r0
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000740:	6820      	ldr	r0, [r4, #0]
 8000742:	f002 fa24 	bl	8002b8e <USB_ReadInterrupts>
 8000746:	0340      	lsls	r0, r0, #13
 8000748:	f140 809b 	bpl.w	8000882 <HAL_PCD_IRQHandler+0x22a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800074c:	6820      	ldr	r0, [r4, #0]
 800074e:	f002 fa2a 	bl	8002ba6 <USB_ReadDevAllInEpInterrupt>
 8000752:	4626      	mov	r6, r4
 8000754:	9003      	str	r0, [sp, #12]
 8000756:	f50a 6810 	add.w	r8, sl, #2304	; 0x900
      
      epnum = 0U;
 800075a:	2500      	movs	r5, #0
      
      while ( ep_intr )
 800075c:	9b03      	ldr	r3, [sp, #12]
 800075e:	2b00      	cmp	r3, #0
 8000760:	f000 808f 	beq.w	8000882 <HAL_PCD_IRQHandler+0x22a>
      {
        if (ep_intr & 0x1U) /* In ITR */
 8000764:	9b03      	ldr	r3, [sp, #12]
 8000766:	07d9      	lsls	r1, r3, #31
 8000768:	f140 8083 	bpl.w	8000872 <HAL_PCD_IRQHandler+0x21a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 800076c:	fa5f f985 	uxtb.w	r9, r5
 8000770:	4649      	mov	r1, r9
 8000772:	6820      	ldr	r0, [r4, #0]
 8000774:	f002 fa29 	bl	8002bca <USB_ReadDevInEPInterrupt>

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000778:	07c2      	lsls	r2, r0, #31
      
      while ( ep_intr )
      {
        if (ep_intr & 0x1U) /* In ITR */
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 800077a:	4607      	mov	r7, r0

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800077c:	d520      	bpl.n	80007c0 <HAL_PCD_IRQHandler+0x168>
          {
            fifoemptymsk = 0x1U << epnum;
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800077e:	f8da 3834 	ldr.w	r3, [sl, #2100]	; 0x834
 8000782:	2101      	movs	r1, #1
 8000784:	40a9      	lsls	r1, r5
 8000786:	ea23 0301 	bic.w	r3, r3, r1
 800078a:	f8ca 3834 	str.w	r3, [sl, #2100]	; 0x834
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800078e:	2301      	movs	r3, #1
 8000790:	f8c8 3008 	str.w	r3, [r8, #8]
            
            if (hpcd->Init.dma_enable == 1U)
 8000794:	6923      	ldr	r3, [r4, #16]
 8000796:	2b01      	cmp	r3, #1
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8000798:	bf01      	itttt	eq
 800079a:	6c72      	ldreq	r2, [r6, #68]	; 0x44
 800079c:	6c33      	ldreq	r3, [r6, #64]	; 0x40
 800079e:	189b      	addeq	r3, r3, r2
 80007a0:	6473      	streq	r3, [r6, #68]	; 0x44
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 80007a2:	4649      	mov	r1, r9
 80007a4:	4620      	mov	r0, r4
 80007a6:	f004 fb72 	bl	8004e8e <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 80007aa:	6921      	ldr	r1, [r4, #16]
 80007ac:	2901      	cmp	r1, #1
 80007ae:	d107      	bne.n	80007c0 <HAL_PCD_IRQHandler+0x168>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80007b0:	b935      	cbnz	r5, 80007c0 <HAL_PCD_IRQHandler+0x168>
 80007b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80007b4:	b923      	cbnz	r3, 80007c0 <HAL_PCD_IRQHandler+0x168>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80007b6:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80007ba:	6820      	ldr	r0, [r4, #0]
 80007bc:	f002 fa34 	bl	8002c28 <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80007c0:	073b      	lsls	r3, r7, #28
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80007c2:	bf44      	itt	mi
 80007c4:	2308      	movmi	r3, #8
 80007c6:	f8c8 3008 	strmi.w	r3, [r8, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80007ca:	06f8      	lsls	r0, r7, #27
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80007cc:	bf44      	itt	mi
 80007ce:	2310      	movmi	r3, #16
 80007d0:	f8c8 3008 	strmi.w	r3, [r8, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80007d4:	0679      	lsls	r1, r7, #25
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80007d6:	bf44      	itt	mi
 80007d8:	2340      	movmi	r3, #64	; 0x40
 80007da:	f8c8 3008 	strmi.w	r3, [r8, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80007de:	07ba      	lsls	r2, r7, #30
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80007e0:	bf44      	itt	mi
 80007e2:	2302      	movmi	r3, #2
 80007e4:	f8c8 3008 	strmi.w	r3, [r8, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80007e8:	063b      	lsls	r3, r7, #24
 80007ea:	d542      	bpl.n	8000872 <HAL_PCD_IRQHandler+0x21a>
  * @param  epnum : endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80007ec:	6823      	ldr	r3, [r4, #0]
 80007ee:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 80007f0:	6d37      	ldr	r7, [r6, #80]	; 0x50
 80007f2:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 80007f4:	1bdb      	subs	r3, r3, r7
  
  if (len > ep->maxpacket)
 80007f6:	6c37      	ldr	r7, [r6, #64]	; 0x40
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 80007f8:	429f      	cmp	r7, r3
 80007fa:	bf28      	it	cs
 80007fc:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80007fe:	9b04      	ldr	r3, [sp, #16]
 8000800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3U) / 4U;
 8000804:	f107 0b03 	add.w	fp, r7, #3
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000808:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3U) / 4U;
 800080c:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000810:	9305      	str	r3, [sp, #20]
 8000812:	9b05      	ldr	r3, [sp, #20]
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	b29b      	uxth	r3, r3
 8000818:	455b      	cmp	r3, fp
 800081a:	d80c      	bhi.n	8000836 <HAL_PCD_IRQHandler+0x1de>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 800081c:	bb4f      	cbnz	r7, 8000872 <HAL_PCD_IRQHandler+0x21a>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800081e:	9b04      	ldr	r3, [sp, #16]
 8000820:	2201      	movs	r2, #1
 8000822:	f503 6900 	add.w	r9, r3, #2048	; 0x800
 8000826:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 800082a:	40aa      	lsls	r2, r5
 800082c:	ea23 0302 	bic.w	r3, r3, r2
 8000830:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
 8000834:	e01d      	b.n	8000872 <HAL_PCD_IRQHandler+0x21a>
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
          (ep->xfer_count < ep->xfer_len) &&
 8000836:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8000838:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800083a:	4293      	cmp	r3, r2
 800083c:	d9ee      	bls.n	800081c <HAL_PCD_IRQHandler+0x1c4>
          (ep->xfer_count < ep->xfer_len) &&
 800083e:	2b00      	cmp	r3, #0
 8000840:	d0ec      	beq.n	800081c <HAL_PCD_IRQHandler+0x1c4>
            (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
    
    if (len > ep->maxpacket)
 8000842:	6c37      	ldr	r7, [r6, #64]	; 0x40
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000844:	9804      	ldr	r0, [sp, #16]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
          (ep->xfer_count < ep->xfer_len) &&
            (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8000846:	1a9b      	subs	r3, r3, r2
 8000848:	429f      	cmp	r7, r3
 800084a:	bf28      	it	cs
 800084c:	461f      	movcs	r7, r3
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 800084e:	7c23      	ldrb	r3, [r4, #16]
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	464a      	mov	r2, r9
 8000854:	b2bb      	uxth	r3, r7
 8000856:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8000858:	f002 f8ff 	bl	8002a5a <USB_WritePacket>
    
    ep->xfer_buff  += len;
 800085c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800085e:	443b      	add	r3, r7
 8000860:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 8000862:	6d33      	ldr	r3, [r6, #80]	; 0x50
    
    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8000864:	f107 0b03 	add.w	fp, r7, #3
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
 8000868:	443b      	add	r3, r7
    
    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 800086a:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
 800086e:	6533      	str	r3, [r6, #80]	; 0x50
 8000870:	e7cf      	b.n	8000812 <HAL_PCD_IRQHandler+0x1ba>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
          }
        }
        epnum++;
        ep_intr >>= 1U;
 8000872:	9b03      	ldr	r3, [sp, #12]
 8000874:	085b      	lsrs	r3, r3, #1
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
          }
        }
        epnum++;
 8000876:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000878:	9303      	str	r3, [sp, #12]
 800087a:	361c      	adds	r6, #28
 800087c:	f108 0820 	add.w	r8, r8, #32
 8000880:	e76c      	b.n	800075c <HAL_PCD_IRQHandler+0x104>
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000882:	6820      	ldr	r0, [r4, #0]
 8000884:	f002 f983 	bl	8002b8e <USB_ReadInterrupts>
 8000888:	2800      	cmp	r0, #0
 800088a:	da18      	bge.n	80008be <HAL_PCD_IRQHandler+0x266>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800088c:	f8da 3804 	ldr.w	r3, [sl, #2052]	; 0x804
 8000890:	f023 0301 	bic.w	r3, r3, #1
 8000894:	f8ca 3804 	str.w	r3, [sl, #2052]	; 0x804

#ifdef USB_OTG_GLPMCFG_LPMEN
      if(hpcd->LPM_State == LPM_L1)
 8000898:	f894 33ec 	ldrb.w	r3, [r4, #1004]	; 0x3ec
 800089c:	2b01      	cmp	r3, #1
 800089e:	d106      	bne.n	80008ae <HAL_PCD_IRQHandler+0x256>
      {
        hpcd->LPM_State = LPM_L0;
 80008a0:	2100      	movs	r1, #0
 80008a2:	f884 13ec 	strb.w	r1, [r4, #1004]	; 0x3ec
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80008a6:	4620      	mov	r0, r4
 80008a8:	f004 fc04 	bl	80050b4 <HAL_PCDEx_LPM_Callback>
 80008ac:	e002      	b.n	80008b4 <HAL_PCD_IRQHandler+0x25c>
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 80008ae:	4620      	mov	r0, r4
 80008b0:	f004 fb22 	bl	8004ef8 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80008b4:	6822      	ldr	r2, [r4, #0]
 80008b6:	6953      	ldr	r3, [r2, #20]
 80008b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80008bc:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80008be:	6820      	ldr	r0, [r4, #0]
 80008c0:	f002 f965 	bl	8002b8e <USB_ReadInterrupts>
 80008c4:	0507      	lsls	r7, r0, #20
 80008c6:	d50b      	bpl.n	80008e0 <HAL_PCD_IRQHandler+0x288>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80008c8:	f8da 3808 	ldr.w	r3, [sl, #2056]	; 0x808
 80008cc:	07de      	lsls	r6, r3, #31
 80008ce:	d502      	bpl.n	80008d6 <HAL_PCD_IRQHandler+0x27e>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 80008d0:	4620      	mov	r0, r4
 80008d2:	f004 faf9 	bl	8004ec8 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80008d6:	6822      	ldr	r2, [r4, #0]
 80008d8:	6953      	ldr	r3, [r2, #20]
 80008da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008de:	6153      	str	r3, [r2, #20]
    }

#ifdef USB_OTG_GLPMCFG_LPMEN
    /* Handle LPM Interrupt */ 
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80008e0:	6820      	ldr	r0, [r4, #0]
 80008e2:	f002 f954 	bl	8002b8e <USB_ReadInterrupts>
 80008e6:	0100      	lsls	r0, r0, #4
 80008e8:	d516      	bpl.n	8000918 <HAL_PCD_IRQHandler+0x2c0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);      
 80008ea:	6823      	ldr	r3, [r4, #0]
 80008ec:	695a      	ldr	r2, [r3, #20]
 80008ee:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80008f2:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 80008f4:	f894 23ec 	ldrb.w	r2, [r4, #1004]	; 0x3ec
 80008f8:	b95a      	cbnz	r2, 8000912 <HAL_PCD_IRQHandler+0x2ba>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80008fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);      
      if( hpcd->LPM_State == LPM_L0)
      {
        hpcd->LPM_State = LPM_L1;
 80008fc:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80008fe:	f3c3 0383 	ubfx	r3, r3, #2, #4
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);      
      if( hpcd->LPM_State == LPM_L0)
      {
        hpcd->LPM_State = LPM_L1;
 8000902:	f884 13ec 	strb.w	r1, [r4, #1004]	; 0x3ec
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8000906:	f8c4 33f0 	str.w	r3, [r4, #1008]	; 0x3f0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800090a:	4620      	mov	r0, r4
 800090c:	f004 fbd2 	bl	80050b4 <HAL_PCDEx_LPM_Callback>
 8000910:	e002      	b.n	8000918 <HAL_PCD_IRQHandler+0x2c0>
      }
      else
      {
        HAL_PCD_SuspendCallback(hpcd);
 8000912:	4620      	mov	r0, r4
 8000914:	f004 fad8 	bl	8004ec8 <HAL_PCD_SuspendCallback>
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000918:	6820      	ldr	r0, [r4, #0]
 800091a:	f002 f938 	bl	8002b8e <USB_ReadInterrupts>
 800091e:	04c1      	lsls	r1, r0, #19
 8000920:	d543      	bpl.n	80009aa <HAL_PCD_IRQHandler+0x352>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000922:	f50a 6600 	add.w	r6, sl, #2048	; 0x800
 8000926:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000928:	6820      	ldr	r0, [r4, #0]
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 800092a:	f023 0301 	bic.w	r3, r3, #1
 800092e:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000930:	2110      	movs	r1, #16
 8000932:	f001 fdd7 	bl	80024e4 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000936:	6860      	ldr	r0, [r4, #4]
 8000938:	f50a 6310 	add.w	r3, sl, #2304	; 0x900
 800093c:	2200      	movs	r2, #0
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 800093e:	21ff      	movs	r1, #255	; 0xff
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000940:	4282      	cmp	r2, r0
 8000942:	d005      	beq.n	8000950 <HAL_PCD_IRQHandler+0x2f8>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000944:	6099      	str	r1, [r3, #8]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000946:	3201      	adds	r2, #1
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8000948:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
 800094c:	3320      	adds	r3, #32
 800094e:	e7f7      	b.n	8000940 <HAL_PCD_IRQHandler+0x2e8>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8000950:	f04f 33ff 	mov.w	r3, #4294967295
 8000954:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000956:	69f3      	ldr	r3, [r6, #28]
 8000958:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800095c:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 800095e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000960:	b153      	cbz	r3, 8000978 <HAL_PCD_IRQHandler+0x320>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8000962:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8000966:	f043 030b 	orr.w	r3, r3, #11
 800096a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 800096e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000970:	f043 030b 	orr.w	r3, r3, #11
 8000974:	6473      	str	r3, [r6, #68]	; 0x44
 8000976:	e007      	b.n	8000988 <HAL_PCD_IRQHandler+0x330>
      }
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
 8000978:	6973      	ldr	r3, [r6, #20]
 800097a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800097e:	6173      	str	r3, [r6, #20]
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8000980:	6933      	ldr	r3, [r6, #16]
 8000982:	f043 030b 	orr.w	r3, r3, #11
 8000986:	6133      	str	r3, [r6, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000988:	f8da 3800 	ldr.w	r3, [sl, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800098c:	7c21      	ldrb	r1, [r4, #16]
 800098e:	6820      	ldr	r0, [r4, #0]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000990:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8000994:	f8ca 3800 	str.w	r3, [sl, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000998:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 800099c:	f002 f944 	bl	8002c28 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80009a0:	6822      	ldr	r2, [r4, #0]
 80009a2:	6953      	ldr	r3, [r2, #20]
 80009a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009a8:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80009aa:	6820      	ldr	r0, [r4, #0]
 80009ac:	f002 f8ef 	bl	8002b8e <USB_ReadInterrupts>
 80009b0:	0482      	lsls	r2, r0, #18
 80009b2:	d57c      	bpl.n	8000aae <HAL_PCD_IRQHandler+0x456>
    {
      USB_ActivateSetup(hpcd->Instance);
 80009b4:	6820      	ldr	r0, [r4, #0]
 80009b6:	f002 f91c 	bl	8002bf2 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80009ba:	6820      	ldr	r0, [r4, #0]
 80009bc:	68c3      	ldr	r3, [r0, #12]
 80009be:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 80009c2:	60c3      	str	r3, [r0, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 80009c4:	f001 fdb7 	bl	8002536 <USB_GetDevSpeed>
 80009c8:	b948      	cbnz	r0, 80009de <HAL_PCD_IRQHandler+0x386>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 80009ca:	6822      	ldr	r2, [r4, #0]
      USB_ActivateSetup(hpcd->Instance);
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 80009cc:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 80009ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d2:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 80009d4:	68d3      	ldr	r3, [r2, #12]
 80009d6:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 80009da:	60d3      	str	r3, [r2, #12]
 80009dc:	e05f      	b.n	8000a9e <HAL_PCD_IRQHandler+0x446>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 80009de:	2303      	movs	r3, #3
 80009e0:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 80009e2:	2340      	movs	r3, #64	; 0x40
 80009e4:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */
        
        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 80009e6:	f000 fb59 	bl	800109c <HAL_RCC_GetHCLKFreq>
        
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 80009ea:	4b74      	ldr	r3, [pc, #464]	; (8000bbc <HAL_PCD_IRQHandler+0x564>)
 80009ec:	4a74      	ldr	r2, [pc, #464]	; (8000bc0 <HAL_PCD_IRQHandler+0x568>)
 80009ee:	4403      	add	r3, r0
 80009f0:	4293      	cmp	r3, r2
 80009f2:	6823      	ldr	r3, [r4, #0]
 80009f4:	d803      	bhi.n	80009fe <HAL_PCD_IRQHandler+0x3a6>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 80009fc:	e04e      	b.n	8000a9c <HAL_PCD_IRQHandler+0x444>
        }
        
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 80009fe:	4a71      	ldr	r2, [pc, #452]	; (8000bc4 <HAL_PCD_IRQHandler+0x56c>)
 8000a00:	4971      	ldr	r1, [pc, #452]	; (8000bc8 <HAL_PCD_IRQHandler+0x570>)
 8000a02:	4402      	add	r2, r0
 8000a04:	428a      	cmp	r2, r1
 8000a06:	d803      	bhi.n	8000a10 <HAL_PCD_IRQHandler+0x3b8>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000a08:	68da      	ldr	r2, [r3, #12]
 8000a0a:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8000a0e:	e045      	b.n	8000a9c <HAL_PCD_IRQHandler+0x444>
        }
        
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8000a10:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8000a14:	496d      	ldr	r1, [pc, #436]	; (8000bcc <HAL_PCD_IRQHandler+0x574>)
 8000a16:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8000a1a:	428a      	cmp	r2, r1
 8000a1c:	d803      	bhi.n	8000a26 <HAL_PCD_IRQHandler+0x3ce>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000a1e:	68da      	ldr	r2, [r3, #12]
 8000a20:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8000a24:	e03a      	b.n	8000a9c <HAL_PCD_IRQHandler+0x444>
        }
        
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8000a26:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8000a2a:	4969      	ldr	r1, [pc, #420]	; (8000bd0 <HAL_PCD_IRQHandler+0x578>)
 8000a2c:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8000a30:	428a      	cmp	r2, r1
 8000a32:	d803      	bhi.n	8000a3c <HAL_PCD_IRQHandler+0x3e4>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000a34:	68da      	ldr	r2, [r3, #12]
 8000a36:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000a3a:	e02f      	b.n	8000a9c <HAL_PCD_IRQHandler+0x444>
        }
        
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 8000a3c:	4a65      	ldr	r2, [pc, #404]	; (8000bd4 <HAL_PCD_IRQHandler+0x57c>)
 8000a3e:	4966      	ldr	r1, [pc, #408]	; (8000bd8 <HAL_PCD_IRQHandler+0x580>)
 8000a40:	4402      	add	r2, r0
 8000a42:	428a      	cmp	r2, r1
 8000a44:	d803      	bhi.n	8000a4e <HAL_PCD_IRQHandler+0x3f6>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000a46:	68da      	ldr	r2, [r3, #12]
 8000a48:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8000a4c:	e026      	b.n	8000a9c <HAL_PCD_IRQHandler+0x444>
        }
        
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 8000a4e:	4a63      	ldr	r2, [pc, #396]	; (8000bdc <HAL_PCD_IRQHandler+0x584>)
 8000a50:	4963      	ldr	r1, [pc, #396]	; (8000be0 <HAL_PCD_IRQHandler+0x588>)
 8000a52:	4402      	add	r2, r0
 8000a54:	428a      	cmp	r2, r1
 8000a56:	d803      	bhi.n	8000a60 <HAL_PCD_IRQHandler+0x408>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000a58:	68da      	ldr	r2, [r3, #12]
 8000a5a:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8000a5e:	e01d      	b.n	8000a9c <HAL_PCD_IRQHandler+0x444>
        }
        
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8000a60:	4a60      	ldr	r2, [pc, #384]	; (8000be4 <HAL_PCD_IRQHandler+0x58c>)
 8000a62:	4961      	ldr	r1, [pc, #388]	; (8000be8 <HAL_PCD_IRQHandler+0x590>)
 8000a64:	4402      	add	r2, r0
 8000a66:	428a      	cmp	r2, r1
 8000a68:	d803      	bhi.n	8000a72 <HAL_PCD_IRQHandler+0x41a>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000a6a:	68da      	ldr	r2, [r3, #12]
 8000a6c:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8000a70:	e014      	b.n	8000a9c <HAL_PCD_IRQHandler+0x444>
        }
        
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8000a72:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8000a76:	495d      	ldr	r1, [pc, #372]	; (8000bec <HAL_PCD_IRQHandler+0x594>)
 8000a78:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8000a7c:	428a      	cmp	r2, r1
 8000a7e:	d803      	bhi.n	8000a88 <HAL_PCD_IRQHandler+0x430>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000a80:	68da      	ldr	r2, [r3, #12]
 8000a82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000a86:	e009      	b.n	8000a9c <HAL_PCD_IRQHandler+0x444>
        }
        
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8000a88:	4a59      	ldr	r2, [pc, #356]	; (8000bf0 <HAL_PCD_IRQHandler+0x598>)
 8000a8a:	495a      	ldr	r1, [pc, #360]	; (8000bf4 <HAL_PCD_IRQHandler+0x59c>)
 8000a8c:	4402      	add	r2, r0
 8000a8e:	428a      	cmp	r2, r1
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000a90:	68da      	ldr	r2, [r3, #12]
 8000a92:	bf94      	ite	ls
 8000a94:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000a98:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8000a9c:	60da      	str	r2, [r3, #12]
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8000a9e:	4620      	mov	r0, r4
 8000aa0:	f004 fa01 	bl	8004ea6 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000aa4:	6822      	ldr	r2, [r4, #0]
 8000aa6:	6953      	ldr	r3, [r2, #20]
 8000aa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aac:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000aae:	6820      	ldr	r0, [r4, #0]
 8000ab0:	f002 f86d 	bl	8002b8e <USB_ReadInterrupts>
 8000ab4:	06c3      	lsls	r3, r0, #27
 8000ab6:	d538      	bpl.n	8000b2a <HAL_PCD_IRQHandler+0x4d2>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000ab8:	6822      	ldr	r2, [r4, #0]
 8000aba:	6993      	ldr	r3, [r2, #24]
 8000abc:	f023 0310 	bic.w	r3, r3, #16
 8000ac0:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8000ac2:	f8da 6020 	ldr.w	r6, [sl, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000ac6:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8000aca:	2b02      	cmp	r3, #2
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
      
      temp = USBx->GRXSTSP;
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000acc:	f006 070f 	and.w	r7, r6, #15
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000ad0:	d114      	bne.n	8000afc <HAL_PCD_IRQHandler+0x4a4>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000ad2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000ad6:	4033      	ands	r3, r6
 8000ad8:	b313      	cbz	r3, 8000b20 <HAL_PCD_IRQHandler+0x4c8>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8000ada:	231c      	movs	r3, #28
 8000adc:	fb03 4707 	mla	r7, r3, r7, r4
 8000ae0:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000ae4:	4632      	mov	r2, r6
 8000ae6:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8000aea:	4650      	mov	r0, sl
 8000aec:	f001 ffc9 	bl	8002a82 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000af0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000af4:	4433      	add	r3, r6
 8000af6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8000afa:	e00c      	b.n	8000b16 <HAL_PCD_IRQHandler+0x4be>
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8000afc:	2b06      	cmp	r3, #6
 8000afe:	d10f      	bne.n	8000b20 <HAL_PCD_IRQHandler+0x4c8>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000b00:	2208      	movs	r2, #8
 8000b02:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 8000b06:	4650      	mov	r0, sl
 8000b08:	f001 ffbb 	bl	8002a82 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000b0c:	231c      	movs	r3, #28
 8000b0e:	fb03 4707 	mla	r7, r3, r7, r4
 8000b12:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000b16:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000b1a:	441e      	add	r6, r3
 8000b1c:	f8c7 6210 	str.w	r6, [r7, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000b20:	6822      	ldr	r2, [r4, #0]
 8000b22:	6993      	ldr	r3, [r2, #24]
 8000b24:	f043 0310 	orr.w	r3, r3, #16
 8000b28:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000b2a:	6820      	ldr	r0, [r4, #0]
 8000b2c:	f002 f82f 	bl	8002b8e <USB_ReadInterrupts>
 8000b30:	0707      	lsls	r7, r0, #28
 8000b32:	d507      	bpl.n	8000b44 <HAL_PCD_IRQHandler+0x4ec>
    {
      HAL_PCD_SOFCallback(hpcd);
 8000b34:	4620      	mov	r0, r4
 8000b36:	f004 f9b2 	bl	8004e9e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8000b3a:	6822      	ldr	r2, [r4, #0]
 8000b3c:	6953      	ldr	r3, [r2, #20]
 8000b3e:	f003 0308 	and.w	r3, r3, #8
 8000b42:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000b44:	6820      	ldr	r0, [r4, #0]
 8000b46:	f002 f822 	bl	8002b8e <USB_ReadInterrupts>
 8000b4a:	02c6      	lsls	r6, r0, #11
 8000b4c:	d508      	bpl.n	8000b60 <HAL_PCD_IRQHandler+0x508>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8000b4e:	b2e9      	uxtb	r1, r5
 8000b50:	4620      	mov	r0, r4
 8000b52:	f004 f9d9 	bl	8004f08 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000b56:	6822      	ldr	r2, [r4, #0]
 8000b58:	6953      	ldr	r3, [r2, #20]
 8000b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b5e:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000b60:	6820      	ldr	r0, [r4, #0]
 8000b62:	f002 f814 	bl	8002b8e <USB_ReadInterrupts>
 8000b66:	0280      	lsls	r0, r0, #10
 8000b68:	d508      	bpl.n	8000b7c <HAL_PCD_IRQHandler+0x524>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8000b6a:	b2e9      	uxtb	r1, r5
 8000b6c:	4620      	mov	r0, r4
 8000b6e:	f004 f9c7 	bl	8004f00 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000b72:	6822      	ldr	r2, [r4, #0]
 8000b74:	6953      	ldr	r3, [r2, #20]
 8000b76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b7a:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000b7c:	6820      	ldr	r0, [r4, #0]
 8000b7e:	f002 f806 	bl	8002b8e <USB_ReadInterrupts>
 8000b82:	0041      	lsls	r1, r0, #1
 8000b84:	d507      	bpl.n	8000b96 <HAL_PCD_IRQHandler+0x53e>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8000b86:	4620      	mov	r0, r4
 8000b88:	f004 f9c2 	bl	8004f10 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000b8c:	6822      	ldr	r2, [r4, #0]
 8000b8e:	6953      	ldr	r3, [r2, #20]
 8000b90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000b94:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000b96:	6820      	ldr	r0, [r4, #0]
 8000b98:	f001 fff9 	bl	8002b8e <USB_ReadInterrupts>
 8000b9c:	0742      	lsls	r2, r0, #29
 8000b9e:	d50a      	bpl.n	8000bb6 <HAL_PCD_IRQHandler+0x55e>
    {
      temp = hpcd->Instance->GOTGINT;
 8000ba0:	6823      	ldr	r3, [r4, #0]
 8000ba2:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000ba4:	076b      	lsls	r3, r5, #29
 8000ba6:	d502      	bpl.n	8000bae <HAL_PCD_IRQHandler+0x556>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8000ba8:	4620      	mov	r0, r4
 8000baa:	f004 f9b5 	bl	8004f18 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8000bae:	6822      	ldr	r2, [r4, #0]
 8000bb0:	6853      	ldr	r3, [r2, #4]
 8000bb2:	432b      	orrs	r3, r5
 8000bb4:	6053      	str	r3, [r2, #4]
    }
  }
}
 8000bb6:	b007      	add	sp, #28
 8000bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bbc:	ff275340 	.word	0xff275340
 8000bc0:	000c34ff 	.word	0x000c34ff
 8000bc4:	ff1b1e40 	.word	0xff1b1e40
 8000bc8:	000f423f 	.word	0x000f423f
 8000bcc:	00124f7f 	.word	0x00124f7f
 8000bd0:	0013d61f 	.word	0x0013d61f
 8000bd4:	fee5b660 	.word	0xfee5b660
 8000bd8:	0016e35f 	.word	0x0016e35f
 8000bdc:	feced300 	.word	0xfeced300
 8000be0:	001b773f 	.word	0x001b773f
 8000be4:	feb35bc0 	.word	0xfeb35bc0
 8000be8:	002191bf 	.word	0x002191bf
 8000bec:	0038751f 	.word	0x0038751f
 8000bf0:	fe5954e0 	.word	0xfe5954e0
 8000bf4:	00419cdf 	.word	0x00419cdf

08000bf8 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd); 
 8000bf8:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8000bfc:	2b01      	cmp	r3, #1
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000bfe:	b510      	push	{r4, lr}
 8000c00:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000c02:	d009      	beq.n	8000c18 <HAL_PCD_SetAddress+0x20>
 8000c04:	2301      	movs	r3, #1
 8000c06:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8000c0a:	6800      	ldr	r0, [r0, #0]
 8000c0c:	f001 ff97 	bl	8002b3e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8000c10:	2000      	movs	r0, #0
 8000c12:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000c16:	bd10      	pop	{r4, pc}
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd); 
 8000c18:	2002      	movs	r0, #2
  USB_SetDevAddress(hpcd->Instance, address);
  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8000c1a:	bd10      	pop	{r4, pc}

08000c1c <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000c1c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8000c1e:	b24e      	sxtb	r6, r1
 8000c20:	2e00      	cmp	r6, #0
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000c22:	4604      	mov	r4, r0
 8000c24:	f04f 051c 	mov.w	r5, #28
 8000c28:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  HAL_StatusTypeDef  ret = HAL_OK;
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000c2c:	bfb5      	itete	lt
 8000c2e:	fb05 4100 	mlalt	r1, r5, r0, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000c32:	fb05 4101 	mlage	r1, r5, r1, r4
  HAL_StatusTypeDef  ret = HAL_OK;
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000c36:	3138      	addlt	r1, #56	; 0x38
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000c38:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  }
  ep->num   = ep_addr & 0x7F;
 8000c3c:	b2c0      	uxtb	r0, r0
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
  if (ep->is_in)
 8000c3e:	2e00      	cmp	r6, #0
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000c40:	bfb8      	it	lt
 8000c42:	80c8      	strhlt	r0, [r1, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 8000c44:	2b02      	cmp	r3, #2
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8000c46:	70cb      	strb	r3, [r1, #3]
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8000c48:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep->tx_fifo_num = ep->num;
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
  {
    ep->data_pid_start = 0U;
 8000c4c:	bf04      	itt	eq
 8000c4e:	2300      	moveq	r3, #0
 8000c50:	710b      	strbeq	r3, [r1, #4]
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8000c52:	7008      	strb	r0, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8000c54:	704d      	strb	r5, [r1, #1]
  if (ep_type == EP_TYPE_BULK )
  {
    ep->data_pid_start = 0U;
  }
  
  __HAL_LOCK(hpcd); 
 8000c56:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 8000c5a:	608a      	str	r2, [r1, #8]
  if (ep_type == EP_TYPE_BULK )
  {
    ep->data_pid_start = 0U;
  }
  
  __HAL_LOCK(hpcd); 
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d009      	beq.n	8000c74 <HAL_PCD_EP_Open+0x58>
 8000c60:	2301      	movs	r3, #1
 8000c62:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000c66:	6820      	ldr	r0, [r4, #0]
 8000c68:	f001 fc80 	bl	800256c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 8000c72:	bd70      	pop	{r4, r5, r6, pc}
  if (ep_type == EP_TYPE_BULK )
  {
    ep->data_pid_start = 0U;
  }
  
  __HAL_LOCK(hpcd); 
 8000c74:	2002      	movs	r0, #2
  USB_ActivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);   
  return ret;
}
 8000c76:	bd70      	pop	{r4, r5, r6, pc}

08000c78 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8000c78:	b24b      	sxtb	r3, r1
 8000c7a:	2b00      	cmp	r3, #0
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8000c7c:	b510      	push	{r4, lr}
 8000c7e:	f04f 021c 	mov.w	r2, #28
 8000c82:	4604      	mov	r4, r0
 8000c84:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000c88:	bfb5      	itete	lt
 8000c8a:	fb02 4100 	mlalt	r1, r2, r0, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000c8e:	fb02 4101 	mlage	r1, r2, r1, r4
{  
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000c92:	3138      	addlt	r1, #56	; 0x38
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000c94:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8000c98:	0fdb      	lsrs	r3, r3, #31
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8000c9a:	7008      	strb	r0, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8000c9c:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8000c9e:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d009      	beq.n	8000cba <HAL_PCD_EP_Close+0x42>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000cac:	6820      	ldr	r0, [r4, #0]
 8000cae:	f001 fc9e 	bl	80025ee <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000cb8:	bd10      	pop	{r4, pc}
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd); 
 8000cba:	2002      	movs	r0, #2
  USB_DeactivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8000cbc:	bd10      	pop	{r4, pc}

08000cbe <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000cbe:	b538      	push	{r3, r4, r5, lr}
 8000cc0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000cc4:	241c      	movs	r4, #28
 8000cc6:	436c      	muls	r4, r5
 8000cc8:	f504 71fc 	add.w	r1, r4, #504	; 0x1f8
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000ccc:	4404      	add	r4, r0
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000cce:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
 8000cd0:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0U;
 8000cd4:	2300      	movs	r3, #0
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000cd6:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000cda:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
 8000cde:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 8000ce2:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  
  if (hpcd->Init.dma_enable == 1U)
 8000ce6:	6903      	ldr	r3, [r0, #16]
 8000ce8:	2b01      	cmp	r3, #1
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8000cea:	bf08      	it	eq
 8000cec:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
  }
  
  if ((ep_addr & 0x7F) == 0)
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000cf0:	6800      	ldr	r0, [r0, #0]
 8000cf2:	b2da      	uxtb	r2, r3
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  if ((ep_addr & 0x7F) == 0)
 8000cf4:	b915      	cbnz	r5, 8000cfc <HAL_PCD_EP_Receive+0x3e>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000cf6:	f001 fe07 	bl	8002908 <USB_EP0StartXfer>
 8000cfa:	e001      	b.n	8000d00 <HAL_PCD_EP_Receive+0x42>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000cfc:	f001 fce8 	bl	80026d0 <USB_EPStartXfer>
  }
  
  return HAL_OK;
}
 8000d00:	2000      	movs	r0, #0
 8000d02:	bd38      	pop	{r3, r4, r5, pc}

08000d04 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8000d04:	f001 010f 	and.w	r1, r1, #15
 8000d08:	231c      	movs	r3, #28
 8000d0a:	fb03 0001 	mla	r0, r3, r1, r0
}
 8000d0e:	f8b0 0210 	ldrh.w	r0, [r0, #528]	; 0x210
 8000d12:	4770      	bx	lr

08000d14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d14:	b538      	push	{r3, r4, r5, lr}
 8000d16:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000d1a:	241c      	movs	r4, #28
 8000d1c:	436c      	muls	r4, r5
 8000d1e:	f104 0138 	add.w	r1, r4, #56	; 0x38
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000d22:	4404      	add	r4, r0
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000d24:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
 8000d26:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1U;
 8000d2c:	2301      	movs	r3, #1
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000d2e:	6462      	str	r2, [r4, #68]	; 0x44
  ep->xfer_len = len;
  ep->xfer_count = 0U;
  ep->is_in = 1U;
 8000d30:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 8000d34:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  
  if (hpcd->Init.dma_enable == 1U)
 8000d38:	6903      	ldr	r3, [r0, #16]
 8000d3a:	2b01      	cmp	r3, #1
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8000d3c:	bf08      	it	eq
 8000d3e:	64a2      	streq	r2, [r4, #72]	; 0x48
  }
  
  if ((ep_addr & 0x7F) == 0)
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000d40:	6800      	ldr	r0, [r0, #0]
 8000d42:	b2da      	uxtb	r2, r3
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  if ((ep_addr & 0x7F) == 0)
 8000d44:	b915      	cbnz	r5, 8000d4c <HAL_PCD_EP_Transmit+0x38>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000d46:	f001 fddf 	bl	8002908 <USB_EP0StartXfer>
 8000d4a:	e001      	b.n	8000d50 <HAL_PCD_EP_Transmit+0x3c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000d4c:	f001 fcc0 	bl	80026d0 <USB_EPStartXfer>
  }
  
  return HAL_OK;
}
 8000d50:	2000      	movs	r0, #0
 8000d52:	bd38      	pop	{r3, r4, r5, pc}

08000d54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000d54:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8000d56:	b24b      	sxtb	r3, r1
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8000d5e:	f04f 021c 	mov.w	r2, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000d62:	bfb5      	itete	lt
 8000d64:	fb02 0105 	mlalt	r1, r2, r5, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000d68:	fb02 0101 	mlage	r1, r2, r1, r0
{
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000d6c:	3138      	addlt	r1, #56	; 0x38
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000d6e:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  }
  
  ep->is_stall = 1U;
 8000d72:	2201      	movs	r2, #1
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000d74:	0fdb      	lsrs	r3, r3, #31
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1U;
  ep->num   = ep_addr & 0x7F;
 8000d76:	b2ed      	uxtb	r5, r5
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1U;
 8000d78:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8000d7a:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000d7c:	704b      	strb	r3, [r1, #1]
  
  
  __HAL_LOCK(hpcd); 
 8000d7e:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8000d82:	4293      	cmp	r3, r2
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000d84:	4604      	mov	r4, r0
  ep->is_stall = 1U;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  
  __HAL_LOCK(hpcd); 
 8000d86:	d00f      	beq.n	8000da8 <HAL_PCD_EP_SetStall+0x54>
 8000d88:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8000d8c:	6800      	ldr	r0, [r0, #0]
 8000d8e:	f001 fe86 	bl	8002a9e <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8000d92:	b92d      	cbnz	r5, 8000da0 <HAL_PCD_EP_SetStall+0x4c>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000d94:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000d98:	7c21      	ldrb	r1, [r4, #16]
 8000d9a:	6820      	ldr	r0, [r4, #0]
 8000d9c:	f001 ff44 	bl	8002c28 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8000da0:	2000      	movs	r0, #0
 8000da2:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  
  return HAL_OK;
 8000da6:	bd38      	pop	{r3, r4, r5, pc}
  ep->is_stall = 1U;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  
  __HAL_LOCK(hpcd); 
 8000da8:	2002      	movs	r0, #2
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8000daa:	bd38      	pop	{r3, r4, r5, pc}

08000dac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000dac:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8000dae:	b24b      	sxtb	r3, r1
 8000db0:	2b00      	cmp	r3, #0
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000db2:	4605      	mov	r5, r0
 8000db4:	f04f 021c 	mov.w	r2, #28
 8000db8:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000dbc:	bfb5      	itete	lt
 8000dbe:	fb02 5100 	mlalt	r1, r2, r0, r5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000dc2:	fb02 5101 	mlage	r1, r2, r1, r5
{
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000dc6:	3138      	addlt	r1, #56	; 0x38
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000dc8:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  }
  
  ep->is_stall = 0U;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000dcc:	0fdb      	lsrs	r3, r3, #31
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0U;
 8000dce:	2400      	movs	r4, #0
 8000dd0:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8000dd2:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000dd4:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8000dd6:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d009      	beq.n	8000df2 <HAL_PCD_EP_ClrStall+0x46>
 8000dde:	2301      	movs	r3, #1
 8000de0:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8000de4:	6828      	ldr	r0, [r5, #0]
 8000de6:	f001 fe8c 	bl	8002b02 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8000dea:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
    
  return HAL_OK;
 8000dee:	4620      	mov	r0, r4
 8000df0:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_stall = 0U;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 8000df2:	2002      	movs	r0, #2
  USB_EPClearStall(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd); 
    
  return HAL_OK;
}
 8000df4:	bd38      	pop	{r3, r4, r5, pc}

08000df6 <HAL_PCD_EP_Flush>:
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  __HAL_LOCK(hpcd); 
 8000df6:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8000dfa:	2b01      	cmp	r3, #1
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000dfc:	b510      	push	{r4, lr}
 8000dfe:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000e00:	d011      	beq.n	8000e26 <HAL_PCD_EP_Flush+0x30>
 8000e02:	2301      	movs	r3, #1
 8000e04:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  
  if ((ep_addr & 0x80) == 0x80)
 8000e08:	060b      	lsls	r3, r1, #24
 8000e0a:	d505      	bpl.n	8000e18 <HAL_PCD_EP_Flush+0x22>
  {
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7F);
 8000e0c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000e10:	6800      	ldr	r0, [r0, #0]
 8000e12:	f001 fb67 	bl	80024e4 <USB_FlushTxFifo>
 8000e16:	e002      	b.n	8000e1e <HAL_PCD_EP_Flush+0x28>
  }
  else
  {
    USB_FlushRxFifo(hpcd->Instance);
 8000e18:	6800      	ldr	r0, [r0, #0]
 8000e1a:	f001 fb75 	bl	8002508 <USB_FlushRxFifo>
  }
  
  __HAL_UNLOCK(hpcd); 
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
    
  return HAL_OK;
 8000e24:	bd10      	pop	{r4, pc}
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  __HAL_LOCK(hpcd); 
 8000e26:	2002      	movs	r0, #2
  }
  
  __HAL_UNLOCK(hpcd); 
    
  return HAL_OK;
}
 8000e28:	bd10      	pop	{r4, pc}

08000e2a <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo: The number of Tx fifo
  * @param  size: Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8000e2a:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8000e2c:	6804      	ldr	r4, [r0, #0]
 8000e2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  
  if(fifo == 0)
 8000e30:	b919      	cbnz	r1, 8000e3a <HAL_PCDEx_SetTxFiFo+0x10>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8000e32:	ea40 4302 	orr.w	r3, r0, r2, lsl #16
 8000e36:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e38:	e016      	b.n	8000e68 <HAL_PCDEx_SetTxFiFo+0x3e>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8000e3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 8000e3c:	2500      	movs	r5, #0
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8000e3e:	eb00 4313 	add.w	r3, r0, r3, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 8000e42:	1e4e      	subs	r6, r1, #1
 8000e44:	b2e8      	uxtb	r0, r5
 8000e46:	42b0      	cmp	r0, r6
 8000e48:	f105 0501 	add.w	r5, r5, #1
 8000e4c:	da06      	bge.n	8000e5c <HAL_PCDEx_SetTxFiFo+0x32>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8000e4e:	3040      	adds	r0, #64	; 0x40
 8000e50:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000e54:	6840      	ldr	r0, [r0, #4]
 8000e56:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8000e5a:	e7f3      	b.n	8000e44 <HAL_PCDEx_SetTxFiFo+0x1a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 8000e5c:	313f      	adds	r1, #63	; 0x3f
 8000e5e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8000e62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e66:	6063      	str	r3, [r4, #4]
  }
  
  return HAL_OK;
}
 8000e68:	2000      	movs	r0, #0
 8000e6a:	bd70      	pop	{r4, r5, r6, pc}

08000e6c <HAL_PCDEx_SetRxFiFo>:
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8000e6c:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 8000e6e:	2000      	movs	r0, #0
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8000e70:	6259      	str	r1, [r3, #36]	; 0x24
  
  return HAL_OK;
}
 8000e72:	4770      	bx	lr

08000e74 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8000e74:	6802      	ldr	r2, [r0, #0]
  * @brief  Activate LPM feature
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8000e76:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
  
  hpcd->lpm_active = ENABLE;
 8000e78:	2101      	movs	r1, #1
 8000e7a:	f8c0 13f4 	str.w	r1, [r0, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f883 03ec 	strb.w	r0, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000e84:	6993      	ldr	r3, [r2, #24]
 8000e86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e8a:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000e8c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8000e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e92:	f043 0303 	orr.w	r3, r3, #3
 8000e96:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
}
 8000e98:	4770      	bx	lr
	...

08000e9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <HAL_PWREx_EnableOverDrive+0x90>)
 8000ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000eaa:	641a      	str	r2, [r3, #64]	; 0x40
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	9b01      	ldr	r3, [sp, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eba:	fa93 f3a3 	rbit	r3, r3
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000ebe:	fab3 f383 	clz	r3, r3
 8000ec2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ec6:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	2201      	movs	r2, #1
 8000ece:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ed0:	f7ff f9c0 	bl	8000254 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ed4:	4c16      	ldr	r4, [pc, #88]	; (8000f30 <HAL_PWREx_EnableOverDrive+0x94>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ed6:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ed8:	6863      	ldr	r3, [r4, #4]
 8000eda:	03da      	lsls	r2, r3, #15
 8000edc:	d407      	bmi.n	8000eee <HAL_PWREx_EnableOverDrive+0x52>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ede:	f7ff f9b9 	bl	8000254 <HAL_GetTick>
 8000ee2:	1b40      	subs	r0, r0, r5
 8000ee4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000ee8:	d9f6      	bls.n	8000ed8 <HAL_PWREx_EnableOverDrive+0x3c>
    {
      return HAL_TIMEOUT;
 8000eea:	2003      	movs	r0, #3
 8000eec:	e01b      	b.n	8000f26 <HAL_PWREx_EnableOverDrive+0x8a>
 8000eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef2:	fa93 f3a3 	rbit	r3, r3
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000ef6:	fab3 f383 	clz	r3, r3
 8000efa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000efe:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	2201      	movs	r2, #1
 8000f06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f08:	f7ff f9a4 	bl	8000254 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f0c:	4c08      	ldr	r4, [pc, #32]	; (8000f30 <HAL_PWREx_EnableOverDrive+0x94>)
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f0e:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f10:	6863      	ldr	r3, [r4, #4]
 8000f12:	039b      	lsls	r3, r3, #14
 8000f14:	d406      	bmi.n	8000f24 <HAL_PWREx_EnableOverDrive+0x88>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f16:	f7ff f99d 	bl	8000254 <HAL_GetTick>
 8000f1a:	1b40      	subs	r0, r0, r5
 8000f1c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000f20:	d9f6      	bls.n	8000f10 <HAL_PWREx_EnableOverDrive+0x74>
 8000f22:	e7e2      	b.n	8000eea <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000f24:	2000      	movs	r0, #0
}
 8000f26:	b003      	add	sp, #12
 8000f28:	bd30      	pop	{r4, r5, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40007000 	.word	0x40007000

08000f34 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f34:	4b55      	ldr	r3, [pc, #340]	; (800108c <HAL_RCC_ClockConfig+0x158>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	f002 020f 	and.w	r2, r2, #15
 8000f3c:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f42:	4605      	mov	r5, r0
 8000f44:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f46:	d30a      	bcc.n	8000f5e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f48:	6829      	ldr	r1, [r5, #0]
 8000f4a:	0788      	lsls	r0, r1, #30
 8000f4c:	d511      	bpl.n	8000f72 <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f4e:	4850      	ldr	r0, [pc, #320]	; (8001090 <HAL_RCC_ClockConfig+0x15c>)
 8000f50:	6883      	ldr	r3, [r0, #8]
 8000f52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f56:	68ab      	ldr	r3, [r5, #8]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	6083      	str	r3, [r0, #8]
 8000f5c:	e009      	b.n	8000f72 <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f5e:	b2ca      	uxtb	r2, r1
 8000f60:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 030f 	and.w	r3, r3, #15
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d0ed      	beq.n	8000f48 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f72:	07c9      	lsls	r1, r1, #31
 8000f74:	d406      	bmi.n	8000f84 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f76:	4b45      	ldr	r3, [pc, #276]	; (800108c <HAL_RCC_ClockConfig+0x158>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	f002 020f 	and.w	r2, r2, #15
 8000f7e:	4296      	cmp	r6, r2
 8000f80:	d351      	bcc.n	8001026 <HAL_RCC_ClockConfig+0xf2>
 8000f82:	e057      	b.n	8001034 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f84:	686b      	ldr	r3, [r5, #4]
 8000f86:	4a42      	ldr	r2, [pc, #264]	; (8001090 <HAL_RCC_ClockConfig+0x15c>)
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d103      	bne.n	8000f94 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8c:	6812      	ldr	r2, [r2, #0]
 8000f8e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000f94:	1e99      	subs	r1, r3, #2
 8000f96:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f98:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000f9a:	d802      	bhi.n	8000fa2 <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f9c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000fa0:	e001      	b.n	8000fa6 <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa2:	f012 0f02 	tst.w	r2, #2
 8000fa6:	d0e1      	beq.n	8000f6c <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fa8:	4c39      	ldr	r4, [pc, #228]	; (8001090 <HAL_RCC_ClockConfig+0x15c>)
 8000faa:	68a2      	ldr	r2, [r4, #8]
 8000fac:	f022 0203 	bic.w	r2, r2, #3
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000fb4:	f7ff f94e 	bl	8000254 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fb8:	686b      	ldr	r3, [r5, #4]
 8000fba:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000fbc:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fbe:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fc2:	d10c      	bne.n	8000fde <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fc4:	68a3      	ldr	r3, [r4, #8]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	d0d3      	beq.n	8000f76 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fce:	f7ff f941 	bl	8000254 <HAL_GetTick>
 8000fd2:	1bc0      	subs	r0, r0, r7
 8000fd4:	4540      	cmp	r0, r8
 8000fd6:	d9f5      	bls.n	8000fc4 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8000fd8:	2003      	movs	r0, #3
 8000fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d10a      	bne.n	8000ff8 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fe2:	68a3      	ldr	r3, [r4, #8]
 8000fe4:	f003 030c 	and.w	r3, r3, #12
 8000fe8:	2b08      	cmp	r3, #8
 8000fea:	d0c4      	beq.n	8000f76 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fec:	f7ff f932 	bl	8000254 <HAL_GetTick>
 8000ff0:	1bc0      	subs	r0, r0, r7
 8000ff2:	4540      	cmp	r0, r8
 8000ff4:	d9f5      	bls.n	8000fe2 <HAL_RCC_ClockConfig+0xae>
 8000ff6:	e7ef      	b.n	8000fd8 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d10f      	bne.n	800101c <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000ffc:	68a3      	ldr	r3, [r4, #8]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	2b0c      	cmp	r3, #12
 8001004:	d0b7      	beq.n	8000f76 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001006:	f7ff f925 	bl	8000254 <HAL_GetTick>
 800100a:	1bc0      	subs	r0, r0, r7
 800100c:	4540      	cmp	r0, r8
 800100e:	d9f5      	bls.n	8000ffc <HAL_RCC_ClockConfig+0xc8>
 8001010:	e7e2      	b.n	8000fd8 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001012:	f7ff f91f 	bl	8000254 <HAL_GetTick>
 8001016:	1bc0      	subs	r0, r0, r7
 8001018:	4540      	cmp	r0, r8
 800101a:	d8dd      	bhi.n	8000fd8 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800101c:	68a3      	ldr	r3, [r4, #8]
 800101e:	f013 0f0c 	tst.w	r3, #12
 8001022:	d1f6      	bne.n	8001012 <HAL_RCC_ClockConfig+0xde>
 8001024:	e7a7      	b.n	8000f76 <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001026:	b2f2      	uxtb	r2, r6
 8001028:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 030f 	and.w	r3, r3, #15
 8001030:	429e      	cmp	r6, r3
 8001032:	d19b      	bne.n	8000f6c <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001034:	6829      	ldr	r1, [r5, #0]
 8001036:	074a      	lsls	r2, r1, #29
 8001038:	d506      	bpl.n	8001048 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800103a:	4815      	ldr	r0, [pc, #84]	; (8001090 <HAL_RCC_ClockConfig+0x15c>)
 800103c:	6883      	ldr	r3, [r0, #8]
 800103e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001042:	68eb      	ldr	r3, [r5, #12]
 8001044:	4313      	orrs	r3, r2
 8001046:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001048:	070b      	lsls	r3, r1, #28
 800104a:	d507      	bpl.n	800105c <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800104c:	4a10      	ldr	r2, [pc, #64]	; (8001090 <HAL_RCC_ClockConfig+0x15c>)
 800104e:	6929      	ldr	r1, [r5, #16]
 8001050:	6893      	ldr	r3, [r2, #8]
 8001052:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001056:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800105a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800105c:	f000 fb54 	bl	8001708 <HAL_RCC_GetSysClockFreq>
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_RCC_ClockConfig+0x15c>)
 8001062:	22f0      	movs	r2, #240	; 0xf0
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	fa92 f2a2 	rbit	r2, r2
 800106a:	fab2 f282 	clz	r2, r2
 800106e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001072:	40d3      	lsrs	r3, r2
 8001074:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_RCC_ClockConfig+0x160>)
 8001076:	5cd3      	ldrb	r3, [r2, r3]
 8001078:	40d8      	lsrs	r0, r3
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <HAL_RCC_ClockConfig+0x164>)
 800107c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800107e:	2000      	movs	r0, #0
 8001080:	f003 fd74 	bl	8004b6c <HAL_InitTick>
  
  return HAL_OK;
 8001084:	2000      	movs	r0, #0
}
 8001086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800108a:	bf00      	nop
 800108c:	40023c00 	.word	0x40023c00
 8001090:	40023800 	.word	0x40023800
 8001094:	080054b2 	.word	0x080054b2
 8001098:	200000a8 	.word	0x200000a8

0800109c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800109c:	4b01      	ldr	r3, [pc, #4]	; (80010a4 <HAL_RCC_GetHCLKFreq+0x8>)
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	200000a8 	.word	0x200000a8

080010a8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80010aa:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	fa92 f2a2 	rbit	r2, r2
 80010b4:	fab2 f282 	clz	r2, r2
 80010b8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80010bc:	40d3      	lsrs	r3, r2
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80010c0:	5cd3      	ldrb	r3, [r2, r3]
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80010c4:	6810      	ldr	r0, [r2, #0]
}
 80010c6:	40d8      	lsrs	r0, r3
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	080054c2 	.word	0x080054c2
 80010d4:	200000a8 	.word	0x200000a8

080010d8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80010da:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	fa92 f2a2 	rbit	r2, r2
 80010e4:	fab2 f282 	clz	r2, r2
 80010e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80010ec:	40d3      	lsrs	r3, r2
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_RCC_GetPCLK2Freq+0x28>)
 80010f0:	5cd3      	ldrb	r3, [r2, r3]
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80010f4:	6810      	ldr	r0, [r2, #0]
} 
 80010f6:	40d8      	lsrs	r0, r3
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	080054c2 	.word	0x080054c2
 8001104:	200000a8 	.word	0x200000a8

08001108 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001108:	230f      	movs	r3, #15
 800110a:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_RCC_GetClockConfig+0x34>)
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	f002 0203 	and.w	r2, r2, #3
 8001114:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800111c:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001124:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	08db      	lsrs	r3, r3, #3
 800112a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800112e:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <HAL_RCC_GetClockConfig+0x38>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 030f 	and.w	r3, r3, #15
 8001138:	600b      	str	r3, [r1, #0]
 800113a:	4770      	bx	lr
 800113c:	40023800 	.word	0x40023800
 8001140:	40023c00 	.word	0x40023c00

08001144 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
     
  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001144:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001146:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
     
  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800114a:	f013 0601 	ands.w	r6, r3, #1
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800114e:	4604      	mov	r4, r0
    
  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
     
  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001150:	d00b      	beq.n	800116a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001152:	497d      	ldr	r1, [pc, #500]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8001154:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8001156:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800115a:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800115e:	4332      	orrs	r2, r6
  uint32_t plli2sp = 0U;
  uint32_t plli2sq = 0U;
  uint32_t plli2sr = 0U;
  uint32_t pllsaip = 0U;
  uint32_t pllsaiq = 0U;
  uint32_t plli2sused = 0U;
 8001160:	fab6 f686 	clz	r6, r6
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001164:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  uint32_t plli2sp = 0U;
  uint32_t plli2sq = 0U;
  uint32_t plli2sr = 0U;
  uint32_t pllsaip = 0U;
  uint32_t pllsaiq = 0U;
  uint32_t plli2sused = 0U;
 8001168:	0976      	lsrs	r6, r6, #5
    }
  }
  /*--------------------------------------------------------------------------*/
    
  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800116a:	079d      	lsls	r5, r3, #30
 800116c:	d50b      	bpl.n	8001186 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800116e:	4876      	ldr	r0, [pc, #472]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8001170:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001172:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001176:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
 800117a:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U; 
 800117c:	2900      	cmp	r1, #0
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800117e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U; 
 8001182:	bf08      	it	eq
 8001184:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/
    
  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001186:	f013 0504 	ands.w	r5, r3, #4
 800118a:	d012      	beq.n	80011b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800118c:	496e      	ldr	r1, [pc, #440]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800118e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001190:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001194:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001198:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800119c:	ea42 0205 	orr.w	r2, r2, r5
  uint32_t plli2sq = 0U;
  uint32_t plli2sr = 0U;
  uint32_t pllsaip = 0U;
  uint32_t pllsaiq = 0U;
  uint32_t plli2sused = 0U;
  uint32_t pllsaiused = 0U;
 80011a0:	bf18      	it	ne
 80011a2:	fab5 f585 	clzne	r5, r5
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80011a6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  uint32_t plli2sq = 0U;
  uint32_t plli2sr = 0U;
  uint32_t pllsaip = 0U;
  uint32_t pllsaiq = 0U;
  uint32_t plli2sused = 0U;
  uint32_t pllsaiused = 0U;
 80011aa:	bf12      	itee	ne
 80011ac:	096d      	lsrne	r5, r5, #5
 80011ae:	2500      	moveq	r5, #0
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U; 
 80011b0:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/
    
  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80011b2:	0718      	lsls	r0, r3, #28
 80011b4:	d510      	bpl.n	80011d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80011b6:	4864      	ldr	r0, [pc, #400]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80011b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011ba:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80011be:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80011c2:	430a      	orrs	r2, r1
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80011c4:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80011c8:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80011cc:	d003      	beq.n	80011d6 <HAL_RCCEx_PeriphCLKConfig+0x92>
      plli2sused = 1U; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1U; 
 80011ce:	2900      	cmp	r1, #0
 80011d0:	bf08      	it	eq
 80011d2:	2501      	moveq	r5, #1
 80011d4:	e000      	b.n	80011d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U; 
 80011d6:	2601      	movs	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/
    
  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80011d8:	0699      	lsls	r1, r3, #26
 80011da:	d55c      	bpl.n	8001296 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	4b59      	ldr	r3, [pc, #356]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x204>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80011e2:	4f5a      	ldr	r7, [pc, #360]	; (800134c <HAL_RCCEx_PeriphCLKConfig+0x208>)
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80011e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011ea:	641a      	str	r2, [r3, #64]	; 0x40
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fc:	603b      	str	r3, [r7, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80011fe:	f7ff f829 	bl	8000254 <HAL_GetTick>
 8001202:	4680      	mov	r8, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	05da      	lsls	r2, r3, #23
 8001208:	d407      	bmi.n	800121a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800120a:	f7ff f823 	bl	8000254 <HAL_GetTick>
 800120e:	ebc8 0000 	rsb	r0, r8, r0
 8001212:	2802      	cmp	r0, #2
 8001214:	d9f6      	bls.n	8001204 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8001216:	2003      	movs	r0, #3
 8001218:	e26e      	b.n	80016f8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800121a:	4f4b      	ldr	r7, [pc, #300]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800121c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800121e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001222:	d10f      	bne.n	8001244 <HAL_RCCEx_PeriphCLKConfig+0x100>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001224:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001226:	f402 7340 	and.w	r3, r2, #768	; 0x300
 800122a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800122e:	4b46      	ldr	r3, [pc, #280]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8001230:	d128      	bne.n	8001284 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8001232:	6899      	ldr	r1, [r3, #8]
 8001234:	f421 10f8 	bic.w	r0, r1, #2031616	; 0x1f0000
 8001238:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 800123c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001240:	4301      	orrs	r1, r0
 8001242:	e022      	b.n	800128a <HAL_RCCEx_PeriphCLKConfig+0x146>
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001244:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001246:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800124a:	4293      	cmp	r3, r2
 800124c:	d0ea      	beq.n	8001224 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800124e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001250:	4a3f      	ldr	r2, [pc, #252]	; (8001350 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8001252:	2101      	movs	r1, #1
 8001254:	6011      	str	r1, [r2, #0]
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 800125a:	2100      	movs	r1, #0
 800125c:	6011      	str	r1, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800125e:	673b      	str	r3, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001260:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001262:	07db      	lsls	r3, r3, #31
 8001264:	d5de      	bpl.n	8001224 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001266:	f7fe fff5 	bl	8000254 <HAL_GetTick>
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800126a:	f241 3988 	movw	r9, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800126e:	4680      	mov	r8, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001270:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001272:	0798      	lsls	r0, r3, #30
 8001274:	d4d6      	bmi.n	8001224 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001276:	f7fe ffed 	bl	8000254 <HAL_GetTick>
 800127a:	ebc8 0000 	rsb	r0, r8, r0
 800127e:	4548      	cmp	r0, r9
 8001280:	d9f6      	bls.n	8001270 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8001282:	e7c8      	b.n	8001216 <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001284:	6899      	ldr	r1, [r3, #8]
 8001286:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800128a:	6099      	str	r1, [r3, #8]
 800128c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800128e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001292:	430a      	orrs	r2, r1
 8001294:	671a      	str	r2, [r3, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/
    
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001296:	6823      	ldr	r3, [r4, #0]
 8001298:	06d9      	lsls	r1, r3, #27
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800129a:	bf42      	ittt	mi
 800129c:	4b2d      	ldrmi	r3, [pc, #180]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800129e:	f894 2058 	ldrbmi.w	r2, [r4, #88]	; 0x58
 80012a2:	601a      	strmi	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/
    
  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	061a      	lsls	r2, r3, #24
 80012a8:	d508      	bpl.n	80012bc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));
    
    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80012aa:	4827      	ldr	r0, [pc, #156]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80012ac:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 80012b0:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
 80012b4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80012b6:	430a      	orrs	r2, r1
 80012b8:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
    
  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80012bc:	065f      	lsls	r7, r3, #25
 80012be:	d508      	bpl.n	80012d2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80012c0:	4821      	ldr	r0, [pc, #132]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80012c2:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 80012c6:	f022 6180 	bic.w	r1, r2, #67108864	; 0x4000000
 80012ca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80012cc:	430a      	orrs	r2, r1
 80012ce:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
    
  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80012d2:	05d8      	lsls	r0, r3, #23
 80012d4:	d50c      	bpl.n	80012f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80012d6:	481c      	ldr	r0, [pc, #112]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80012d8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80012da:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 80012de:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 80012e2:	430a      	orrs	r2, r1

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
    {
      pllsaiused = 1U; 
 80012e4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80012e8:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
    {
      pllsaiused = 1U; 
 80012ec:	bf08      	it	eq
 80012ee:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/
    
  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80012f0:	0599      	lsls	r1, r3, #22
 80012f2:	d508      	bpl.n	8001306 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));
    
    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80012f4:	4814      	ldr	r0, [pc, #80]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80012f6:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 80012fa:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80012fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001300:	430a      	orrs	r2, r1
 8001302:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
    
  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001306:	055a      	lsls	r2, r3, #21
 8001308:	d402      	bmi.n	8001310 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  /*--------------------------------------------------------------------------*/
    
  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800130a:	2e01      	cmp	r6, #1
 800130c:	d114      	bne.n	8001338 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 800130e:	e00b      	b.n	8001328 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));
    
    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001310:	480d      	ldr	r0, [pc, #52]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8001312:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001314:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8001318:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800131c:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800131e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));
    
    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001322:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001326:	d1f0      	bne.n	800130a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();    
 8001328:	4e0b      	ldr	r6, [pc, #44]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x214>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800132a:	4f07      	ldr	r7, [pc, #28]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x204>)
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();    
 800132c:	2300      	movs	r3, #0
 800132e:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001330:	f7fe ff90 	bl	8000254 <HAL_GetTick>
 8001334:	4680      	mov	r8, r0
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001336:	e018      	b.n	800136a <HAL_RCCEx_PeriphCLKConfig+0x226>
  /*--------------------------------------------------------------------------*/
    
  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800133c:	d0f4      	beq.n	8001328 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  } 
  /*--------------------------------------------------------------------------*/
    
  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800133e:	2d01      	cmp	r5, #1
 8001340:	f040 815b 	bne.w	80015fa <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8001344:	e13f      	b.n	80015c6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40007000 	.word	0x40007000
 8001350:	42470e40 	.word	0x42470e40
 8001354:	424711e0 	.word	0x424711e0
 8001358:	42470068 	.word	0x42470068
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800135c:	f7fe ff7a 	bl	8000254 <HAL_GetTick>
 8001360:	ebc8 0000 	rsb	r0, r8, r0
 8001364:	2802      	cmp	r0, #2
 8001366:	f63f af56 	bhi.w	8001216 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();    
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	011b      	lsls	r3, r3, #4
 800136e:	d4f5      	bmi.n	800135c <HAL_RCCEx_PeriphCLKConfig+0x218>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001370:	6820      	ldr	r0, [r4, #0]
 8001372:	07c7      	lsls	r7, r0, #31
 8001374:	d501      	bpl.n	800137a <HAL_RCCEx_PeriphCLKConfig+0x236>
 8001376:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001378:	b123      	cbz	r3, 8001384 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800137a:	0781      	lsls	r1, r0, #30
 800137c:	d545      	bpl.n	800140a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800137e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001380:	2b00      	cmp	r3, #0
 8001382:	d142      	bne.n	800140a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP)) + 1U) << 1U);
 8001384:	f8df e378 	ldr.w	lr, [pc, #888]	; 8001700 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8001388:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800138c:	f8de 1084 	ldr.w	r1, [lr, #132]	; 0x84
 8001390:	fa93 f2a3 	rbit	r2, r3
 8001394:	f04f 6970 	mov.w	r9, #251658240	; 0xf000000
 8001398:	fab2 f882 	clz	r8, r2
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 800139c:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 80013a0:	fa99 faa9 	rbit	sl, r9
 80013a4:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 80013a8:	faba fa8a 	clz	sl, sl
 80013ac:	fa97 f7a7 	rbit	r7, r7
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80013b0:	fab7 f787 	clz	r7, r7
 80013b4:	fa93 f3a3 	rbit	r3, r3
 80013b8:	fab3 fc83 	clz	ip, r3
 80013bc:	fa99 f9a9 	rbit	r9, r9
 80013c0:	f04f 4be0 	mov.w	fp, #1879048192	; 0x70000000
 80013c4:	fab9 f989 	clz	r9, r9
 80013c8:	fa9b fbab 	rbit	fp, fp
 80013cc:	68a3      	ldr	r3, [r4, #8]
 80013ce:	fa03 f707 	lsl.w	r7, r3, r7
 80013d2:	6963      	ldr	r3, [r4, #20]
 80013d4:	fabb fb8b 	clz	fp, fp
 80013d8:	fa03 f30b 	lsl.w	r3, r3, fp
 80013dc:	431f      	orrs	r7, r3
 80013de:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80013e2:	6863      	ldr	r3, [r4, #4]
 80013e4:	fa22 f20a 	lsr.w	r2, r2, sl
 80013e8:	433b      	orrs	r3, r7
 80013ea:	fa02 f709 	lsl.w	r7, r2, r9
 80013ee:	f401 3240 	and.w	r2, r1, #196608	; 0x30000
 80013f2:	fa22 f208 	lsr.w	r2, r2, r8
 80013f6:	3201      	adds	r2, #1
 80013f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013fc:	3a01      	subs	r2, #1
 80013fe:	431f      	orrs	r7, r3
 8001400:	fa02 f30c 	lsl.w	r3, r2, ip
 8001404:	433b      	orrs	r3, r7
 8001406:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }
  
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800140a:	0742      	lsls	r2, r0, #29
 800140c:	d503      	bpl.n	8001416 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800140e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001414:	d005      	beq.n	8001422 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8001416:	0703      	lsls	r3, r0, #28
 8001418:	d54f      	bpl.n	80014ba <HAL_RCCEx_PeriphCLKConfig+0x376>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 800141a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800141c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001420:	d14b      	bne.n	80014ba <HAL_RCCEx_PeriphCLKConfig+0x376>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP)) + 1U) << 1U);
 8001422:	f8df e2dc 	ldr.w	lr, [pc, #732]	; 8001700 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8001426:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800142a:	f8de 1084 	ldr.w	r1, [lr, #132]	; 0x84
 800142e:	fa93 f2a3 	rbit	r2, r3
 8001432:	f04f 49e0 	mov.w	r9, #1879048192	; 0x70000000
 8001436:	fab2 f882 	clz	r8, r2
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 800143a:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 800143e:	fa99 faa9 	rbit	sl, r9
 8001442:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8001446:	faba fa8a 	clz	sl, sl
 800144a:	fa97 f7a7 	rbit	r7, r7
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800144e:	fab7 f787 	clz	r7, r7
 8001452:	fa93 f3a3 	rbit	r3, r3
 8001456:	f04f 6b70 	mov.w	fp, #251658240	; 0xf000000
 800145a:	fab3 fc83 	clz	ip, r3
 800145e:	fa9b fbab 	rbit	fp, fp
 8001462:	fabb fb8b 	clz	fp, fp
 8001466:	fa99 f9a9 	rbit	r9, r9
 800146a:	68a3      	ldr	r3, [r4, #8]
 800146c:	fa03 f707 	lsl.w	r7, r3, r7
 8001470:	6923      	ldr	r3, [r4, #16]
 8001472:	fa03 f30b 	lsl.w	r3, r3, fp
 8001476:	431f      	orrs	r7, r3
 8001478:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800147c:	6863      	ldr	r3, [r4, #4]
 800147e:	fa22 f20a 	lsr.w	r2, r2, sl
 8001482:	fab9 f989 	clz	r9, r9
 8001486:	433b      	orrs	r3, r7
 8001488:	fa02 f709 	lsl.w	r7, r2, r9
 800148c:	f401 3240 	and.w	r2, r1, #196608	; 0x30000
 8001490:	fa22 f208 	lsr.w	r2, r2, r8
 8001494:	3201      	adds	r2, #1
 8001496:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800149a:	3a01      	subs	r2, #1
 800149c:	431f      	orrs	r7, r3
 800149e:	fa02 f30c 	lsl.w	r3, r2, ip
 80014a2:	433b      	orrs	r3, r7
 80014a4:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 80014a8:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 80014ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014ae:	f023 031f 	bic.w	r3, r3, #31
 80014b2:	3a01      	subs	r2, #1
 80014b4:	4313      	orrs	r3, r2
 80014b6:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
    }          

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/  
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80014ba:	0547      	lsls	r7, r0, #21
 80014bc:	d545      	bpl.n	800154a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80014be:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80014c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014c4:	d141      	bne.n	800154a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP)) + 1U) << 1U);
 80014c6:	f8df e238 	ldr.w	lr, [pc, #568]	; 8001700 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80014ca:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80014ce:	f8de 1084 	ldr.w	r1, [lr, #132]	; 0x84
 80014d2:	fa93 f2a3 	rbit	r2, r3
 80014d6:	f04f 49e0 	mov.w	r9, #1879048192	; 0x70000000
 80014da:	fab2 f882 	clz	r8, r2
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80014de:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 80014e2:	fa99 faa9 	rbit	sl, r9
 80014e6:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 80014ea:	faba fa8a 	clz	sl, sl
 80014ee:	fa9b fbab 	rbit	fp, fp
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80014f2:	fabb fb8b 	clz	fp, fp
 80014f6:	fa93 f3a3 	rbit	r3, r3
 80014fa:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 80014fe:	fab3 f383 	clz	r3, r3
 8001502:	fa9c fcac 	rbit	ip, ip
 8001506:	fabc fc8c 	clz	ip, ip
 800150a:	fa99 f9a9 	rbit	r9, r9
 800150e:	68e7      	ldr	r7, [r4, #12]
 8001510:	087f      	lsrs	r7, r7, #1
 8001512:	3f01      	subs	r7, #1
 8001514:	409f      	lsls	r7, r3
 8001516:	68a3      	ldr	r3, [r4, #8]
 8001518:	fa03 f30b 	lsl.w	r3, r3, fp
 800151c:	431f      	orrs	r7, r3
 800151e:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001522:	6863      	ldr	r3, [r4, #4]
 8001524:	fa22 f20a 	lsr.w	r2, r2, sl
 8001528:	fab9 f989 	clz	r9, r9
 800152c:	433b      	orrs	r3, r7
 800152e:	fa02 f709 	lsl.w	r7, r2, r9
 8001532:	f401 3240 	and.w	r2, r1, #196608	; 0x30000
 8001536:	fa22 f208 	lsr.w	r2, r2, r8
 800153a:	3201      	adds	r2, #1
 800153c:	0052      	lsls	r2, r2, #1
 800153e:	431f      	orrs	r7, r3
 8001540:	fa02 f30c 	lsl.w	r3, r2, ip
 8001544:	433b      	orrs	r3, r7
 8001546:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    } 
    
     /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800154a:	0501      	lsls	r1, r0, #20
 800154c:	d52b      	bpl.n	80015a6 <HAL_RCCEx_PeriphCLKConfig+0x462>
 800154e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001552:	fa92 f2a2 	rbit	r2, r2
 8001556:	f44f 3340 	mov.w	r3, #196608	; 0x30000
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800155a:	fab2 fe82 	clz	lr, r2
 800155e:	fa93 f3a3 	rbit	r3, r3
 8001562:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001566:	fab3 fc83 	clz	ip, r3
 800156a:	fa91 f1a1 	rbit	r1, r1
 800156e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001572:	fab1 f781 	clz	r7, r1
 8001576:	fa92 f2a2 	rbit	r2, r2
 800157a:	68e3      	ldr	r3, [r4, #12]
 800157c:	6861      	ldr	r1, [r4, #4]
 800157e:	fab2 f082 	clz	r0, r2
 8001582:	085b      	lsrs	r3, r3, #1
 8001584:	68a2      	ldr	r2, [r4, #8]
 8001586:	3b01      	subs	r3, #1
 8001588:	fa02 f20e 	lsl.w	r2, r2, lr
 800158c:	fa03 f30c 	lsl.w	r3, r3, ip
 8001590:	4313      	orrs	r3, r2
 8001592:	430b      	orrs	r3, r1
 8001594:	6921      	ldr	r1, [r4, #16]
 8001596:	6962      	ldr	r2, [r4, #20]
 8001598:	40b9      	lsls	r1, r7
 800159a:	4319      	orrs	r1, r3
 800159c:	4082      	lsls	r2, r0
 800159e:	4b58      	ldr	r3, [pc, #352]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 80015a0:	430a      	orrs	r2, r1
 80015a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }    
   
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80015a6:	2301      	movs	r3, #1
 80015a8:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80015aa:	f7fe fe53 	bl	8000254 <HAL_GetTick>
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80015ae:	4e54      	ldr	r6, [pc, #336]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
    }    
   
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
    /* Get tick */
    tickstart = HAL_GetTick();
 80015b0:	4607      	mov	r7, r0
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80015b2:	6833      	ldr	r3, [r6, #0]
 80015b4:	011a      	lsls	r2, r3, #4
 80015b6:	f53f aec2 	bmi.w	800133e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80015ba:	f7fe fe4b 	bl	8000254 <HAL_GetTick>
 80015be:	1bc0      	subs	r0, r0, r7
 80015c0:	2802      	cmp	r0, #2
 80015c2:	d9f6      	bls.n	80015b2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
 80015c4:	e627      	b.n	8001216 <HAL_RCCEx_PeriphCLKConfig+0xd2>
  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 80015c6:	4d4f      	ldr	r5, [pc, #316]	; (8001704 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80015c8:	4e4d      	ldr	r6, [pc, #308]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 80015ca:	2300      	movs	r3, #0
 80015cc:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80015ce:	f7fe fe41 	bl	8000254 <HAL_GetTick>
 80015d2:	4607      	mov	r7, r0
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80015d4:	6833      	ldr	r3, [r6, #0]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	d411      	bmi.n	80015fe <HAL_RCCEx_PeriphCLKConfig+0x4ba>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80015da:	6820      	ldr	r0, [r4, #0]
 80015dc:	0746      	lsls	r6, r0, #29
 80015de:	d414      	bmi.n	800160a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80015e0:	0701      	lsls	r1, r0, #28
 80015e2:	d415      	bmi.n	8001610 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
    }           

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/   
    /* In Case of PLLI2S is selected as source clock for CLK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80015e4:	05c2      	lsls	r2, r0, #23
 80015e6:	d44f      	bmi.n	8001688 <HAL_RCCEx_PeriphCLKConfig+0x544>
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
    }        

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80015e8:	2301      	movs	r3, #1
 80015ea:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80015ec:	f7fe fe32 	bl	8000254 <HAL_GetTick>
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80015f0:	4c43      	ldr	r4, [pc, #268]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
    }        

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
    /* Get tick */
    tickstart = HAL_GetTick();
 80015f2:	4605      	mov	r5, r0
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80015f4:	6823      	ldr	r3, [r4, #0]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	d577      	bpl.n	80016ea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }  
  }
  return HAL_OK;
 80015fa:	2000      	movs	r0, #0
 80015fc:	e07c      	b.n	80016f8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80015fe:	f7fe fe29 	bl	8000254 <HAL_GetTick>
 8001602:	1bc0      	subs	r0, r0, r7
 8001604:	2802      	cmp	r0, #2
 8001606:	d9e5      	bls.n	80015d4 <HAL_RCCEx_PeriphCLKConfig+0x490>
 8001608:	e605      	b.n	8001216 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800160a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800160c:	b11b      	cbz	r3, 8001616 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800160e:	e7e7      	b.n	80015e0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001610:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1e6      	bne.n	80015e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP)) + 1U) << 1U);
 8001616:	493a      	ldr	r1, [pc, #232]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 8001618:	f44f 3740 	mov.w	r7, #196608	; 0x30000
 800161c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001620:	fa97 f3a7 	rbit	r3, r7
 8001624:	f647 7cc0 	movw	ip, #32704	; 0x7fc0
 8001628:	fab3 f383 	clz	r3, r3
 800162c:	fa9c fcac 	rbit	ip, ip
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001630:	fabc fc8c 	clz	ip, ip
 8001634:	fa97 f7a7 	rbit	r7, r7
 8001638:	f04f 6670 	mov.w	r6, #251658240	; 0xf000000
 800163c:	fab7 f787 	clz	r7, r7
 8001640:	fa96 f6a6 	rbit	r6, r6
 8001644:	fab6 fe86 	clz	lr, r6
 8001648:	69e6      	ldr	r6, [r4, #28]
 800164a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800164e:	fa22 f303 	lsr.w	r3, r2, r3
 8001652:	fa06 f20c 	lsl.w	r2, r6, ip
 8001656:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8001658:	3301      	adds	r3, #1
 800165a:	fa06 f60e 	lsl.w	r6, r6, lr
 800165e:	4316      	orrs	r6, r2
 8001660:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001664:	69a2      	ldr	r2, [r4, #24]
 8001666:	3b01      	subs	r3, #1
 8001668:	4332      	orrs	r2, r6
 800166a:	40bb      	lsls	r3, r7
 800166c:	4313      	orrs	r3, r2
 800166e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001672:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001676:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001678:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800167c:	3a01      	subs	r2, #1
 800167e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001682:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8001686:	e7ad      	b.n	80015e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    }           

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/   
    /* In Case of PLLI2S is selected as source clock for CLK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001688:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800168a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800168e:	d1ab      	bne.n	80015e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8001690:	4f1b      	ldr	r7, [pc, #108]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 8001692:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8001696:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800169a:	fa90 fea0 	rbit	lr, r0
 800169e:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 80016a2:	fabe fe8e 	clz	lr, lr
 80016a6:	fa96 f6a6 	rbit	r6, r6
 80016aa:	f44f 3140 	mov.w	r1, #196608	; 0x30000
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80016ae:	fab6 fc86 	clz	ip, r6
 80016b2:	fa91 f1a1 	rbit	r1, r1
 80016b6:	fab1 f681 	clz	r6, r1
 80016ba:	fa90 f0a0 	rbit	r0, r0
 80016be:	6a21      	ldr	r1, [r4, #32]
 80016c0:	69a3      	ldr	r3, [r4, #24]
 80016c2:	0849      	lsrs	r1, r1, #1
 80016c4:	3901      	subs	r1, #1
 80016c6:	40b1      	lsls	r1, r6
 80016c8:	69e6      	ldr	r6, [r4, #28]
 80016ca:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80016ce:	fa06 f60c 	lsl.w	r6, r6, ip
 80016d2:	fab0 f080 	clz	r0, r0
 80016d6:	4331      	orrs	r1, r6
 80016d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80016dc:	4319      	orrs	r1, r3
 80016de:	fa02 f300 	lsl.w	r3, r2, r0
 80016e2:	430b      	orrs	r3, r1
 80016e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016e8:	e77e      	b.n	80015e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80016ea:	f7fe fdb3 	bl	8000254 <HAL_GetTick>
 80016ee:	1b40      	subs	r0, r0, r5
 80016f0:	2802      	cmp	r0, #2
 80016f2:	f67f af7f 	bls.w	80015f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80016f6:	e58e      	b.n	8001216 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        return HAL_TIMEOUT;
      }
    }  
  }
  return HAL_OK;
}
 80016f8:	b003      	add	sp, #12
 80016fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	42470070 	.word	0x42470070

08001708 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001708:	4930      	ldr	r1, [pc, #192]	; (80017cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800170a:	6888      	ldr	r0, [r1, #8]
 800170c:	f000 000c 	and.w	r0, r0, #12
 8001710:	2808      	cmp	r0, #8
 8001712:	d008      	beq.n	8001726 <HAL_RCC_GetSysClockFreq+0x1e>
 8001714:	280c      	cmp	r0, #12
 8001716:	d02f      	beq.n	8001778 <HAL_RCC_GetSysClockFreq+0x70>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001718:	4a2d      	ldr	r2, [pc, #180]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800171a:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800171c:	2804      	cmp	r0, #4
 800171e:	bf0c      	ite	eq
 8001720:	4618      	moveq	r0, r3
 8001722:	4610      	movne	r0, r2
 8001724:	4770      	bx	lr
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001726:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001728:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800172a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800172e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001732:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001736:	684b      	ldr	r3, [r1, #4]
 8001738:	fa92 f2a2 	rbit	r2, r2
 800173c:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001740:	fab2 f282 	clz	r2, r2
 8001744:	ea01 0103 	and.w	r1, r1, r3
 8001748:	fa21 f102 	lsr.w	r1, r1, r2
 800174c:	bf14      	ite	ne
 800174e:	4a21      	ldrne	r2, [pc, #132]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001750:	4a1f      	ldreq	r2, [pc, #124]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001752:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001756:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001758:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800175c:	6852      	ldr	r2, [r2, #4]
 800175e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001762:	fa90 f0a0 	rbit	r0, r0
 8001766:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 800176a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800176e:	fa22 f000 	lsr.w	r0, r2, r0
 8001772:	3001      	adds	r0, #1
 8001774:	0040      	lsls	r0, r0, #1
 8001776:	e025      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0xbc>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001778:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800177a:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800177c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001780:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001784:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001788:	684b      	ldr	r3, [r1, #4]
 800178a:	fa92 f2a2 	rbit	r2, r2
 800178e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001792:	fab2 f282 	clz	r2, r2
 8001796:	ea01 0103 	and.w	r1, r1, r3
 800179a:	fa21 f102 	lsr.w	r1, r1, r2
 800179e:	bf14      	ite	ne
 80017a0:	4a0c      	ldrne	r2, [pc, #48]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80017a2:	4a0b      	ldreq	r2, [pc, #44]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80017a4:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 80017a8:	4a08      	ldr	r2, [pc, #32]	; (80017cc <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80017aa:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 80017ae:	6852      	ldr	r2, [r2, #4]
 80017b0:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 80017b4:	fa90 f0a0 	rbit	r0, r0
 80017b8:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllr;
 80017bc:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80017c0:	fa22 f000 	lsr.w	r0, r2, r0
 80017c4:	fbb3 f0f0 	udiv	r0, r3, r0
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	00f42400 	.word	0x00f42400
 80017d4:	007a1200 	.word	0x007a1200

080017d8 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d8:	6803      	ldr	r3, [r0, #0]
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017de:	07de      	lsls	r6, r3, #31
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e0:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e2:	d403      	bmi.n	80017ec <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	079d      	lsls	r5, r3, #30
 80017e8:	d458      	bmi.n	800189c <HAL_RCC_OscConfig+0xc4>
 80017ea:	e0b1      	b.n	8001950 <HAL_RCC_OscConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017ec:	4b97      	ldr	r3, [pc, #604]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	f002 020c 	and.w	r2, r2, #12
 80017f4:	2a04      	cmp	r2, #4
 80017f6:	d010      	beq.n	800181a <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017f8:	689a      	ldr	r2, [r3, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017fa:	f002 020c 	and.w	r2, r2, #12
 80017fe:	2a08      	cmp	r2, #8
 8001800:	d102      	bne.n	8001808 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	0258      	lsls	r0, r3, #9
 8001806:	d408      	bmi.n	800181a <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001808:	4b90      	ldr	r3, [pc, #576]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800180a:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800180c:	f002 020c 	and.w	r2, r2, #12
 8001810:	2a0c      	cmp	r2, #12
 8001812:	d10b      	bne.n	800182c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	0251      	lsls	r1, r2, #9
 8001818:	d508      	bpl.n	800182c <HAL_RCC_OscConfig+0x54>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181a:	4b8c      	ldr	r3, [pc, #560]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	039a      	lsls	r2, r3, #14
 8001820:	d5e0      	bpl.n	80017e4 <HAL_RCC_OscConfig+0xc>
 8001822:	6863      	ldr	r3, [r4, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1dd      	bne.n	80017e4 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8001828:	2001      	movs	r0, #1
 800182a:	e17a      	b.n	8001b22 <HAL_RCC_OscConfig+0x34a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182c:	6862      	ldr	r2, [r4, #4]
 800182e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001832:	d104      	bne.n	800183e <HAL_RCC_OscConfig+0x66>
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	e014      	b.n	8001868 <HAL_RCC_OscConfig+0x90>
 800183e:	4d83      	ldr	r5, [pc, #524]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001840:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001844:	682b      	ldr	r3, [r5, #0]
 8001846:	d107      	bne.n	8001858 <HAL_RCC_OscConfig+0x80>
 8001848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800184c:	602b      	str	r3, [r5, #0]
 800184e:	682b      	ldr	r3, [r5, #0]
 8001850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001854:	602b      	str	r3, [r5, #0]
 8001856:	e007      	b.n	8001868 <HAL_RCC_OscConfig+0x90>
 8001858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185c:	602b      	str	r3, [r5, #0]
 800185e:	682b      	ldr	r3, [r5, #0]
 8001860:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001864:	602b      	str	r3, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001866:	b16a      	cbz	r2, 8001884 <HAL_RCC_OscConfig+0xac>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7fe fcf4 	bl	8000254 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186c:	4d77      	ldr	r5, [pc, #476]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186e:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001870:	682b      	ldr	r3, [r5, #0]
 8001872:	039b      	lsls	r3, r3, #14
 8001874:	d4b6      	bmi.n	80017e4 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001876:	f7fe fced 	bl	8000254 <HAL_GetTick>
 800187a:	1b80      	subs	r0, r0, r6
 800187c:	2864      	cmp	r0, #100	; 0x64
 800187e:	d9f7      	bls.n	8001870 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001880:	2003      	movs	r0, #3
 8001882:	e14e      	b.n	8001b22 <HAL_RCC_OscConfig+0x34a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7fe fce6 	bl	8000254 <HAL_GetTick>
 8001888:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188a:	682b      	ldr	r3, [r5, #0]
 800188c:	039f      	lsls	r7, r3, #14
 800188e:	d5a9      	bpl.n	80017e4 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001890:	f7fe fce0 	bl	8000254 <HAL_GetTick>
 8001894:	1b80      	subs	r0, r0, r6
 8001896:	2864      	cmp	r0, #100	; 0x64
 8001898:	d9f7      	bls.n	800188a <HAL_RCC_OscConfig+0xb2>
 800189a:	e7f1      	b.n	8001880 <HAL_RCC_OscConfig+0xa8>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800189c:	4b6b      	ldr	r3, [pc, #428]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	f012 0f0c 	tst.w	r2, #12
 80018a4:	d010      	beq.n	80018c8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018a6:	689a      	ldr	r2, [r3, #8]
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018a8:	f002 020c 	and.w	r2, r2, #12
 80018ac:	2a08      	cmp	r2, #8
 80018ae:	d102      	bne.n	80018b6 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	0258      	lsls	r0, r3, #9
 80018b4:	d508      	bpl.n	80018c8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018b6:	4a65      	ldr	r2, [pc, #404]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 80018b8:	6893      	ldr	r3, [r2, #8]
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b0c      	cmp	r3, #12
 80018c0:	d117      	bne.n	80018f2 <HAL_RCC_OscConfig+0x11a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018c2:	6853      	ldr	r3, [r2, #4]
 80018c4:	0259      	lsls	r1, r3, #9
 80018c6:	d414      	bmi.n	80018f2 <HAL_RCC_OscConfig+0x11a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c8:	4b60      	ldr	r3, [pc, #384]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	0792      	lsls	r2, r2, #30
 80018ce:	d502      	bpl.n	80018d6 <HAL_RCC_OscConfig+0xfe>
 80018d0:	68e2      	ldr	r2, [r4, #12]
 80018d2:	2a01      	cmp	r2, #1
 80018d4:	d1a8      	bne.n	8001828 <HAL_RCC_OscConfig+0x50>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	21f8      	movs	r1, #248	; 0xf8
 80018da:	fa91 f1a1 	rbit	r1, r1
 80018de:	6920      	ldr	r0, [r4, #16]
 80018e0:	fab1 f181 	clz	r1, r1
 80018e4:	fa00 f101 	lsl.w	r1, r0, r1
 80018e8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f0:	e02e      	b.n	8001950 <HAL_RCC_OscConfig+0x178>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018f2:	68e2      	ldr	r2, [r4, #12]
 80018f4:	4b56      	ldr	r3, [pc, #344]	; (8001a50 <HAL_RCC_OscConfig+0x278>)
 80018f6:	b1ea      	cbz	r2, 8001934 <HAL_RCC_OscConfig+0x15c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7fe fcaa 	bl	8000254 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001900:	4d52      	ldr	r5, [pc, #328]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001902:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001904:	682b      	ldr	r3, [r5, #0]
 8001906:	4851      	ldr	r0, [pc, #324]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001908:	079b      	lsls	r3, r3, #30
 800190a:	d405      	bmi.n	8001918 <HAL_RCC_OscConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800190c:	f7fe fca2 	bl	8000254 <HAL_GetTick>
 8001910:	1b80      	subs	r0, r0, r6
 8001912:	2802      	cmp	r0, #2
 8001914:	d9f6      	bls.n	8001904 <HAL_RCC_OscConfig+0x12c>
 8001916:	e7b3      	b.n	8001880 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001918:	6803      	ldr	r3, [r0, #0]
 800191a:	22f8      	movs	r2, #248	; 0xf8
 800191c:	fa92 f2a2 	rbit	r2, r2
 8001920:	6921      	ldr	r1, [r4, #16]
 8001922:	fab2 f282 	clz	r2, r2
 8001926:	fa01 f202 	lsl.w	r2, r1, r2
 800192a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800192e:	4313      	orrs	r3, r2
 8001930:	6003      	str	r3, [r0, #0]
 8001932:	e00d      	b.n	8001950 <HAL_RCC_OscConfig+0x178>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001936:	f7fe fc8d 	bl	8000254 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193a:	4d44      	ldr	r5, [pc, #272]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193e:	682b      	ldr	r3, [r5, #0]
 8001940:	079f      	lsls	r7, r3, #30
 8001942:	d505      	bpl.n	8001950 <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001944:	f7fe fc86 	bl	8000254 <HAL_GetTick>
 8001948:	1b80      	subs	r0, r0, r6
 800194a:	2802      	cmp	r0, #2
 800194c:	d9f7      	bls.n	800193e <HAL_RCC_OscConfig+0x166>
 800194e:	e797      	b.n	8001880 <HAL_RCC_OscConfig+0xa8>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001950:	6823      	ldr	r3, [r4, #0]
 8001952:	071e      	lsls	r6, r3, #28
 8001954:	d403      	bmi.n	800195e <HAL_RCC_OscConfig+0x186>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001956:	6823      	ldr	r3, [r4, #0]
 8001958:	075d      	lsls	r5, r3, #29
 800195a:	d548      	bpl.n	80019ee <HAL_RCC_OscConfig+0x216>
 800195c:	e01f      	b.n	800199e <HAL_RCC_OscConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800195e:	6962      	ldr	r2, [r4, #20]
 8001960:	4b3c      	ldr	r3, [pc, #240]	; (8001a54 <HAL_RCC_OscConfig+0x27c>)
 8001962:	b172      	cbz	r2, 8001982 <HAL_RCC_OscConfig+0x1aa>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001964:	2201      	movs	r2, #1
 8001966:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001968:	f7fe fc74 	bl	8000254 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196c:	4d37      	ldr	r5, [pc, #220]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196e:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001970:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001972:	0798      	lsls	r0, r3, #30
 8001974:	d4ef      	bmi.n	8001956 <HAL_RCC_OscConfig+0x17e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001976:	f7fe fc6d 	bl	8000254 <HAL_GetTick>
 800197a:	1b80      	subs	r0, r0, r6
 800197c:	2802      	cmp	r0, #2
 800197e:	d9f7      	bls.n	8001970 <HAL_RCC_OscConfig+0x198>
 8001980:	e77e      	b.n	8001880 <HAL_RCC_OscConfig+0xa8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001982:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001984:	f7fe fc66 	bl	8000254 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001988:	4d30      	ldr	r5, [pc, #192]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198a:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800198e:	0799      	lsls	r1, r3, #30
 8001990:	d5e1      	bpl.n	8001956 <HAL_RCC_OscConfig+0x17e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001992:	f7fe fc5f 	bl	8000254 <HAL_GetTick>
 8001996:	1b80      	subs	r0, r0, r6
 8001998:	2802      	cmp	r0, #2
 800199a:	d9f7      	bls.n	800198c <HAL_RCC_OscConfig+0x1b4>
 800199c:	e770      	b.n	8001880 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80019a4:	4d2c      	ldr	r5, [pc, #176]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019ac:	641a      	str	r2, [r3, #64]	; 0x40
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80019b8:	682b      	ldr	r3, [r5, #0]
 80019ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019be:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019c0:	f7fe fc48 	bl	8000254 <HAL_GetTick>
 80019c4:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80019c6:	682b      	ldr	r3, [r5, #0]
 80019c8:	05da      	lsls	r2, r3, #23
 80019ca:	d513      	bpl.n	80019f4 <HAL_RCC_OscConfig+0x21c>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019cc:	68a3      	ldr	r3, [r4, #8]
 80019ce:	4d1f      	ldr	r5, [pc, #124]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d115      	bne.n	8001a00 <HAL_RCC_OscConfig+0x228>
 80019d4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019dc:	f7fe fc3a 	bl	8000254 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e0:	4d1a      	ldr	r5, [pc, #104]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e2:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e4:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019ea:	079b      	lsls	r3, r3, #30
 80019ec:	d519      	bpl.n	8001a22 <HAL_RCC_OscConfig+0x24a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ee:	69a2      	ldr	r2, [r4, #24]
 80019f0:	bba2      	cbnz	r2, 8001a5c <HAL_RCC_OscConfig+0x284>
 80019f2:	e07b      	b.n	8001aec <HAL_RCC_OscConfig+0x314>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80019f4:	f7fe fc2e 	bl	8000254 <HAL_GetTick>
 80019f8:	1b80      	subs	r0, r0, r6
 80019fa:	2802      	cmp	r0, #2
 80019fc:	d9e3      	bls.n	80019c6 <HAL_RCC_OscConfig+0x1ee>
 80019fe:	e73f      	b.n	8001880 <HAL_RCC_OscConfig+0xa8>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a00:	2b05      	cmp	r3, #5
 8001a02:	d104      	bne.n	8001a0e <HAL_RCC_OscConfig+0x236>
 8001a04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a06:	f043 0304 	orr.w	r3, r3, #4
 8001a0a:	672b      	str	r3, [r5, #112]	; 0x70
 8001a0c:	e7e2      	b.n	80019d4 <HAL_RCC_OscConfig+0x1fc>
 8001a0e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001a10:	f022 0201 	bic.w	r2, r2, #1
 8001a14:	672a      	str	r2, [r5, #112]	; 0x70
 8001a16:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001a18:	f022 0204 	bic.w	r2, r2, #4
 8001a1c:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a1e:	b133      	cbz	r3, 8001a2e <HAL_RCC_OscConfig+0x256>
 8001a20:	e7dc      	b.n	80019dc <HAL_RCC_OscConfig+0x204>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a22:	f7fe fc17 	bl	8000254 <HAL_GetTick>
 8001a26:	1b80      	subs	r0, r0, r6
 8001a28:	42b8      	cmp	r0, r7
 8001a2a:	d9dd      	bls.n	80019e8 <HAL_RCC_OscConfig+0x210>
 8001a2c:	e728      	b.n	8001880 <HAL_RCC_OscConfig+0xa8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2e:	f7fe fc11 	bl	8000254 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a32:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a36:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a38:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a3a:	0798      	lsls	r0, r3, #30
 8001a3c:	d5d7      	bpl.n	80019ee <HAL_RCC_OscConfig+0x216>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7fe fc09 	bl	8000254 <HAL_GetTick>
 8001a42:	1b80      	subs	r0, r0, r6
 8001a44:	42b8      	cmp	r0, r7
 8001a46:	d9f7      	bls.n	8001a38 <HAL_RCC_OscConfig+0x260>
 8001a48:	e71a      	b.n	8001880 <HAL_RCC_OscConfig+0xa8>
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	42470000 	.word	0x42470000
 8001a54:	42470e80 	.word	0x42470e80
 8001a58:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a5c:	4d32      	ldr	r5, [pc, #200]	; (8001b28 <HAL_RCC_OscConfig+0x350>)
 8001a5e:	68ab      	ldr	r3, [r5, #8]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	f43f aedf 	beq.w	8001828 <HAL_RCC_OscConfig+0x50>
 8001a6a:	4e30      	ldr	r6, [pc, #192]	; (8001b2c <HAL_RCC_OscConfig+0x354>)
 8001a6c:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a6e:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a70:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a72:	d14a      	bne.n	8001b0a <HAL_RCC_OscConfig+0x332>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7fe fbee 	bl	8000254 <HAL_GetTick>
 8001a78:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7a:	682b      	ldr	r3, [r5, #0]
 8001a7c:	4f2a      	ldr	r7, [pc, #168]	; (8001b28 <HAL_RCC_OscConfig+0x350>)
 8001a7e:	0199      	lsls	r1, r3, #6
 8001a80:	d436      	bmi.n	8001af0 <HAL_RCC_OscConfig+0x318>
 8001a82:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001a86:	fa92 f2a2 	rbit	r2, r2
 8001a8a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a8e:	fab2 fc82 	clz	ip, r2
 8001a92:	fa93 f3a3 	rbit	r3, r3
 8001a96:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001a9a:	fab3 fe83 	clz	lr, r3
 8001a9e:	fa91 f1a1 	rbit	r1, r1
 8001aa2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001aa6:	fab1 f581 	clz	r5, r1
 8001aaa:	fa92 f2a2 	rbit	r2, r2
 8001aae:	69e3      	ldr	r3, [r4, #28]
 8001ab0:	fab2 f082 	clz	r0, r2
 8001ab4:	6a22      	ldr	r2, [r4, #32]
 8001ab6:	ea43 0102 	orr.w	r1, r3, r2
 8001aba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001abc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001abe:	fa02 f20c 	lsl.w	r2, r2, ip
 8001ac2:	4311      	orrs	r1, r2
 8001ac4:	085a      	lsrs	r2, r3, #1
 8001ac6:	3a01      	subs	r2, #1
 8001ac8:	fa02 f30e 	lsl.w	r3, r2, lr
 8001acc:	430b      	orrs	r3, r1
 8001ace:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001ad0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ad2:	40a9      	lsls	r1, r5
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	4082      	lsls	r2, r0
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	607b      	str	r3, [r7, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001adc:	2301      	movs	r3, #1
 8001ade:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7fe fbb8 	bl	8000254 <HAL_GetTick>
 8001ae4:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	019a      	lsls	r2, r3, #6
 8001aea:	d508      	bpl.n	8001afe <HAL_RCC_OscConfig+0x326>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001aec:	2000      	movs	r0, #0
 8001aee:	e018      	b.n	8001b22 <HAL_RCC_OscConfig+0x34a>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af0:	f7fe fbb0 	bl	8000254 <HAL_GetTick>
 8001af4:	ebc8 0000 	rsb	r0, r8, r0
 8001af8:	2802      	cmp	r0, #2
 8001afa:	d9be      	bls.n	8001a7a <HAL_RCC_OscConfig+0x2a2>
 8001afc:	e6c0      	b.n	8001880 <HAL_RCC_OscConfig+0xa8>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afe:	f7fe fba9 	bl	8000254 <HAL_GetTick>
 8001b02:	1b00      	subs	r0, r0, r4
 8001b04:	2802      	cmp	r0, #2
 8001b06:	d9ee      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x30e>
 8001b08:	e6ba      	b.n	8001880 <HAL_RCC_OscConfig+0xa8>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0a:	f7fe fba3 	bl	8000254 <HAL_GetTick>
 8001b0e:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b10:	682b      	ldr	r3, [r5, #0]
 8001b12:	019b      	lsls	r3, r3, #6
 8001b14:	d5ea      	bpl.n	8001aec <HAL_RCC_OscConfig+0x314>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b16:	f7fe fb9d 	bl	8000254 <HAL_GetTick>
 8001b1a:	1b00      	subs	r0, r0, r4
 8001b1c:	2802      	cmp	r0, #2
 8001b1e:	d9f7      	bls.n	8001b10 <HAL_RCC_OscConfig+0x338>
 8001b20:	e6ae      	b.n	8001880 <HAL_RCC_OscConfig+0xa8>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001b22:	b002      	add	sp, #8
 8001b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	42470060 	.word	0x42470060

08001b30 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b30:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001b32:	4604      	mov	r4, r0
 8001b34:	2800      	cmp	r0, #0
 8001b36:	d036      	beq.n	8001ba6 <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001b3c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001b40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b44:	b91b      	cbnz	r3, 8001b4e <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b46:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b4a:	f002 ffb9 	bl	8004ac0 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b4e:	68a1      	ldr	r1, [r4, #8]
 8001b50:	6860      	ldr	r0, [r4, #4]
 8001b52:	4308      	orrs	r0, r1
 8001b54:	68e1      	ldr	r1, [r4, #12]
 8001b56:	4308      	orrs	r0, r1
 8001b58:	6921      	ldr	r1, [r4, #16]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b5a:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b5c:	4308      	orrs	r0, r1
 8001b5e:	6961      	ldr	r1, [r4, #20]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b60:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b64:	6823      	ldr	r3, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b66:	4308      	orrs	r0, r1
 8001b68:	69e1      	ldr	r1, [r4, #28]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b6a:	681a      	ldr	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b6c:	4308      	orrs	r0, r1
 8001b6e:	6a21      	ldr	r1, [r4, #32]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b74:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b76:	4308      	orrs	r0, r1
 8001b78:	69a2      	ldr	r2, [r4, #24]
 8001b7a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001b7c:	4308      	orrs	r0, r1
 8001b7e:	f402 7100 	and.w	r1, r2, #512	; 0x200
 8001b82:	4301      	orrs	r1, r0
 8001b84:	6019      	str	r1, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001b86:	0c12      	lsrs	r2, r2, #16
 8001b88:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b8a:	f002 0204 	and.w	r2, r2, #4
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b92:	69da      	ldr	r2, [r3, #28]
 8001b94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b98:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b9a:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001b9c:	2301      	movs	r3, #1
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b9e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ba0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8001ba4:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 8001ba6:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 8001ba8:	bd10      	pop	{r4, pc}
	...

08001bac <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bac:	6a03      	ldr	r3, [r0, #32]
 8001bae:	f023 0301 	bic.w	r3, r3, #1
 8001bb2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bb4:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001bb6:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001bb8:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001bba:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bbc:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001bbe:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bc2:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001bc4:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001bc8:	688b      	ldr	r3, [r1, #8]
 8001bca:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001bcc:	4c0c      	ldr	r4, [pc, #48]	; (8001c00 <TIM_OC1_SetConfig+0x54>)
 8001bce:	42a0      	cmp	r0, r4
 8001bd0:	d009      	beq.n	8001be6 <TIM_OC1_SetConfig+0x3a>
 8001bd2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001bd6:	42a0      	cmp	r0, r4
 8001bd8:	d005      	beq.n	8001be6 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bda:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001bdc:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001bde:	6185      	str	r5, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001be0:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001be2:	6203      	str	r3, [r0, #32]
} 
 8001be4:	bd70      	pop	{r4, r5, r6, pc}
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001be6:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001be8:	694e      	ldr	r6, [r1, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001bea:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001bee:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bf0:	698c      	ldr	r4, [r1, #24]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001bf2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bf6:	4334      	orrs	r4, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001bf8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bfc:	4322      	orrs	r2, r4
 8001bfe:	e7ec      	b.n	8001bda <TIM_OC1_SetConfig+0x2e>
 8001c00:	40010000 	.word	0x40010000

08001c04 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c04:	6a03      	ldr	r3, [r0, #32]
 8001c06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c0a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c0c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001c0e:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c10:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c12:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c14:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001c16:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c1a:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c1c:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001c1e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c22:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001c26:	4d0e      	ldr	r5, [pc, #56]	; (8001c60 <TIM_OC3_SetConfig+0x5c>)
 8001c28:	42a8      	cmp	r0, r5
 8001c2a:	d009      	beq.n	8001c40 <TIM_OC3_SetConfig+0x3c>
 8001c2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c30:	42a8      	cmp	r0, r5
 8001c32:	d005      	beq.n	8001c40 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c34:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c36:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c38:	61c4      	str	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c3a:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c3c:	6203      	str	r3, [r0, #32]
}
 8001c3e:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c40:	68cd      	ldr	r5, [r1, #12]
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001c42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c46:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001c4a:	694d      	ldr	r5, [r1, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001c4c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001c50:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c54:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001c56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c5a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8001c5e:	e7e9      	b.n	8001c34 <TIM_OC3_SetConfig+0x30>
 8001c60:	40010000 	.word	0x40010000

08001c64 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c64:	6a03      	ldr	r3, [r0, #32]
 8001c66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c6a:	6203      	str	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c6c:	b530      	push	{r4, r5, lr}

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c6e:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001c70:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c72:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c74:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c76:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c7a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c7e:	688d      	ldr	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001c80:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c84:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001c88:	4d09      	ldr	r5, [pc, #36]	; (8001cb0 <TIM_OC4_SetConfig+0x4c>)
 8001c8a:	42a8      	cmp	r0, r5
 8001c8c:	d009      	beq.n	8001ca2 <TIM_OC4_SetConfig+0x3e>
 8001c8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c92:	42a8      	cmp	r0, r5
 8001c94:	d005      	beq.n	8001ca2 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c96:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001c98:	684b      	ldr	r3, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8001c9a:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001c9c:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c9e:	6204      	str	r4, [r0, #32]
}
 8001ca0:	bd30      	pop	{r4, r5, pc}
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ca2:	694d      	ldr	r5, [r1, #20]
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ca4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ca8:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001cac:	e7f3      	b.n	8001c96 <TIM_OC4_SetConfig+0x32>
 8001cae:	bf00      	nop
 8001cb0:	40010000 	.word	0x40010000

08001cb4 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cb4:	6803      	ldr	r3, [r0, #0]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	f042 0201 	orr.w	r2, r2, #1
 8001cbc:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	f042 0201 	orr.w	r2, r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	4770      	bx	lr

08001cca <HAL_TIM_OC_MspInit>:
 8001cca:	4770      	bx	lr

08001ccc <HAL_TIM_OC_DelayElapsedCallback>:
 8001ccc:	4770      	bx	lr

08001cce <HAL_TIM_IC_CaptureCallback>:
 8001cce:	4770      	bx	lr

08001cd0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_TIM_TriggerCallback>:
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cd4:	6803      	ldr	r3, [r0, #0]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cda:	b510      	push	{r4, lr}
 8001cdc:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cde:	d514      	bpl.n	8001d0a <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	0792      	lsls	r2, r2, #30
 8001ce4:	d511      	bpl.n	8001d0a <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ce6:	f06f 0202 	mvn.w	r2, #2
 8001cea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cec:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cee:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf0:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cf2:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf4:	d002      	beq.n	8001cfc <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001cf6:	f7ff ffea 	bl	8001cce <HAL_TIM_IC_CaptureCallback>
 8001cfa:	e004      	b.n	8001d06 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cfc:	f7ff ffe6 	bl	8001ccc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d00:	4620      	mov	r0, r4
 8001d02:	f7ff ffe5 	bl	8001cd0 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d06:	2300      	movs	r3, #0
 8001d08:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	691a      	ldr	r2, [r3, #16]
 8001d0e:	0750      	lsls	r0, r2, #29
 8001d10:	d516      	bpl.n	8001d40 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	0751      	lsls	r1, r2, #29
 8001d16:	d513      	bpl.n	8001d40 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d18:	f06f 0204 	mvn.w	r2, #4
 8001d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d1e:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d20:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d22:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d26:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001d28:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d2a:	d002      	beq.n	8001d32 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001d2c:	f7ff ffcf 	bl	8001cce <HAL_TIM_IC_CaptureCallback>
 8001d30:	e004      	b.n	8001d3c <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d32:	f7ff ffcb 	bl	8001ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d36:	4620      	mov	r0, r4
 8001d38:	f7ff ffca 	bl	8001cd0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	0712      	lsls	r2, r2, #28
 8001d46:	d515      	bpl.n	8001d74 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	0710      	lsls	r0, r2, #28
 8001d4c:	d512      	bpl.n	8001d74 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d4e:	f06f 0208 	mvn.w	r2, #8
 8001d52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d54:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d56:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d58:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d5a:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5c:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d5e:	d002      	beq.n	8001d66 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001d60:	f7ff ffb5 	bl	8001cce <HAL_TIM_IC_CaptureCallback>
 8001d64:	e004      	b.n	8001d70 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d66:	f7ff ffb1 	bl	8001ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f7ff ffb0 	bl	8001cd0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d70:	2300      	movs	r3, #0
 8001d72:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	06d2      	lsls	r2, r2, #27
 8001d7a:	d516      	bpl.n	8001daa <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	06d0      	lsls	r0, r2, #27
 8001d80:	d513      	bpl.n	8001daa <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d82:	f06f 0210 	mvn.w	r2, #16
 8001d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d88:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d8a:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d8c:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d90:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001d92:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d94:	d002      	beq.n	8001d9c <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001d96:	f7ff ff9a 	bl	8001cce <HAL_TIM_IC_CaptureCallback>
 8001d9a:	e004      	b.n	8001da6 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9c:	f7ff ff96 	bl	8001ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da0:	4620      	mov	r0, r4
 8001da2:	f7ff ff95 	bl	8001cd0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da6:	2300      	movs	r3, #0
 8001da8:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001daa:	6823      	ldr	r3, [r4, #0]
 8001dac:	691a      	ldr	r2, [r3, #16]
 8001dae:	07d1      	lsls	r1, r2, #31
 8001db0:	d508      	bpl.n	8001dc4 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	07d2      	lsls	r2, r2, #31
 8001db6:	d505      	bpl.n	8001dc4 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001db8:	f06f 0201 	mvn.w	r2, #1
 8001dbc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	f002 fe50 	bl	8004a64 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	0610      	lsls	r0, r2, #24
 8001dca:	d508      	bpl.n	8001dde <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	0611      	lsls	r1, r2, #24
 8001dd0:	d505      	bpl.n	8001dde <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dd2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dd6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001dd8:	4620      	mov	r0, r4
 8001dda:	f000 f938 	bl	800204e <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	691a      	ldr	r2, [r3, #16]
 8001de2:	0652      	lsls	r2, r2, #25
 8001de4:	d508      	bpl.n	8001df8 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	0650      	lsls	r0, r2, #25
 8001dea:	d505      	bpl.n	8001df8 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001df0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001df2:	4620      	mov	r0, r4
 8001df4:	f7ff ff6d 	bl	8001cd2 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	0691      	lsls	r1, r2, #26
 8001dfe:	d50a      	bpl.n	8001e16 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	0692      	lsls	r2, r2, #26
 8001e04:	d507      	bpl.n	8001e16 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e06:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001e0a:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e0c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8001e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8001e12:	f000 b91b 	b.w	800204c <HAL_TIMEx_CommutationCallback>
 8001e16:	bd10      	pop	{r4, pc}

08001e18 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001e18:	4a2e      	ldr	r2, [pc, #184]	; (8001ed4 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8001e1a:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001e1c:	4290      	cmp	r0, r2
 8001e1e:	d012      	beq.n	8001e46 <TIM_Base_SetConfig+0x2e>
 8001e20:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e24:	d00f      	beq.n	8001e46 <TIM_Base_SetConfig+0x2e>
 8001e26:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001e2a:	4290      	cmp	r0, r2
 8001e2c:	d00b      	beq.n	8001e46 <TIM_Base_SetConfig+0x2e>
 8001e2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e32:	4290      	cmp	r0, r2
 8001e34:	d007      	beq.n	8001e46 <TIM_Base_SetConfig+0x2e>
 8001e36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e3a:	4290      	cmp	r0, r2
 8001e3c:	d003      	beq.n	8001e46 <TIM_Base_SetConfig+0x2e>
 8001e3e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001e42:	4290      	cmp	r0, r2
 8001e44:	d118      	bne.n	8001e78 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001e46:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001e4c:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001e4e:	4a21      	ldr	r2, [pc, #132]	; (8001ed4 <TIM_Base_SetConfig+0xbc>)
 8001e50:	4290      	cmp	r0, r2
 8001e52:	d037      	beq.n	8001ec4 <TIM_Base_SetConfig+0xac>
 8001e54:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e58:	d034      	beq.n	8001ec4 <TIM_Base_SetConfig+0xac>
 8001e5a:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <TIM_Base_SetConfig+0xc0>)
 8001e5c:	4290      	cmp	r0, r2
 8001e5e:	d031      	beq.n	8001ec4 <TIM_Base_SetConfig+0xac>
 8001e60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d02d      	beq.n	8001ec4 <TIM_Base_SetConfig+0xac>
 8001e68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e6c:	4290      	cmp	r0, r2
 8001e6e:	d029      	beq.n	8001ec4 <TIM_Base_SetConfig+0xac>
 8001e70:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001e74:	4290      	cmp	r0, r2
 8001e76:	d025      	beq.n	8001ec4 <TIM_Base_SetConfig+0xac>
 8001e78:	4a18      	ldr	r2, [pc, #96]	; (8001edc <TIM_Base_SetConfig+0xc4>)
 8001e7a:	4290      	cmp	r0, r2
 8001e7c:	d022      	beq.n	8001ec4 <TIM_Base_SetConfig+0xac>
 8001e7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e82:	4290      	cmp	r0, r2
 8001e84:	d01e      	beq.n	8001ec4 <TIM_Base_SetConfig+0xac>
 8001e86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e8a:	4290      	cmp	r0, r2
 8001e8c:	d01a      	beq.n	8001ec4 <TIM_Base_SetConfig+0xac>
 8001e8e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001e92:	4290      	cmp	r0, r2
 8001e94:	d016      	beq.n	8001ec4 <TIM_Base_SetConfig+0xac>
 8001e96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e9a:	4290      	cmp	r0, r2
 8001e9c:	d012      	beq.n	8001ec4 <TIM_Base_SetConfig+0xac>
 8001e9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ea2:	4290      	cmp	r0, r2
 8001ea4:	d00e      	beq.n	8001ec4 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8001ea6:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ea8:	688b      	ldr	r3, [r1, #8]
 8001eaa:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001eac:	680b      	ldr	r3, [r1, #0]
 8001eae:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <TIM_Base_SetConfig+0xbc>)
 8001eb2:	4298      	cmp	r0, r3
 8001eb4:	d00b      	beq.n	8001ece <TIM_Base_SetConfig+0xb6>
 8001eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eba:	4298      	cmp	r0, r3
 8001ebc:	d007      	beq.n	8001ece <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	6143      	str	r3, [r0, #20]
}
 8001ec2:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ec4:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	e7eb      	b.n	8001ea6 <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ece:	690b      	ldr	r3, [r1, #16]
 8001ed0:	6303      	str	r3, [r0, #48]	; 0x30
 8001ed2:	e7f4      	b.n	8001ebe <TIM_Base_SetConfig+0xa6>
 8001ed4:	40010000 	.word	0x40010000
 8001ed8:	40000400 	.word	0x40000400
 8001edc:	40014000 	.word	0x40014000

08001ee0 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001ee0:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	b1a0      	cbz	r0, 8001f10 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001ee6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001eea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001eee:	b91b      	cbnz	r3, 8001ef8 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ef0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ef4:	f002 fef8 	bl	8004ce8 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001efe:	6820      	ldr	r0, [r4, #0]
 8001f00:	1d21      	adds	r1, r4, #4
 8001f02:	f7ff ff89 	bl	8001e18 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001f06:	2301      	movs	r3, #1
 8001f08:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001f10:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8001f12:	bd10      	pop	{r4, pc}

08001f14 <HAL_TIM_OC_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8001f14:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001f16:	4604      	mov	r4, r0
 8001f18:	b1a0      	cbz	r0, 8001f44 <HAL_TIM_OC_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 
  if(htim->State == HAL_TIM_STATE_RESET)
 8001f1a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001f1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f22:	b91b      	cbnz	r3, 8001f2c <HAL_TIM_OC_Init+0x18>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f24:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001f28:	f7ff fecf 	bl	8001cca <HAL_TIM_OC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the Output Compare */  
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 8001f32:	6820      	ldr	r0, [r4, #0]
 8001f34:	1d21      	adds	r1, r4, #4
 8001f36:	f7ff ff6f 	bl	8001e18 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8001f40:	2000      	movs	r0, #0
 8001f42:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001f44:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8001f46:	bd10      	pop	{r4, pc}

08001f48 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f48:	6a03      	ldr	r3, [r0, #32]
 8001f4a:	f023 0310 	bic.w	r3, r3, #16
 8001f4e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001f50:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001f52:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f54:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f56:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f58:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f5a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f5e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f62:	688d      	ldr	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f64:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f68:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001f6c:	4d0e      	ldr	r5, [pc, #56]	; (8001fa8 <TIM_OC2_SetConfig+0x60>)
 8001f6e:	42a8      	cmp	r0, r5
 8001f70:	d009      	beq.n	8001f86 <TIM_OC2_SetConfig+0x3e>
 8001f72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f76:	42a8      	cmp	r0, r5
 8001f78:	d005      	beq.n	8001f86 <TIM_OC2_SetConfig+0x3e>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f7a:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f7c:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f7e:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f80:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f82:	6203      	str	r3, [r0, #32]
}
 8001f84:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f86:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f8c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f90:	694d      	ldr	r5, [r1, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f92:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f96:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f9a:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001fa0:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8001fa4:	e7e9      	b.n	8001f7a <TIM_OC2_SetConfig+0x32>
 8001fa6:	bf00      	nop
 8001fa8:	40010000 	.word	0x40010000

08001fac <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001fac:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Check input state */
  __HAL_LOCK(htim); 
 8001fae:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001fb2:	2b01      	cmp	r3, #1
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001fb4:	4604      	mov	r4, r0
 8001fb6:	f04f 0002 	mov.w	r0, #2
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Check input state */
  __HAL_LOCK(htim); 
 8001fba:	d024      	beq.n	8002006 <HAL_TIM_OC_ConfigChannel+0x5a>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc2:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 8001fc6:	461d      	mov	r5, r3
  
  switch (Channel)
 8001fc8:	2a0c      	cmp	r2, #12
 8001fca:	d817      	bhi.n	8001ffc <HAL_TIM_OC_ConfigChannel+0x50>
 8001fcc:	e8df f002 	tbb	[pc, r2]
 8001fd0:	16161607 	.word	0x16161607
 8001fd4:	1616160b 	.word	0x1616160b
 8001fd8:	1616160f 	.word	0x1616160f
 8001fdc:	13          	.byte	0x13
 8001fdd:	00          	.byte	0x00
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fde:	6820      	ldr	r0, [r4, #0]
 8001fe0:	f7ff fde4 	bl	8001bac <TIM_OC1_SetConfig>
    }
    break;
 8001fe4:	e00a      	b.n	8001ffc <HAL_TIM_OC_ConfigChannel+0x50>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fe6:	6820      	ldr	r0, [r4, #0]
 8001fe8:	f7ff ffae 	bl	8001f48 <TIM_OC2_SetConfig>
    }
    break;
 8001fec:	e006      	b.n	8001ffc <HAL_TIM_OC_ConfigChannel+0x50>
    
    case TIM_CHANNEL_3:
    {
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fee:	6820      	ldr	r0, [r4, #0]
 8001ff0:	f7ff fe08 	bl	8001c04 <TIM_OC3_SetConfig>
    }
    break;
 8001ff4:	e002      	b.n	8001ffc <HAL_TIM_OC_ConfigChannel+0x50>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ff6:	6820      	ldr	r0, [r4, #0]
 8001ff8:	f7ff fe34 	bl	8001c64 <TIM_OC4_SetConfig>
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim); 
 8001ffc:	2000      	movs	r0, #0
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ffe:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  
  __HAL_UNLOCK(htim); 
 8002002:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 8002006:	bd38      	pop	{r3, r4, r5, pc}

08002008 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002008:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800200c:	2b01      	cmp	r3, #1
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800200e:	b510      	push	{r4, lr}
 8002010:	f04f 0302 	mov.w	r3, #2
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002014:	d018      	beq.n	8002048 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002016:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800201a:	6803      	ldr	r3, [r0, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002022:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002024:	685c      	ldr	r4, [r3, #4]
 8002026:	680a      	ldr	r2, [r1, #0]
 8002028:	4322      	orrs	r2, r4
 800202a:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002032:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002034:	689c      	ldr	r4, [r3, #8]
 8002036:	684a      	ldr	r2, [r1, #4]
 8002038:	4322      	orrs	r2, r4
 800203a:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800203c:	2301      	movs	r3, #1
 800203e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002042:	2300      	movs	r3, #0
 8002044:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002048:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 800204a:	bd10      	pop	{r4, pc}

0800204c <HAL_TIMEx_CommutationCallback>:
 800204c:	4770      	bx	lr

0800204e <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800204e:	4770      	bx	lr

08002050 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002054:	6807      	ldr	r7, [r0, #0]
 8002056:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002058:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800205a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800205e:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002060:	68a1      	ldr	r1, [r4, #8]
 8002062:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002064:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002066:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002068:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800206a:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800206c:	4311      	orrs	r1, r2
 800206e:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002070:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002074:	430a      	orrs	r2, r1
 8002076:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002078:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800207c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800207e:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002080:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002082:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002086:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002088:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800208c:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	4b7c      	ldr	r3, [pc, #496]	; (8002284 <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002094:	d17c      	bne.n	8002190 <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002096:	429f      	cmp	r7, r3
 8002098:	d003      	beq.n	80020a2 <UART_SetConfig+0x52>
 800209a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800209e:	429f      	cmp	r7, r3
 80020a0:	d131      	bne.n	8002106 <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80020a2:	f7ff f819 	bl	80010d8 <HAL_RCC_GetPCLK2Freq>
 80020a6:	6863      	ldr	r3, [r4, #4]
 80020a8:	2519      	movs	r5, #25
 80020aa:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80020ae:	4368      	muls	r0, r5
 80020b0:	fbb0 f8f8 	udiv	r8, r0, r8
 80020b4:	f7ff f810 	bl	80010d8 <HAL_RCC_GetPCLK2Freq>
 80020b8:	6866      	ldr	r6, [r4, #4]
 80020ba:	4368      	muls	r0, r5
 80020bc:	0076      	lsls	r6, r6, #1
 80020be:	fbb0 f6f6 	udiv	r6, r0, r6
 80020c2:	f7ff f809 	bl	80010d8 <HAL_RCC_GetPCLK2Freq>
 80020c6:	6863      	ldr	r3, [r4, #4]
 80020c8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4368      	muls	r0, r5
 80020d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80020d4:	fbb0 f0f9 	udiv	r0, r0, r9
 80020d8:	fb09 6610 	mls	r6, r9, r0, r6
 80020dc:	f7fe fffc 	bl	80010d8 <HAL_RCC_GetPCLK2Freq>
 80020e0:	fbb8 f8f9 	udiv	r8, r8, r9
 80020e4:	6861      	ldr	r1, [r4, #4]
 80020e6:	00f6      	lsls	r6, r6, #3
 80020e8:	3632      	adds	r6, #50	; 0x32
 80020ea:	fbb6 f6f9 	udiv	r6, r6, r9
 80020ee:	0076      	lsls	r6, r6, #1
 80020f0:	4368      	muls	r0, r5
 80020f2:	0049      	lsls	r1, r1, #1
 80020f4:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80020f8:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 80020fc:	fbb0 faf1 	udiv	sl, r0, r1
 8002100:	f7fe ffea 	bl	80010d8 <HAL_RCC_GetPCLK2Freq>
 8002104:	e030      	b.n	8002168 <UART_SetConfig+0x118>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002106:	f7fe ffcf 	bl	80010a8 <HAL_RCC_GetPCLK1Freq>
 800210a:	6863      	ldr	r3, [r4, #4]
 800210c:	2519      	movs	r5, #25
 800210e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8002112:	4368      	muls	r0, r5
 8002114:	fbb0 f8f8 	udiv	r8, r0, r8
 8002118:	f7fe ffc6 	bl	80010a8 <HAL_RCC_GetPCLK1Freq>
 800211c:	6866      	ldr	r6, [r4, #4]
 800211e:	4368      	muls	r0, r5
 8002120:	0076      	lsls	r6, r6, #1
 8002122:	fbb0 f6f6 	udiv	r6, r0, r6
 8002126:	f7fe ffbf 	bl	80010a8 <HAL_RCC_GetPCLK1Freq>
 800212a:	6863      	ldr	r3, [r4, #4]
 800212c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4368      	muls	r0, r5
 8002134:	fbb0 f0f3 	udiv	r0, r0, r3
 8002138:	fbb0 f0f9 	udiv	r0, r0, r9
 800213c:	fb09 6610 	mls	r6, r9, r0, r6
 8002140:	f7fe ffb2 	bl	80010a8 <HAL_RCC_GetPCLK1Freq>
 8002144:	fbb8 f8f9 	udiv	r8, r8, r9
 8002148:	00f6      	lsls	r6, r6, #3
 800214a:	6861      	ldr	r1, [r4, #4]
 800214c:	3632      	adds	r6, #50	; 0x32
 800214e:	fbb6 f6f9 	udiv	r6, r6, r9
 8002152:	0076      	lsls	r6, r6, #1
 8002154:	4368      	muls	r0, r5
 8002156:	0049      	lsls	r1, r1, #1
 8002158:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800215c:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8002160:	fbb0 faf1 	udiv	sl, r0, r1
 8002164:	f7fe ffa0 	bl	80010a8 <HAL_RCC_GetPCLK1Freq>
 8002168:	4345      	muls	r5, r0
 800216a:	6860      	ldr	r0, [r4, #4]
 800216c:	0040      	lsls	r0, r0, #1
 800216e:	fbb5 f0f0 	udiv	r0, r5, r0
 8002172:	fbb0 f0f9 	udiv	r0, r0, r9
 8002176:	fb09 a210 	mls	r2, r9, r0, sl
 800217a:	00d2      	lsls	r2, r2, #3
 800217c:	3232      	adds	r2, #50	; 0x32
 800217e:	fbb2 f3f9 	udiv	r3, r2, r9
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	4443      	add	r3, r8
 8002188:	441e      	add	r6, r3
 800218a:	60be      	str	r6, [r7, #8]
 800218c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002190:	429f      	cmp	r7, r3
 8002192:	d002      	beq.n	800219a <UART_SetConfig+0x14a>
 8002194:	4b3c      	ldr	r3, [pc, #240]	; (8002288 <UART_SetConfig+0x238>)
 8002196:	429f      	cmp	r7, r3
 8002198:	d130      	bne.n	80021fc <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800219a:	f7fe ff9d 	bl	80010d8 <HAL_RCC_GetPCLK2Freq>
 800219e:	6863      	ldr	r3, [r4, #4]
 80021a0:	2519      	movs	r5, #25
 80021a2:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80021a6:	4368      	muls	r0, r5
 80021a8:	fbb0 f8f8 	udiv	r8, r0, r8
 80021ac:	f7fe ff94 	bl	80010d8 <HAL_RCC_GetPCLK2Freq>
 80021b0:	6866      	ldr	r6, [r4, #4]
 80021b2:	4368      	muls	r0, r5
 80021b4:	00b6      	lsls	r6, r6, #2
 80021b6:	fbb0 f6f6 	udiv	r6, r0, r6
 80021ba:	f7fe ff8d 	bl	80010d8 <HAL_RCC_GetPCLK2Freq>
 80021be:	6863      	ldr	r3, [r4, #4]
 80021c0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4368      	muls	r0, r5
 80021c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80021cc:	fbb0 f0f9 	udiv	r0, r0, r9
 80021d0:	fb09 6610 	mls	r6, r9, r0, r6
 80021d4:	f7fe ff80 	bl	80010d8 <HAL_RCC_GetPCLK2Freq>
 80021d8:	fbb8 f8f9 	udiv	r8, r8, r9
 80021dc:	6861      	ldr	r1, [r4, #4]
 80021de:	0136      	lsls	r6, r6, #4
 80021e0:	4368      	muls	r0, r5
 80021e2:	0089      	lsls	r1, r1, #2
 80021e4:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80021e8:	3632      	adds	r6, #50	; 0x32
 80021ea:	fbb0 faf1 	udiv	sl, r0, r1
 80021ee:	fbb6 f6f9 	udiv	r6, r6, r9
 80021f2:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 80021f6:	f7fe ff6f 	bl	80010d8 <HAL_RCC_GetPCLK2Freq>
 80021fa:	e02f      	b.n	800225c <UART_SetConfig+0x20c>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80021fc:	f7fe ff54 	bl	80010a8 <HAL_RCC_GetPCLK1Freq>
 8002200:	6863      	ldr	r3, [r4, #4]
 8002202:	2519      	movs	r5, #25
 8002204:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8002208:	4368      	muls	r0, r5
 800220a:	fbb0 f8f8 	udiv	r8, r0, r8
 800220e:	f7fe ff4b 	bl	80010a8 <HAL_RCC_GetPCLK1Freq>
 8002212:	6866      	ldr	r6, [r4, #4]
 8002214:	4368      	muls	r0, r5
 8002216:	00b6      	lsls	r6, r6, #2
 8002218:	fbb0 f6f6 	udiv	r6, r0, r6
 800221c:	f7fe ff44 	bl	80010a8 <HAL_RCC_GetPCLK1Freq>
 8002220:	6863      	ldr	r3, [r4, #4]
 8002222:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4368      	muls	r0, r5
 800222a:	fbb0 f0f3 	udiv	r0, r0, r3
 800222e:	fbb0 f0f9 	udiv	r0, r0, r9
 8002232:	fb09 6610 	mls	r6, r9, r0, r6
 8002236:	f7fe ff37 	bl	80010a8 <HAL_RCC_GetPCLK1Freq>
 800223a:	fbb8 f8f9 	udiv	r8, r8, r9
 800223e:	6861      	ldr	r1, [r4, #4]
 8002240:	0136      	lsls	r6, r6, #4
 8002242:	3632      	adds	r6, #50	; 0x32
 8002244:	4368      	muls	r0, r5
 8002246:	fbb6 f6f9 	udiv	r6, r6, r9
 800224a:	0089      	lsls	r1, r1, #2
 800224c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8002250:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8002254:	fbb0 faf1 	udiv	sl, r0, r1
 8002258:	f7fe ff26 	bl	80010a8 <HAL_RCC_GetPCLK1Freq>
 800225c:	4345      	muls	r5, r0
 800225e:	6860      	ldr	r0, [r4, #4]
 8002260:	0080      	lsls	r0, r0, #2
 8002262:	fbb5 f0f0 	udiv	r0, r5, r0
 8002266:	fbb0 f0f9 	udiv	r0, r0, r9
 800226a:	fb09 a210 	mls	r2, r9, r0, sl
 800226e:	0112      	lsls	r2, r2, #4
 8002270:	3232      	adds	r2, #50	; 0x32
 8002272:	fbb2 f3f9 	udiv	r3, r2, r9
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	4433      	add	r3, r6
 800227c:	4443      	add	r3, r8
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002284:	40011000 	.word	0x40011000
 8002288:	40011400 	.word	0x40011400

0800228c <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800228c:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 800228e:	4604      	mov	r4, r0
 8002290:	b340      	cbz	r0, 80022e4 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002292:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002296:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800229a:	b91b      	cbnz	r3, 80022a4 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800229c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80022a0:	f002 fd70 	bl	8004d84 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022a4:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022a6:	2324      	movs	r3, #36	; 0x24
 80022a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022ac:	68d3      	ldr	r3, [r2, #12]
 80022ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022b2:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022b4:	4620      	mov	r0, r4
 80022b6:	f7ff fecb 	bl	8002050 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022c4:	695a      	ldr	r2, [r3, #20]
 80022c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022ca:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022d2:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d4:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80022d6:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80022da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80022de:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 80022e2:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 80022e4:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 80022e6:	bd10      	pop	{r4, pc}

080022e8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80022e8:	b084      	sub	sp, #16
 80022ea:	b538      	push	{r3, r4, r5, lr}
 80022ec:	ad05      	add	r5, sp, #20
 80022ee:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80022f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80022f4:	2b01      	cmp	r3, #1
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80022f6:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80022f8:	d117      	bne.n	800232a <USB_CoreInit+0x42>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80022fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80022fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002300:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002302:	68c3      	ldr	r3, [r0, #12]
 8002304:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800230c:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800230e:	68c3      	ldr	r3, [r0, #12]
 8002310:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002314:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8002316:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002318:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800231a:	bf02      	ittt	eq
 800231c:	68c3      	ldreq	r3, [r0, #12]
 800231e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8002322:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8002324:	f000 fca4 	bl	8002c70 <USB_CoreReset>
 8002328:	e008      	b.n	800233c <USB_CoreInit+0x54>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800232a:	68c3      	ldr	r3, [r0, #12]
 800232c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002330:	60c3      	str	r3, [r0, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8002332:	f000 fc9d 	bl	8002c70 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002336:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800233a:	63a3      	str	r3, [r4, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 800233c:	9b08      	ldr	r3, [sp, #32]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d107      	bne.n	8002352 <USB_CoreInit+0x6a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002342:	68a3      	ldr	r3, [r4, #8]
 8002344:	f043 0306 	orr.w	r3, r3, #6
 8002348:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800234a:	68a3      	ldr	r3, [r4, #8]
 800234c:	f043 0320 	orr.w	r3, r3, #32
 8002350:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 8002352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002356:	2000      	movs	r0, #0
 8002358:	b004      	add	sp, #16
 800235a:	4770      	bx	lr

0800235c <USB_EnableGlobalInt>:
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800235c:	6883      	ldr	r3, [r0, #8]
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8002364:	2000      	movs	r0, #0
 8002366:	4770      	bx	lr

08002368 <USB_DisableGlobalInt>:
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002368:	6883      	ldr	r3, [r0, #8]
 800236a:	f023 0301 	bic.w	r3, r3, #1
 800236e:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8002370:	2000      	movs	r0, #0
 8002372:	4770      	bx	lr

08002374 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8002374:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002376:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8002378:	2901      	cmp	r1, #1
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800237a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800237e:	60c3      	str	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8002380:	d104      	bne.n	800238c <USB_SetCurrentMode+0x18>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8002382:	68c3      	ldr	r3, [r0, #12]
 8002384:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002388:	60c3      	str	r3, [r0, #12]
 800238a:	e004      	b.n	8002396 <USB_SetCurrentMode+0x22>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 800238c:	b919      	cbnz	r1, 8002396 <USB_SetCurrentMode+0x22>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 800238e:	68c3      	ldr	r3, [r0, #12]
 8002390:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002394:	60c3      	str	r3, [r0, #12]
  }
  HAL_Delay(50U);
 8002396:	2032      	movs	r0, #50	; 0x32
 8002398:	f7fd ff62 	bl	8000260 <HAL_Delay>
  
  return HAL_OK;
}
 800239c:	2000      	movs	r0, #0
 800239e:	bd08      	pop	{r3, pc}

080023a0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80023a0:	b084      	sub	sp, #16
 80023a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023a6:	4604      	mov	r4, r0
 80023a8:	a807      	add	r0, sp, #28
 80023aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0U;

  /*Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80023ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023b0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80023b2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80023b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023b8:	4688      	mov	r8, r1
 80023ba:	63a3      	str	r3, [r4, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0U)
 80023bc:	b95e      	cbnz	r6, 80023d6 <USB_DevInit+0x36>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80023be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023c4:	63a3      	str	r3, [r4, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023cc:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80023ce:	6823      	ldr	r3, [r4, #0]
 80023d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d4:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80023dc:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80023e0:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80023e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80023e6:	2b01      	cmp	r3, #1
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80023e8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80023ec:	d106      	bne.n	80023fc <USB_DevInit+0x5c>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80023ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80023f0:	b129      	cbz	r1, 80023fe <USB_DevInit+0x5e>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
    }
    else 
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 80023f2:	4619      	mov	r1, r3
 80023f4:	4620      	mov	r0, r4
 80023f6:	f000 f897 	bl	8002528 <USB_SetDevSpeed>
 80023fa:	e003      	b.n	8002404 <USB_DevInit+0x64>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80023fc:	2103      	movs	r1, #3
 80023fe:	4620      	mov	r0, r4
 8002400:	f000 f892 	bl	8002528 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 8002404:	2110      	movs	r1, #16
 8002406:	4620      	mov	r0, r4
 8002408:	f000 f86c 	bl	80024e4 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800240c:	4620      	mov	r0, r4
 800240e:	f000 f87b 	bl	8002508 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002412:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002414:	f04f 32ff 	mov.w	r2, #4294967295
  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
  USB_FlushRxFifo(USBx);
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002418:	612b      	str	r3, [r5, #16]
 800241a:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0U;
 800241c:	616b      	str	r3, [r5, #20]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800241e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USB_FlushRxFifo(USBx);
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002422:	61aa      	str	r2, [r5, #24]
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8002424:	f04f 0eff 	mov.w	lr, #255	; 0xff
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  USBx_DEVICE->DAINTMSK = 0U;
 8002428:	61eb      	str	r3, [r5, #28]
 800242a:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800242e:	4543      	cmp	r3, r8
 8002430:	d00c      	beq.n	800244c <USB_DevInit+0xac>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002432:	f8d2 c000 	ldr.w	ip, [r2]
 8002436:	f1bc 0f00 	cmp.w	ip, #0
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800243a:	bfb4      	ite	lt
 800243c:	6010      	strlt	r0, [r2, #0]
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800243e:	6011      	strge	r1, [r2, #0]
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  USBx_DEVICE->DAINTMSK = 0U;
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002440:	3301      	adds	r3, #1
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002442:	6111      	str	r1, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8002444:	f8c2 e008 	str.w	lr, [r2, #8]
 8002448:	3220      	adds	r2, #32
 800244a:	e7f0      	b.n	800242e <USB_DevInit+0x8e>
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  USBx_DEVICE->DAINTMSK = 0U;
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800244c:	2200      	movs	r2, #0
 800244e:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8002452:	4611      	mov	r1, r2
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8002458:	f04f 0eff 	mov.w	lr, #255	; 0xff
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800245c:	4542      	cmp	r2, r8
 800245e:	d00c      	beq.n	800247a <USB_DevInit+0xda>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002460:	f8d3 c000 	ldr.w	ip, [r3]
 8002464:	f1bc 0f00 	cmp.w	ip, #0
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002468:	bfb4      	ite	lt
 800246a:	6018      	strlt	r0, [r3, #0]
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800246c:	6019      	strge	r1, [r3, #0]
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800246e:	3201      	adds	r2, #1
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002470:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8002472:	f8c3 e008 	str.w	lr, [r3, #8]
 8002476:	3320      	adds	r3, #32
 8002478:	e7f0      	b.n	800245c <USB_DevInit+0xbc>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800247a:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 800247c:	2f01      	cmp	r7, #1
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800247e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002482:	612b      	str	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 8002484:	d108      	bne.n	8002498 <USB_DevInit+0xf8>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8002486:	4b15      	ldr	r3, [pc, #84]	; (80024dc <USB_DevInit+0x13c>)
 8002488:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 800248a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800248c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002490:	f043 0303 	orr.w	r3, r3, #3
 8002494:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8002496:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800249c:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80024a0:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80024a2:	b91f      	cbnz	r7, 80024ac <USB_DevInit+0x10c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 80024a4:	69a3      	ldr	r3, [r4, #24]
 80024a6:	f043 0310 	orr.w	r3, r3, #16
 80024aa:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80024ac:	69a2      	ldr	r2, [r4, #24]
 80024ae:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <USB_DevInit+0x140>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 80024b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80024b6:	b11b      	cbz	r3, 80024c0 <USB_DevInit+0x120>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80024b8:	69a3      	ldr	r3, [r4, #24]
 80024ba:	f043 0308 	orr.w	r3, r3, #8
 80024be:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 80024c0:	2e01      	cmp	r6, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 80024c2:	bf01      	itttt	eq
 80024c4:	69a3      	ldreq	r3, [r4, #24]
 80024c6:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80024ca:	f043 0304 	orreq.w	r3, r3, #4
 80024ce:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 80024d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024d4:	2000      	movs	r0, #0
 80024d6:	b004      	add	sp, #16
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	00800100 	.word	0x00800100
 80024e0:	803c3800 	.word	0x803c3800

080024e4 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80024e4:	0189      	lsls	r1, r1, #6
 80024e6:	f041 0120 	orr.w	r1, r1, #32
 80024ea:	4a06      	ldr	r2, [pc, #24]	; (8002504 <USB_FlushTxFifo+0x20>)
 80024ec:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80024ee:	3a01      	subs	r2, #1
 80024f0:	d005      	beq.n	80024fe <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80024f2:	6903      	ldr	r3, [r0, #16]
 80024f4:	f013 0320 	ands.w	r3, r3, #32
 80024f8:	d1f9      	bne.n	80024ee <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 80024fa:	4618      	mov	r0, r3
 80024fc:	4770      	bx	lr
  
  do
  {
    if (++count > 200000)
    {
      return HAL_TIMEOUT;
 80024fe:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
  
  return HAL_OK;
}
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	00030d41 	.word	0x00030d41

08002508 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002508:	2310      	movs	r3, #16
 800250a:	4a06      	ldr	r2, [pc, #24]	; (8002524 <USB_FlushRxFifo+0x1c>)
 800250c:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 800250e:	3a01      	subs	r2, #1
 8002510:	d005      	beq.n	800251e <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002512:	6903      	ldr	r3, [r0, #16]
 8002514:	f013 0310 	ands.w	r3, r3, #16
 8002518:	d1f9      	bne.n	800250e <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 800251a:	4618      	mov	r0, r3
 800251c:	4770      	bx	lr
  
  do
  {
    if (++count > 200000)
    {
      return HAL_TIMEOUT;
 800251e:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
  
  return HAL_OK;
}
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	00030d41 	.word	0x00030d41

08002528 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8002528:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800252c:	4319      	orrs	r1, r3
 800252e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8002532:	2000      	movs	r0, #0
 8002534:	4770      	bx	lr

08002536 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002536:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800253a:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 800253e:	f013 0006 	ands.w	r0, r3, #6
 8002542:	d012      	beq.n	800256a <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002544:	6893      	ldr	r3, [r2, #8]
 8002546:	f003 0306 	and.w	r3, r3, #6
 800254a:	2b02      	cmp	r3, #2
 800254c:	d00c      	beq.n	8002568 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 800254e:	6893      	ldr	r3, [r2, #8]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002550:	f003 0306 	and.w	r3, r3, #6
 8002554:	2b06      	cmp	r3, #6
 8002556:	d007      	beq.n	8002568 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002558:	6893      	ldr	r3, [r2, #8]
 800255a:	f003 0306 	and.w	r3, r3, #6
 800255e:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 8002560:	bf14      	ite	ne
 8002562:	2000      	movne	r0, #0
 8002564:	2002      	moveq	r0, #2
 8002566:	4770      	bx	lr
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
 8002568:	2003      	movs	r0, #3
  {
    speed = USB_OTG_SPEED_LOW;
  }
  
  return speed;
}
 800256a:	4770      	bx	lr

0800256c <USB_ActivateEndpoint>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 800256c:	784b      	ldrb	r3, [r1, #1]
 800256e:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8002572:	2b01      	cmp	r3, #1
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002574:	b570      	push	{r4, r5, r6, lr}
 8002576:	780e      	ldrb	r6, [r1, #0]
  if (ep->is_in == 1U)
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8002578:	69d4      	ldr	r4, [r2, #28]
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 800257a:	d11b      	bne.n	80025b4 <USB_ActivateEndpoint+0x48>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 800257c:	40b3      	lsls	r3, r6
 800257e:	b29b      	uxth	r3, r3
 8002580:	4323      	orrs	r3, r4
 8002582:	61d3      	str	r3, [r2, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002584:	780e      	ldrb	r6, [r1, #0]
 8002586:	f44f 6510 	mov.w	r5, #2304	; 0x900
 800258a:	eb05 1546 	add.w	r5, r5, r6, lsl #5
 800258e:	582b      	ldr	r3, [r5, r0]
 8002590:	041a      	lsls	r2, r3, #16
 8002592:	d42a      	bmi.n	80025ea <USB_ActivateEndpoint+0x7e>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002594:	582c      	ldr	r4, [r5, r0]
 8002596:	688a      	ldr	r2, [r1, #8]
 8002598:	f044 5380 	orr.w	r3, r4, #268435456	; 0x10000000
 800259c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80025a4:	431a      	orrs	r2, r3
 80025a6:	78cb      	ldrb	r3, [r1, #3]
 80025a8:	ea42 4383 	orr.w	r3, r2, r3, lsl #18
 80025ac:	ea43 5386 	orr.w	r3, r3, r6, lsl #22
 80025b0:	502b      	str	r3, [r5, r0]
 80025b2:	e01a      	b.n	80025ea <USB_ActivateEndpoint+0x7e>
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80025b4:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80025b8:	fa05 f306 	lsl.w	r3, r5, r6
 80025bc:	4323      	orrs	r3, r4
 80025be:	61d3      	str	r3, [r2, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80025c0:	780c      	ldrb	r4, [r1, #0]
 80025c2:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 80025c6:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 80025ca:	5823      	ldr	r3, [r4, r0]
 80025cc:	041b      	lsls	r3, r3, #16
 80025ce:	d40c      	bmi.n	80025ea <USB_ActivateEndpoint+0x7e>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80025d0:	5822      	ldr	r2, [r4, r0]
 80025d2:	688b      	ldr	r3, [r1, #8]
 80025d4:	f3c3 050a 	ubfx	r5, r3, #0, #11
 80025d8:	f042 5380 	orr.w	r3, r2, #268435456	; 0x10000000
 80025dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e0:	78ca      	ldrb	r2, [r1, #3]
 80025e2:	432b      	orrs	r3, r5
 80025e4:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 80025e8:	5023      	str	r3, [r4, r0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 80025ea:	2000      	movs	r0, #0
 80025ec:	bd70      	pop	{r4, r5, r6, pc}

080025ee <USB_DeactivateEndpoint>:
 80025ee:	f000 b801 	b.w	80025f4 <USB_DeactivateDedicatedEndpoint>
	...

080025f4 <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80025f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 80025f6:	784b      	ldrb	r3, [r1, #1]
 80025f8:	780a      	ldrb	r2, [r1, #0]
 80025fa:	2b01      	cmp	r3, #1
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80025fc:	4604      	mov	r4, r0
 80025fe:	460e      	mov	r6, r1
 8002600:	f04f 0320 	mov.w	r3, #32
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 8002604:	d131      	bne.n	800266a <USB_DeactivateDedicatedEndpoint+0x76>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 8002606:	f44f 6110 	mov.w	r1, #2304	; 0x900
 800260a:	fb13 1202 	smlabb	r2, r3, r2, r1
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 800260e:	4f2f      	ldr	r7, [pc, #188]	; (80026cc <USB_DeactivateDedicatedEndpoint+0xd8>)
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 8002610:	5810      	ldr	r0, [r2, r0]
 8002612:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8002616:	5110      	str	r0, [r2, r4]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002618:	7832      	ldrb	r2, [r6, #0]
 800261a:	fb13 1202 	smlabb	r2, r3, r2, r1
 800261e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002622:	5110      	str	r0, [r2, r4]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8002624:	7832      	ldrb	r2, [r6, #0]
 8002626:	fb13 1202 	smlabb	r2, r3, r2, r1
 800262a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800262e:	5110      	str	r0, [r2, r4]
    
    do
    {
      if (++count > 200000U)
 8002630:	3f01      	subs	r7, #1
 8002632:	d101      	bne.n	8002638 <USB_DeactivateDedicatedEndpoint+0x44>
      {
        return HAL_TIMEOUT;
 8002634:	2003      	movs	r0, #3
 8002636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8002638:	7832      	ldrb	r2, [r6, #0]
 800263a:	fb13 1202 	smlabb	r2, r3, r2, r1
 800263e:	4422      	add	r2, r4
 8002640:	6890      	ldr	r0, [r2, #8]
 8002642:	f010 4580 	ands.w	r5, r0, #1073741824	; 0x40000000
 8002646:	d1f3      	bne.n	8002630 <USB_DeactivateDedicatedEndpoint+0x3c>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8002648:	2110      	movs	r1, #16
 800264a:	4620      	mov	r0, r4
 800264c:	f7ff ff4a 	bl	80024e4 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8002650:	7833      	ldrb	r3, [r6, #0]
 8002652:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
 8002656:	2201      	movs	r2, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	b29b      	uxth	r3, r3
 800265e:	ea21 0303 	bic.w	r3, r1, r3
 8002662:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
  }
  return HAL_OK;
 8002666:	4628      	mov	r0, r5
 8002668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  
  }
  else /* Disable the OUT endpoint */
  {
    
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 800266a:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 800266e:	fb13 1202 	smlabb	r2, r3, r2, r1
    
    /* sets the NAK bit for the OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
    
    /* Disable OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8002672:	4d16      	ldr	r5, [pc, #88]	; (80026cc <USB_DeactivateDedicatedEndpoint+0xd8>)
  
  }
  else /* Disable the OUT endpoint */
  {
    
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8002674:	5880      	ldr	r0, [r0, r2]
 8002676:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800267a:	50a0      	str	r0, [r4, r2]
    
    /* sets the NAK bit for the OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800267c:	7832      	ldrb	r2, [r6, #0]
 800267e:	fb13 1202 	smlabb	r2, r3, r2, r1
 8002682:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002686:	50a0      	str	r0, [r4, r2]
    
    /* Disable OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8002688:	7832      	ldrb	r2, [r6, #0]
 800268a:	fb13 1202 	smlabb	r2, r3, r2, r1
 800268e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002692:	50a0      	str	r0, [r4, r2]
    
    do
    {
      if (++count > 200000U)
 8002694:	3d01      	subs	r5, #1
 8002696:	d0cd      	beq.n	8002634 <USB_DeactivateDedicatedEndpoint+0x40>
        return HAL_TIMEOUT;
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8002698:	7832      	ldrb	r2, [r6, #0]
 800269a:	fb13 1202 	smlabb	r2, r3, r2, r1
 800269e:	4422      	add	r2, r4
 80026a0:	6890      	ldr	r0, [r2, #8]
 80026a2:	f010 0010 	ands.w	r0, r0, #16
 80026a6:	d1f5      	bne.n	8002694 <USB_DeactivateDedicatedEndpoint+0xa0>
    
    /* Set the "Clear the Global OUT NAK bit" to disable global OUT NAK mode */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026a8:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 80026ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026b0:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 80026b4:	7831      	ldrb	r1, [r6, #0]
 80026b6:	f8d4 281c 	ldr.w	r2, [r4, #2076]	; 0x81c
 80026ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026be:	408b      	lsls	r3, r1
 80026c0:	ea22 0303 	bic.w	r3, r2, r3
 80026c4:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
  }
  return HAL_OK;

}
 80026c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026ca:	bf00      	nop
 80026cc:	00030d41 	.word	0x00030d41

080026d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80026d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 80026d4:	784b      	ldrb	r3, [r1, #1]
 80026d6:	780c      	ldrb	r4, [r1, #0]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	f04f 0520 	mov.w	r5, #32
 80026de:	694b      	ldr	r3, [r1, #20]
 80026e0:	f040 809b 	bne.w	800281a <USB_EPStartXfer+0x14a>
 80026e4:	f44f 6610 	mov.w	r6, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80026e8:	fb15 6404 	smlabb	r4, r5, r4, r6
 80026ec:	4404      	add	r4, r0
 80026ee:	6927      	ldr	r7, [r4, #16]
  
  /* IN endpoint */
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80026f0:	b9ab      	cbnz	r3, 800271e <USB_EPStartXfer+0x4e>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80026f2:	f027 57ff 	bic.w	r7, r7, #534773760	; 0x1fe00000
 80026f6:	f427 17c0 	bic.w	r7, r7, #1572864	; 0x180000
 80026fa:	6127      	str	r7, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80026fc:	780c      	ldrb	r4, [r1, #0]
 80026fe:	fb15 6404 	smlabb	r4, r5, r4, r6
 8002702:	4404      	add	r4, r0
 8002704:	6927      	ldr	r7, [r4, #16]
 8002706:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800270a:	6127      	str	r7, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 800270c:	780c      	ldrb	r4, [r1, #0]
 800270e:	fb15 6504 	smlabb	r5, r5, r4, r6
 8002712:	4405      	add	r5, r0
 8002714:	692c      	ldr	r4, [r5, #16]
 8002716:	0ce4      	lsrs	r4, r4, #19
 8002718:	04e4      	lsls	r4, r4, #19
 800271a:	612c      	str	r4, [r5, #16]
 800271c:	e03f      	b.n	800279e <USB_EPStartXfer+0xce>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800271e:	0cff      	lsrs	r7, r7, #19
 8002720:	04ff      	lsls	r7, r7, #19
 8002722:	6127      	str	r7, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002724:	780c      	ldrb	r4, [r1, #0]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8002726:	f8d1 c008 	ldr.w	ip, [r1, #8]
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800272a:	fb15 6404 	smlabb	r4, r5, r4, r6
 800272e:	4404      	add	r4, r0
 8002730:	6927      	ldr	r7, [r4, #16]
 8002732:	f027 57ff 	bic.w	r7, r7, #534773760	; 0x1fe00000
 8002736:	f427 17c0 	bic.w	r7, r7, #1572864	; 0x180000
 800273a:	6127      	str	r7, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 800273c:	780f      	ldrb	r7, [r1, #0]
 800273e:	fb15 6707 	smlabb	r7, r5, r7, r6
 8002742:	4407      	add	r7, r0
 8002744:	eb03 040c 	add.w	r4, r3, ip
 8002748:	3c01      	subs	r4, #1
 800274a:	fbb4 f4fc 	udiv	r4, r4, ip
 800274e:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 8002904 <USB_EPStartXfer+0x234>
 8002752:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8002756:	04e4      	lsls	r4, r4, #19
 8002758:	ea04 0c0c 	and.w	ip, r4, ip
 800275c:	ea4c 040e 	orr.w	r4, ip, lr
 8002760:	613c      	str	r4, [r7, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8002762:	780c      	ldrb	r4, [r1, #0]
 8002764:	fb15 6404 	smlabb	r4, r5, r4, r6
 8002768:	4404      	add	r4, r0
 800276a:	f3c3 0e12 	ubfx	lr, r3, #0, #19
 800276e:	6927      	ldr	r7, [r4, #16]
 8002770:	ea4e 0707 	orr.w	r7, lr, r7
 8002774:	6127      	str	r7, [r4, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 8002776:	78cc      	ldrb	r4, [r1, #3]
 8002778:	2c01      	cmp	r4, #1
 800277a:	f040 80ba 	bne.w	80028f2 <USB_EPStartXfer+0x222>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 800277e:	780c      	ldrb	r4, [r1, #0]
 8002780:	fb15 6404 	smlabb	r4, r5, r4, r6
 8002784:	4404      	add	r4, r0
 8002786:	6927      	ldr	r7, [r4, #16]
 8002788:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 800278c:	6127      	str	r7, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 800278e:	780c      	ldrb	r4, [r1, #0]
 8002790:	fb15 6504 	smlabb	r5, r5, r4, r6
 8002794:	4405      	add	r5, r0
 8002796:	692c      	ldr	r4, [r5, #16]
 8002798:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800279c:	612c      	str	r4, [r5, #16]
      }       
    }

    if (dma == 1U)
 800279e:	2a01      	cmp	r2, #1
 80027a0:	d106      	bne.n	80027b0 <USB_EPStartXfer+0xe0>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80027a2:	780c      	ldrb	r4, [r1, #0]
 80027a4:	690d      	ldr	r5, [r1, #16]
 80027a6:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 80027aa:	f8c4 5914 	str.w	r5, [r4, #2324]	; 0x914
 80027ae:	e00b      	b.n	80027c8 <USB_EPStartXfer+0xf8>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 80027b0:	78cc      	ldrb	r4, [r1, #3]
 80027b2:	2c01      	cmp	r4, #1
 80027b4:	d00b      	beq.n	80027ce <USB_EPStartXfer+0xfe>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80027b6:	b13b      	cbz	r3, 80027c8 <USB_EPStartXfer+0xf8>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 80027b8:	780f      	ldrb	r7, [r1, #0]
 80027ba:	f8d0 5834 	ldr.w	r5, [r0, #2100]	; 0x834
 80027be:	2401      	movs	r4, #1
 80027c0:	40bc      	lsls	r4, r7
 80027c2:	432c      	orrs	r4, r5
 80027c4:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80027c8:	78cc      	ldrb	r4, [r1, #3]
 80027ca:	2c01      	cmp	r4, #1
 80027cc:	d111      	bne.n	80027f2 <USB_EPStartXfer+0x122>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80027ce:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 80027d2:	f414 7f80 	tst.w	r4, #256	; 0x100
 80027d6:	780c      	ldrb	r4, [r1, #0]
 80027d8:	f04f 0520 	mov.w	r5, #32
 80027dc:	f44f 6610 	mov.w	r6, #2304	; 0x900
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80027e0:	fb15 6404 	smlabb	r4, r5, r4, r6
 80027e4:	5825      	ldr	r5, [r4, r0]
 80027e6:	bf0c      	ite	eq
 80027e8:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80027ec:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 80027f0:	5025      	str	r5, [r4, r0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80027f2:	780d      	ldrb	r5, [r1, #0]
 80027f4:	f44f 6410 	mov.w	r4, #2304	; 0x900
 80027f8:	eb04 1445 	add.w	r4, r4, r5, lsl #5
 80027fc:	5905      	ldr	r5, [r0, r4]
 80027fe:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8002802:	5105      	str	r5, [r0, r4]
    
    if (ep->type == EP_TYPE_ISOC)
 8002804:	78cc      	ldrb	r4, [r1, #3]
 8002806:	2c01      	cmp	r4, #1
 8002808:	d177      	bne.n	80028fa <USB_EPStartXfer+0x22a>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 800280a:	780c      	ldrb	r4, [r1, #0]
 800280c:	9200      	str	r2, [sp, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	4622      	mov	r2, r4
 8002812:	68c9      	ldr	r1, [r1, #12]
 8002814:	f000 f921 	bl	8002a5a <USB_WritePacket>
 8002818:	e06f      	b.n	80028fa <USB_EPStartXfer+0x22a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 800281a:	f44f 6630 	mov.w	r6, #2816	; 0xb00
 800281e:	fb15 6404 	smlabb	r4, r5, r4, r6
 8002822:	4404      	add	r4, r0
 8002824:	6927      	ldr	r7, [r4, #16]
 8002826:	0cff      	lsrs	r7, r7, #19
 8002828:	04ff      	lsls	r7, r7, #19
 800282a:	6127      	str	r7, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800282c:	780c      	ldrb	r4, [r1, #0]
 800282e:	fb15 6404 	smlabb	r4, r5, r4, r6
 8002832:	4404      	add	r4, r0
 8002834:	6927      	ldr	r7, [r4, #16]
 8002836:	f027 57ff 	bic.w	r7, r7, #534773760	; 0x1fe00000
 800283a:	f427 17c0 	bic.w	r7, r7, #1572864	; 0x180000
 800283e:	6127      	str	r7, [r4, #16]
 8002840:	780c      	ldrb	r4, [r1, #0]
 8002842:	688f      	ldr	r7, [r1, #8]

    if (ep->xfer_len == 0U)
 8002844:	b983      	cbnz	r3, 8002868 <USB_EPStartXfer+0x198>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002846:	fb15 6404 	smlabb	r4, r5, r4, r6
 800284a:	4404      	add	r4, r0
 800284c:	f3c7 0712 	ubfx	r7, r7, #0, #19
 8002850:	6923      	ldr	r3, [r4, #16]
 8002852:	431f      	orrs	r7, r3
 8002854:	6127      	str	r7, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8002856:	780b      	ldrb	r3, [r1, #0]
 8002858:	fb15 6503 	smlabb	r5, r5, r3, r6
 800285c:	4405      	add	r5, r0
 800285e:	692b      	ldr	r3, [r5, #16]
 8002860:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002864:	612b      	str	r3, [r5, #16]
 8002866:	e01d      	b.n	80028a4 <USB_EPStartXfer+0x1d4>
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8002868:	fb15 6404 	smlabb	r4, r5, r4, r6
 800286c:	4404      	add	r4, r0
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 800286e:	443b      	add	r3, r7
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8002870:	f8df c090 	ldr.w	ip, [pc, #144]	; 8002904 <USB_EPStartXfer+0x234>
 8002874:	f8d4 e010 	ldr.w	lr, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8002878:	3b01      	subs	r3, #1
 800287a:	fbb3 f3f7 	udiv	r3, r3, r7
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 800287e:	ea4f 48c3 	mov.w	r8, r3, lsl #19
 8002882:	ea08 0c0c 	and.w	ip, r8, ip
 8002886:	ea4c 0e0e 	orr.w	lr, ip, lr
 800288a:	f8c4 e010 	str.w	lr, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 800288e:	780c      	ldrb	r4, [r1, #0]
 8002890:	fb15 6504 	smlabb	r5, r5, r4, r6
 8002894:	4405      	add	r5, r0
 8002896:	b29b      	uxth	r3, r3
 8002898:	692c      	ldr	r4, [r5, #16]
 800289a:	435f      	muls	r7, r3
 800289c:	f3c7 0712 	ubfx	r7, r7, #0, #19
 80028a0:	4327      	orrs	r7, r4
 80028a2:	612f      	str	r7, [r5, #16]
    }

    if (dma == 1U)
 80028a4:	2a01      	cmp	r2, #1
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 80028a6:	bf01      	itttt	eq
 80028a8:	780b      	ldrbeq	r3, [r1, #0]
 80028aa:	68ca      	ldreq	r2, [r1, #12]
 80028ac:	eb00 1343 	addeq.w	r3, r0, r3, lsl #5
 80028b0:	f8c3 2b14 	streq.w	r2, [r3, #2836]	; 0xb14
    }
    
    if (ep->type == EP_TYPE_ISOC)
 80028b4:	78cb      	ldrb	r3, [r1, #3]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d111      	bne.n	80028de <USB_EPStartXfer+0x20e>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80028ba:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80028be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80028c2:	780b      	ldrb	r3, [r1, #0]
 80028c4:	f04f 0220 	mov.w	r2, #32
 80028c8:	f44f 6430 	mov.w	r4, #2816	; 0xb00
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80028cc:	fb12 4303 	smlabb	r3, r2, r3, r4
 80028d0:	58c2      	ldr	r2, [r0, r3]
 80028d2:	bf0c      	ite	eq
 80028d4:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80028d8:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 80028dc:	50c2      	str	r2, [r0, r3]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80028de:	780a      	ldrb	r2, [r1, #0]
 80028e0:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 80028e4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80028e8:	58c2      	ldr	r2, [r0, r3]
 80028ea:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80028ee:	50c2      	str	r2, [r0, r3]
  }
  return HAL_OK;
 80028f0:	e003      	b.n	80028fa <USB_EPStartXfer+0x22a>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 80028f2:	2a01      	cmp	r2, #1
 80028f4:	f47f af5f 	bne.w	80027b6 <USB_EPStartXfer+0xe6>
 80028f8:	e753      	b.n	80027a2 <USB_EPStartXfer+0xd2>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 80028fa:	2000      	movs	r0, #0
 80028fc:	b002      	add	sp, #8
 80028fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002902:	bf00      	nop
 8002904:	1ff80000 	.word	0x1ff80000

08002908 <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8002908:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* IN endpoint */
  if (ep->is_in == 1U)
 800290a:	784b      	ldrb	r3, [r1, #1]
 800290c:	694d      	ldr	r5, [r1, #20]
 800290e:	2b01      	cmp	r3, #1
 8002910:	f04f 0420 	mov.w	r4, #32
 8002914:	780b      	ldrb	r3, [r1, #0]
 8002916:	d162      	bne.n	80029de <USB_EP0StartXfer+0xd6>
 8002918:	f44f 6610 	mov.w	r6, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800291c:	fb14 6303 	smlabb	r3, r4, r3, r6
 8002920:	4403      	add	r3, r0
{
  /* IN endpoint */
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8002922:	b9b5      	cbnz	r5, 8002952 <USB_EP0StartXfer+0x4a>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002924:	691d      	ldr	r5, [r3, #16]
 8002926:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800292a:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800292e:	611d      	str	r5, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8002930:	780b      	ldrb	r3, [r1, #0]
 8002932:	fb14 6303 	smlabb	r3, r4, r3, r6
 8002936:	4403      	add	r3, r0
 8002938:	691d      	ldr	r5, [r3, #16]
 800293a:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800293e:	611d      	str	r5, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8002940:	780b      	ldrb	r3, [r1, #0]
 8002942:	fb14 6403 	smlabb	r4, r4, r3, r6
 8002946:	4404      	add	r4, r0
 8002948:	6923      	ldr	r3, [r4, #16]
 800294a:	0cdb      	lsrs	r3, r3, #19
 800294c:	04db      	lsls	r3, r3, #19
 800294e:	6123      	str	r3, [r4, #16]
 8002950:	e026      	b.n	80029a0 <USB_EP0StartXfer+0x98>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002952:	691f      	ldr	r7, [r3, #16]
 8002954:	0cff      	lsrs	r7, r7, #19
 8002956:	04ff      	lsls	r7, r7, #19
 8002958:	611f      	str	r7, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800295a:	780b      	ldrb	r3, [r1, #0]
 800295c:	fb14 6403 	smlabb	r4, r4, r3, r6
 8002960:	4404      	add	r4, r0
 8002962:	6923      	ldr	r3, [r4, #16]
 8002964:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002968:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800296c:	6123      	str	r3, [r4, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 800296e:	688b      	ldr	r3, [r1, #8]
 8002970:	429d      	cmp	r5, r3
      {
        ep->xfer_len = ep->maxpacket;
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8002972:	780d      	ldrb	r5, [r1, #0]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
      
      if(ep->xfer_len > ep->maxpacket)
      {
        ep->xfer_len = ep->maxpacket;
 8002974:	bf88      	it	hi
 8002976:	614b      	strhi	r3, [r1, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8002978:	2420      	movs	r4, #32
 800297a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800297e:	fb14 3505 	smlabb	r5, r4, r5, r3
 8002982:	4405      	add	r5, r0
 8002984:	692e      	ldr	r6, [r5, #16]
 8002986:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800298a:	612e      	str	r6, [r5, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800298c:	780d      	ldrb	r5, [r1, #0]
 800298e:	fb14 3305 	smlabb	r3, r4, r5, r3
 8002992:	4403      	add	r3, r0
 8002994:	694c      	ldr	r4, [r1, #20]
 8002996:	691d      	ldr	r5, [r3, #16]
 8002998:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800299c:	432c      	orrs	r4, r5
 800299e:	611c      	str	r4, [r3, #16]
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 80029a0:	780c      	ldrb	r4, [r1, #0]
 80029a2:	2320      	movs	r3, #32
 80029a4:	f44f 6610 	mov.w	r6, #2304	; 0x900
 80029a8:	fb13 6404 	smlabb	r4, r3, r4, r6
    
    if (dma == 1)
 80029ac:	2a01      	cmp	r2, #1
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 80029ae:	5825      	ldr	r5, [r4, r0]
 80029b0:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 80029b4:	5025      	str	r5, [r4, r0]
    
    if (dma == 1)
 80029b6:	d106      	bne.n	80029c6 <USB_EP0StartXfer+0xbe>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80029b8:	780a      	ldrb	r2, [r1, #0]
 80029ba:	fb13 6302 	smlabb	r3, r3, r2, r6
 80029be:	4418      	add	r0, r3
 80029c0:	690b      	ldr	r3, [r1, #16]
 80029c2:	6143      	str	r3, [r0, #20]
 80029c4:	e047      	b.n	8002a56 <USB_EP0StartXfer+0x14e>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80029c6:	694b      	ldr	r3, [r1, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d044      	beq.n	8002a56 <USB_EP0StartXfer+0x14e>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 80029cc:	7809      	ldrb	r1, [r1, #0]
 80029ce:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 80029d2:	2301      	movs	r3, #1
 80029d4:	408b      	lsls	r3, r1
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80029dc:	e03b      	b.n	8002a56 <USB_EP0StartXfer+0x14e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80029de:	f44f 6730 	mov.w	r7, #2816	; 0xb00
 80029e2:	fb14 7303 	smlabb	r3, r4, r3, r7
 80029e6:	4403      	add	r3, r0
 80029e8:	691e      	ldr	r6, [r3, #16]
 80029ea:	0cf6      	lsrs	r6, r6, #19
 80029ec:	04f6      	lsls	r6, r6, #19
 80029ee:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80029f0:	780b      	ldrb	r3, [r1, #0]
 80029f2:	fb14 7303 	smlabb	r3, r4, r3, r7
 80029f6:	4403      	add	r3, r0
 80029f8:	691e      	ldr	r6, [r3, #16]
 80029fa:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 80029fe:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8002a02:	611e      	str	r6, [r3, #16]
 8002a04:	688e      	ldr	r6, [r1, #8]
      
    if (ep->xfer_len > 0U)
 8002a06:	b105      	cbz	r5, 8002a0a <USB_EP0StartXfer+0x102>
    {
      ep->xfer_len = ep->maxpacket;
 8002a08:	614e      	str	r6, [r1, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8002a0a:	780b      	ldrb	r3, [r1, #0]
 8002a0c:	f44f 6530 	mov.w	r5, #2816	; 0xb00
 8002a10:	fb14 5303 	smlabb	r3, r4, r3, r5
 8002a14:	4403      	add	r3, r0
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8002a16:	f3c6 0612 	ubfx	r6, r6, #0, #19
    if (ep->xfer_len > 0U)
    {
      ep->xfer_len = ep->maxpacket;
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8002a1a:	691f      	ldr	r7, [r3, #16]
 8002a1c:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 8002a20:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8002a22:	780b      	ldrb	r3, [r1, #0]
 8002a24:	fb14 5403 	smlabb	r4, r4, r3, r5
 8002a28:	4404      	add	r4, r0
    

    if (dma == 1U)
 8002a2a:	2a01      	cmp	r2, #1
    {
      ep->xfer_len = ep->maxpacket;
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8002a2c:	6923      	ldr	r3, [r4, #16]
 8002a2e:	ea46 0603 	orr.w	r6, r6, r3
 8002a32:	6126      	str	r6, [r4, #16]
    

    if (dma == 1U)
 8002a34:	d106      	bne.n	8002a44 <USB_EP0StartXfer+0x13c>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002a36:	780b      	ldrb	r3, [r1, #0]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	fb12 5303 	smlabb	r3, r2, r3, r5
 8002a3e:	4403      	add	r3, r0
 8002a40:	68ca      	ldr	r2, [r1, #12]
 8002a42:	615a      	str	r2, [r3, #20]
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8002a44:	780a      	ldrb	r2, [r1, #0]
 8002a46:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8002a4a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8002a4e:	58c2      	ldr	r2, [r0, r3]
 8002a50:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002a54:	50c2      	str	r2, [r0, r3]
  }
  return HAL_OK;
}
 8002a56:	2000      	movs	r0, #0
 8002a58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a5a <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8002a5a:	b510      	push	{r4, lr}
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8002a5c:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8002a60:	b96c      	cbnz	r4, 8002a7e <USB_WritePacket+0x24>
 8002a62:	3303      	adds	r3, #3
  {
    count32b =  (len + 3U) / 4U;
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002a64:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8002a68:	f023 0303 	bic.w	r3, r3, #3
 8002a6c:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8002a70:	440b      	add	r3, r1
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
  {
    count32b =  (len + 3U) / 4U;
    for (i = 0U; i < count32b; i++, src += 4U)
 8002a72:	4299      	cmp	r1, r3
 8002a74:	d003      	beq.n	8002a7e <USB_WritePacket+0x24>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002a76:	f851 0b04 	ldr.w	r0, [r1], #4
 8002a7a:	6010      	str	r0, [r2, #0]
 8002a7c:	e7f9      	b.n	8002a72 <USB_WritePacket+0x18>
    }
  }
  return HAL_OK;
}
 8002a7e:	2000      	movs	r0, #0
 8002a80:	bd10      	pop	{r4, pc}

08002a82 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8002a82:	3203      	adds	r2, #3
 8002a84:	f022 0203 	bic.w	r2, r2, #3
 8002a88:	440a      	add	r2, r1
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8002a8a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8002a8e:	4291      	cmp	r1, r2
 8002a90:	d003      	beq.n	8002a9a <USB_ReadPacket+0x18>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8002a92:	6803      	ldr	r3, [r0, #0]
 8002a94:	f841 3b04 	str.w	r3, [r1], #4
 8002a98:	e7f9      	b.n	8002a8e <USB_ReadPacket+0xc>
    
  }
  return ((void *)dest);
}
 8002a9a:	4608      	mov	r0, r1
 8002a9c:	4770      	bx	lr

08002a9e <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8002a9e:	784b      	ldrb	r3, [r1, #1]
 8002aa0:	2b01      	cmp	r3, #1
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 8002aa2:	b510      	push	{r4, lr}
 8002aa4:	f04f 0220 	mov.w	r2, #32
 8002aa8:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8002aaa:	d114      	bne.n	8002ad6 <USB_EPSetStall+0x38>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8002aac:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002ab0:	fb12 3304 	smlabb	r3, r2, r4, r3
 8002ab4:	58c2      	ldr	r2, [r0, r3]
 8002ab6:	2a00      	cmp	r2, #0
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 8002ab8:	bfa2      	ittt	ge
 8002aba:	58c2      	ldrge	r2, [r0, r3]
 8002abc:	f022 4280 	bicge.w	r2, r2, #1073741824	; 0x40000000
 8002ac0:	50c2      	strge	r2, [r0, r3]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8002ac2:	780a      	ldrb	r2, [r1, #0]
 8002ac4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002ac8:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8002acc:	58c2      	ldr	r2, [r0, r3]
 8002ace:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002ad2:	50c2      	str	r2, [r0, r3]
 8002ad4:	e013      	b.n	8002afe <USB_EPSetStall+0x60>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8002ad6:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8002ada:	fb12 3304 	smlabb	r3, r2, r4, r3
 8002ade:	58c2      	ldr	r2, [r0, r3]
 8002ae0:	2a00      	cmp	r2, #0
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8002ae2:	bfa2      	ittt	ge
 8002ae4:	58c2      	ldrge	r2, [r0, r3]
 8002ae6:	f022 4280 	bicge.w	r2, r2, #1073741824	; 0x40000000
 8002aea:	50c2      	strge	r2, [r0, r3]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002aec:	780a      	ldrb	r2, [r1, #0]
 8002aee:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8002af2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8002af6:	58c2      	ldr	r2, [r0, r3]
 8002af8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002afc:	50c2      	str	r2, [r0, r3]
  }
  return HAL_OK;
}
 8002afe:	2000      	movs	r0, #0
 8002b00:	bd10      	pop	{r4, pc}

08002b02 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8002b02:	784b      	ldrb	r3, [r1, #1]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	780b      	ldrb	r3, [r1, #0]
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002b08:	b530      	push	{r4, r5, lr}
 8002b0a:	f04f 0220 	mov.w	r2, #32
  if (ep->is_in == 1U)
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b0e:	bf0c      	ite	eq
 8002b10:	f44f 6510 	moveq.w	r5, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b14:	f44f 6530 	movne.w	r5, #2816	; 0xb00
 8002b18:	fb12 5303 	smlabb	r3, r2, r3, r5
 8002b1c:	581c      	ldr	r4, [r3, r0]
 8002b1e:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
 8002b22:	501c      	str	r4, [r3, r0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8002b24:	78cb      	ldrb	r3, [r1, #3]
 8002b26:	3b02      	subs	r3, #2
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d806      	bhi.n	8002b3a <USB_EPClearStall+0x38>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002b2c:	780b      	ldrb	r3, [r1, #0]
 8002b2e:	fb12 5203 	smlabb	r2, r2, r3, r5
 8002b32:	5813      	ldr	r3, [r2, r0]
 8002b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b38:	5013      	str	r3, [r2, r0]
    }    
  }
  return HAL_OK;
}
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	bd30      	pop	{r4, r5, pc}

08002b3e <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8002b3e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002b42:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b46:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8002b4a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002b4e:	0109      	lsls	r1, r1, #4
 8002b50:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8002b54:	430b      	orrs	r3, r1
 8002b56:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	4770      	bx	lr

08002b5e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8002b5e:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8002b60:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002b64:	f023 0302 	bic.w	r3, r3, #2
 8002b68:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002b6c:	2003      	movs	r0, #3
 8002b6e:	f7fd fb77 	bl	8000260 <HAL_Delay>
  
  return HAL_OK;  
}
 8002b72:	2000      	movs	r0, #0
 8002b74:	bd08      	pop	{r3, pc}

08002b76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8002b76:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8002b78:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002b7c:	f043 0302 	orr.w	r3, r3, #2
 8002b80:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002b84:	2003      	movs	r0, #3
 8002b86:	f7fd fb6b 	bl	8000260 <HAL_Delay>
  
  return HAL_OK;  
}
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	bd08      	pop	{r3, pc}

08002b8e <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8002b8e:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8002b90:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8002b92:	4010      	ands	r0, r2
 8002b94:	4770      	bx	lr

08002b96 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8002b96:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8002b9a:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  v &= USBx_DEVICE->DAINTMSK;
 8002b9e:	69db      	ldr	r3, [r3, #28]
  return ((v & 0xffff0000U) >> 16U);
 8002ba0:	4018      	ands	r0, r3
}
 8002ba2:	0c00      	lsrs	r0, r0, #16
 8002ba4:	4770      	bx	lr

08002ba6 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8002ba6:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8002baa:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  v &= USBx_DEVICE->DAINTMSK;
 8002bae:	69db      	ldr	r3, [r3, #28]
  return ((v & 0xFFFFU));
 8002bb0:	4018      	ands	r0, r3
}
 8002bb2:	b280      	uxth	r0, r0
 8002bb4:	4770      	bx	lr

08002bb6 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8002bb6:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8002bba:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 8002bbe:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8002bc2:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8002bc4:	6940      	ldr	r0, [r0, #20]
  return v;
}
 8002bc6:	4010      	ands	r0, r2
 8002bc8:	4770      	bx	lr

08002bca <USB_ReadDevInEPInterrupt>:
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8002bca:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8002bce:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8002bd2:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8002bd6:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  return v;
 8002bda:	fa23 f101 	lsr.w	r1, r3, r1
 8002bde:	01c9      	lsls	r1, r1, #7
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
  emp = USBx_DEVICE->DIEPEMPMSK;
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8002be0:	6880      	ldr	r0, [r0, #8]
  return v;
 8002be2:	b2c9      	uxtb	r1, r1
 8002be4:	4311      	orrs	r1, r2
}
 8002be6:	4008      	ands	r0, r1
 8002be8:	4770      	bx	lr

08002bea <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8002bea:	6940      	ldr	r0, [r0, #20]
}
 8002bec:	f000 0001 	and.w	r0, r0, #1
 8002bf0:	4770      	bx	lr

08002bf2 <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8002bf2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002bf6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002bfa:	f023 0307 	bic.w	r3, r3, #7
 8002bfe:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002c02:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	f002 0206 	and.w	r2, r2, #6
 8002c0c:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8002c0e:	bf02      	ittt	eq
 8002c10:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8002c14:	f042 0203 	orreq.w	r2, r2, #3
 8002c18:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c22:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8002c24:	2000      	movs	r0, #0
 8002c26:	4770      	bx	lr

08002c28 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8002c28:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002c2a:	2400      	movs	r4, #0
 8002c2c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8002c30:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002c34:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002c38:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8002c3c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002c40:	f044 0418 	orr.w	r4, r4, #24
 8002c44:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8002c48:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 8002c4c:	2901      	cmp	r1, #1
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002c4e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8002c52:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
  
  if (dma == 1U)
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8002c56:	bf08      	it	eq
 8002c58:	f04f 2380 	moveq.w	r3, #2147516416	; 0x80008000
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8002c5c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8002c60:	bf04      	itt	eq
 8002c62:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8002c66:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	bd10      	pop	{r4, pc}
	...

08002c70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002c70:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002c72:	3b01      	subs	r3, #1
 8002c74:	d101      	bne.n	8002c7a <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8002c76:	2003      	movs	r0, #3
 8002c78:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002c7a:	6902      	ldr	r2, [r0, #16]
 8002c7c:	2a00      	cmp	r2, #0
 8002c7e:	daf8      	bge.n	8002c72 <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002c80:	6903      	ldr	r3, [r0, #16]
 8002c82:	4a06      	ldr	r2, [pc, #24]	; (8002c9c <USB_CoreReset+0x2c>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002c8a:	3a01      	subs	r2, #1
 8002c8c:	d0f3      	beq.n	8002c76 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002c8e:	6903      	ldr	r3, [r0, #16]
 8002c90:	f013 0301 	ands.w	r3, r3, #1
 8002c94:	d1f9      	bne.n	8002c8a <USB_CoreReset+0x1a>
  
  return HAL_OK;
 8002c96:	4618      	mov	r0, r3
}
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	00030d41 	.word	0x00030d41

08002ca0 <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8002ca0:	2320      	movs	r3, #32
 8002ca2:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 8002ca4:	4800      	ldr	r0, [pc, #0]	; (8002ca8 <USBD_MSC_GetHSCfgDesc+0x8>)
 8002ca6:	4770      	bx	lr
 8002ca8:	2000002c 	.word	0x2000002c

08002cac <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8002cac:	2320      	movs	r3, #32
 8002cae:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 8002cb0:	4800      	ldr	r0, [pc, #0]	; (8002cb4 <USBD_MSC_GetFSCfgDesc+0x8>)
 8002cb2:	4770      	bx	lr
 8002cb4:	20000084 	.word	0x20000084

08002cb8 <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 8002cb8:	2320      	movs	r3, #32
 8002cba:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 8002cbc:	4800      	ldr	r0, [pc, #0]	; (8002cc0 <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 8002cbe:	4770      	bx	lr
 8002cc0:	20000000 	.word	0x20000000

08002cc4 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8002cc4:	230a      	movs	r3, #10
 8002cc6:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 8002cc8:	4800      	ldr	r0, [pc, #0]	; (8002ccc <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 8002cca:	4770      	bx	lr
 8002ccc:	20000020 	.word	0x20000020

08002cd0 <USBD_MSC_Init>:
uint8_t  USBD_MSC_Init (USBD_HandleTypeDef *pdev, 
                            uint8_t cfgidx)
{
  int16_t ret = 0;
   
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002cd0:	7c03      	ldrb	r3, [r0, #16]
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_Init (USBD_HandleTypeDef *pdev, 
                            uint8_t cfgidx)
{
 8002cd2:	b510      	push	{r4, lr}
 8002cd4:	4604      	mov	r4, r0
  int16_t ret = 0;
   
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002cd6:	b943      	cbnz	r3, 8002cea <USBD_MSC_Init+0x1a>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8002cd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cdc:	2202      	movs	r2, #2
 8002cde:	2101      	movs	r1, #1
 8002ce0:	f002 f95c 	bl	8004f9c <USBD_LL_OpenEP>
                   MSC_EPOUT_ADDR,
                   USBD_EP_TYPE_BULK,
                   MSC_MAX_HS_PACKET);
    
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8002ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ce8:	e005      	b.n	8002cf6 <USBD_MSC_Init+0x26>
                   MSC_MAX_HS_PACKET);  
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8002cea:	2340      	movs	r3, #64	; 0x40
 8002cec:	2202      	movs	r2, #2
 8002cee:	2101      	movs	r1, #1
 8002cf0:	f002 f954 	bl	8004f9c <USBD_LL_OpenEP>
                   MSC_EPOUT_ADDR,
                   USBD_EP_TYPE_BULK,
                   MSC_MAX_FS_PACKET);
    
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8002cf4:	2340      	movs	r3, #64	; 0x40
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	2181      	movs	r1, #129	; 0x81
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f002 f94e 	bl	8004f9c <USBD_LL_OpenEP>
                   MSC_EPIN_ADDR,
                   USBD_EP_TYPE_BULK,
                   MSC_MAX_FS_PACKET);  
  }
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 8002d00:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8002d04:	f002 fac4 	bl	8005290 <malloc>
 8002d08:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8002d0c:	b120      	cbz	r0, 8002d18 <USBD_MSC_Init+0x48>
    ret = 1; 
  }
  else
  {
    /* Init the BOT  layer */
    MSC_BOT_Init(pdev); 
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f000 f8b6 	bl	8002e80 <MSC_BOT_Init>
    ret = 0;
 8002d14:	2000      	movs	r0, #0
 8002d16:	bd10      	pop	{r4, pc}
  }
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 8002d18:	2001      	movs	r0, #1
    MSC_BOT_Init(pdev); 
    ret = 0;
  }
  
  return ret;
}
 8002d1a:	bd10      	pop	{r4, pc}

08002d1c <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_DeInit (USBD_HandleTypeDef *pdev, 
                              uint8_t cfgidx)
{
 8002d1c:	b510      	push	{r4, lr}
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev,
 8002d1e:	2101      	movs	r1, #1
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_DeInit (USBD_HandleTypeDef *pdev, 
                              uint8_t cfgidx)
{
 8002d20:	4604      	mov	r4, r0
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev,
 8002d22:	f002 f94b 	bl	8004fbc <USBD_LL_CloseEP>
                  MSC_EPOUT_ADDR);
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8002d26:	2181      	movs	r1, #129	; 0x81
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f002 f947 	bl	8004fbc <USBD_LL_CloseEP>
                  MSC_EPIN_ADDR);
  
  
    /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f000 f8d1 	bl	8002ed6 <MSC_BOT_DeInit>
  
  /* Free MSC Class Resources */
  if(pdev->pClassData != NULL)
 8002d34:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002d38:	b120      	cbz	r0, 8002d44 <USBD_MSC_DeInit+0x28>
  {
    USBD_free(pdev->pClassData);
 8002d3a:	f002 fab1 	bl	80052a0 <free>
    pdev->pClassData  = NULL; 
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  }
  return 0;
}
 8002d44:	2000      	movs	r0, #0
 8002d46:	bd10      	pop	{r4, pc}

08002d48 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t  USBD_MSC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8002d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002d4c:	780b      	ldrb	r3, [r1, #0]
* @param  req: USB request
* @retval status
*/
uint8_t  USBD_MSC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8002d4e:	f8d0 8218 	ldr.w	r8, [r0, #536]	; 0x218
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002d52:	f013 0460 	ands.w	r4, r3, #96	; 0x60
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t  USBD_MSC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8002d56:	4607      	mov	r7, r0
 8002d58:	460e      	mov	r6, r1
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002d5a:	d029      	beq.n	8002db0 <USBD_MSC_Setup+0x68>
 8002d5c:	2c20      	cmp	r4, #32
 8002d5e:	d15c      	bne.n	8002e1a <USBD_MSC_Setup+0xd2>
  {

  /* Class request */
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8002d60:	784a      	ldrb	r2, [r1, #1]
 8002d62:	2afe      	cmp	r2, #254	; 0xfe
 8002d64:	d002      	beq.n	8002d6c <USBD_MSC_Setup+0x24>
 8002d66:	2aff      	cmp	r2, #255	; 0xff
 8002d68:	d011      	beq.n	8002d8e <USBD_MSC_Setup+0x46>
 8002d6a:	e01d      	b.n	8002da8 <USBD_MSC_Setup+0x60>
    {
    case BOT_GET_MAX_LUN :

      if((req->wValue  == 0) && 
 8002d6c:	884c      	ldrh	r4, [r1, #2]
 8002d6e:	b984      	cbnz	r4, 8002d92 <USBD_MSC_Setup+0x4a>
 8002d70:	88cd      	ldrh	r5, [r1, #6]
 8002d72:	2d01      	cmp	r5, #1
 8002d74:	d10d      	bne.n	8002d92 <USBD_MSC_Setup+0x4a>
         (req->wLength == 1) &&
 8002d76:	061a      	lsls	r2, r3, #24
 8002d78:	d50b      	bpl.n	8002d92 <USBD_MSC_Setup+0x4a>
         ((req->bmRequest & 0x80) == 0x80))
      {
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8002d7a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	4798      	blx	r3
        USBD_CtlSendData (pdev,
 8002d82:	462a      	mov	r2, r5

      if((req->wValue  == 0) && 
         (req->wLength == 1) &&
         ((req->bmRequest & 0x80) == 0x80))
      {
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8002d84:	f8c8 0000 	str.w	r0, [r8]
        USBD_CtlSendData (pdev,
 8002d88:	4641      	mov	r1, r8
 8002d8a:	4638      	mov	r0, r7
 8002d8c:	e01b      	b.n	8002dc6 <USBD_MSC_Setup+0x7e>
         return USBD_FAIL; 
      }
      break;
      
    case BOT_RESET :
      if((req->wValue  == 0) && 
 8002d8e:	884a      	ldrh	r2, [r1, #2]
 8002d90:	b112      	cbz	r2, 8002d98 <USBD_MSC_Setup+0x50>
                          (uint8_t *)&hmsc->max_lun,
                          1);
      }
      else
      {
         USBD_CtlError(pdev , req);
 8002d92:	4631      	mov	r1, r6
 8002d94:	4638      	mov	r0, r7
 8002d96:	e007      	b.n	8002da8 <USBD_MSC_Setup+0x60>
         return USBD_FAIL; 
      }
      break;
      
    case BOT_RESET :
      if((req->wValue  == 0) && 
 8002d98:	88cc      	ldrh	r4, [r1, #6]
 8002d9a:	2c00      	cmp	r4, #0
 8002d9c:	d1f9      	bne.n	8002d92 <USBD_MSC_Setup+0x4a>
         (req->wLength == 0) &&
 8002d9e:	061b      	lsls	r3, r3, #24
 8002da0:	d4f7      	bmi.n	8002d92 <USBD_MSC_Setup+0x4a>
        ((req->bmRequest & 0x80) != 0x80))
      {      
         MSC_BOT_Reset(pdev);
 8002da2:	f000 f88d 	bl	8002ec0 <MSC_BOT_Reset>
      else
      {
         USBD_CtlError(pdev , req);
         return USBD_FAIL; 
      }
      break;
 8002da6:	e039      	b.n	8002e1c <USBD_MSC_Setup+0xd4>

    default:
       USBD_CtlError(pdev , req);
 8002da8:	f000 fd01 	bl	80037ae <USBD_CtlError>
       return USBD_FAIL; 
 8002dac:	2402      	movs	r4, #2
 8002dae:	e035      	b.n	8002e1c <USBD_MSC_Setup+0xd4>
    }
    break;
  /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8002db0:	784d      	ldrb	r5, [r1, #1]
 8002db2:	2d0a      	cmp	r5, #10
 8002db4:	d004      	beq.n	8002dc0 <USBD_MSC_Setup+0x78>
 8002db6:	2d0b      	cmp	r5, #11
 8002db8:	d008      	beq.n	8002dcc <USBD_MSC_Setup+0x84>
 8002dba:	2d01      	cmp	r5, #1
 8002dbc:	d12e      	bne.n	8002e1c <USBD_MSC_Setup+0xd4>
 8002dbe:	e009      	b.n	8002dd4 <USBD_MSC_Setup+0x8c>
    {
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f108 0104 	add.w	r1, r8, #4
 8002dc6:	f000 feaa 	bl	8003b1e <USBD_CtlSendData>
                        (uint8_t *)&hmsc->interface,
                        1);
      break;
 8002dca:	e027      	b.n	8002e1c <USBD_MSC_Setup+0xd4>
      
    case USB_REQ_SET_INTERFACE :
      hmsc->interface = (uint8_t)(req->wValue);
 8002dcc:	788b      	ldrb	r3, [r1, #2]
 8002dce:	f8c8 3004 	str.w	r3, [r8, #4]
      break;
 8002dd2:	e023      	b.n	8002e1c <USBD_MSC_Setup+0xd4>
    
    case USB_REQ_CLEAR_FEATURE:  
      
      /* Flush the FIFO and Clear the stall status */    
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8002dd4:	7909      	ldrb	r1, [r1, #4]
 8002dd6:	f002 f8ff 	bl	8004fd8 <USBD_LL_FlushEP>
      
      /* Reactivate the EP */      
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8002dda:	7931      	ldrb	r1, [r6, #4]
 8002ddc:	4638      	mov	r0, r7
 8002dde:	f002 f8ed 	bl	8004fbc <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 8002de2:	f996 3004 	ldrsb.w	r3, [r6, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	7c3b      	ldrb	r3, [r7, #16]
 8002dea:	da07      	bge.n	8002dfc <USBD_MSC_Setup+0xb4>
      {
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002dec:	b913      	cbnz	r3, 8002df4 <USBD_MSC_Setup+0xac>
        {
          /* Open EP IN */
          USBD_LL_OpenEP(pdev,
 8002dee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002df2:	e000      	b.n	8002df6 <USBD_MSC_Setup+0xae>
                         MSC_MAX_HS_PACKET);  
        }
        else
        {   
          /* Open EP IN */
          USBD_LL_OpenEP(pdev,
 8002df4:	2340      	movs	r3, #64	; 0x40
 8002df6:	2202      	movs	r2, #2
 8002df8:	2181      	movs	r1, #129	; 0x81
 8002dfa:	e006      	b.n	8002e0a <USBD_MSC_Setup+0xc2>
                         MSC_MAX_FS_PACKET);  
        }
      }
      else
      {
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002dfc:	b913      	cbnz	r3, 8002e04 <USBD_MSC_Setup+0xbc>
        {
          /* Open EP IN */
          USBD_LL_OpenEP(pdev,
 8002dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e02:	e000      	b.n	8002e06 <USBD_MSC_Setup+0xbe>
                         MSC_MAX_HS_PACKET);  
        }
        else
        {   
          /* Open EP IN */
          USBD_LL_OpenEP(pdev,
 8002e04:	2340      	movs	r3, #64	; 0x40
 8002e06:	2202      	movs	r2, #2
 8002e08:	4629      	mov	r1, r5
 8002e0a:	4638      	mov	r0, r7
 8002e0c:	f002 f8c6 	bl	8004f9c <USBD_LL_OpenEP>
                         MSC_MAX_FS_PACKET);  
        }
      }
      
      /* Handle BOT error */
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8002e10:	7931      	ldrb	r1, [r6, #4]
 8002e12:	4638      	mov	r0, r7
 8002e14:	f000 f908 	bl	8003028 <MSC_BOT_CplClrFeature>
      break;
 8002e18:	e000      	b.n	8002e1c <USBD_MSC_Setup+0xd4>
    break;
   
  default:
    break;
  }
  return 0;
 8002e1a:	2400      	movs	r4, #0
}
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002e22 <USBD_MSC_DataIn>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataIn (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 8002e22:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 8002e24:	f000 f878 	bl	8002f18 <MSC_BOT_DataIn>
  return 0;
}
 8002e28:	2000      	movs	r0, #0
 8002e2a:	bd08      	pop	{r3, pc}

08002e2c <USBD_MSC_DataOut>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataOut (USBD_HandleTypeDef *pdev, 
                               uint8_t epnum)
{
 8002e2c:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 8002e2e:	f000 f88f 	bl	8002f50 <MSC_BOT_DataOut>
  return 0;
}
 8002e32:	2000      	movs	r0, #0
 8002e34:	bd08      	pop	{r3, pc}

08002e36 <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 8002e36:	b109      	cbz	r1, 8002e3c <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData= fops;
 8002e38:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
  }
  return 0;
}
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	4770      	bx	lr

08002e40 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8002e40:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8002e42:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if ((hmsc->cbw.bmFlags == 0) && 
 8002e46:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8002e4a:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  if ((hmsc->cbw.bmFlags == 0) && 
 8002e4c:	b93b      	cbnz	r3, 8002e5e <MSC_BOT_Abort+0x1e>
 8002e4e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002e52:	b123      	cbz	r3, 8002e5e <MSC_BOT_Abort+0x1e>
      (hmsc->cbw.dDataLength != 0) &&
 8002e54:	7a63      	ldrb	r3, [r4, #9]
 8002e56:	b913      	cbnz	r3, 8002e5e <MSC_BOT_Abort+0x1e>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 8002e58:	2101      	movs	r1, #1
 8002e5a:	f002 f8cb 	bl	8004ff4 <USBD_LL_StallEP>
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8002e5e:	2181      	movs	r1, #129	; 0x81
 8002e60:	4628      	mov	r0, r5
 8002e62:	f002 f8c7 	bl	8004ff4 <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8002e66:	7a63      	ldrb	r3, [r4, #9]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d108      	bne.n	8002e7e <MSC_BOT_Abort+0x3e>
  {
    USBD_LL_PrepareReceive (pdev,
 8002e6c:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8002e70:	4628      	mov	r0, r5
 8002e72:	231f      	movs	r3, #31
 8002e74:	2101      	movs	r1, #1
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
                      USBD_BOT_CBW_LENGTH);    
  }
}
 8002e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
  {
    USBD_LL_PrepareReceive (pdev,
 8002e7a:	f002 b907 	b.w	800508c <USBD_LL_PrepareReceive>
 8002e7e:	bd70      	pop	{r4, r5, r6, pc}

08002e80 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init (USBD_HandleTypeDef  *pdev)
{
 8002e80:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8002e82:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init (USBD_HandleTypeDef  *pdev)
{
 8002e86:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
    
  hmsc->bot_state  = USBD_BOT_IDLE;
 8002e88:	2000      	movs	r0, #0
 8002e8a:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8002e8c:	7268      	strb	r0, [r5, #9]
  
  hmsc->scsi_sense_tail = 0;
 8002e8e:	f885 025d 	strb.w	r0, [r5, #605]	; 0x25d
  hmsc->scsi_sense_head = 0;
 8002e92:	f885 025c 	strb.w	r0, [r5, #604]	; 0x25c
  
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 8002e96:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4798      	blx	r3
  
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	f002 f899 	bl	8004fd8 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8002ea6:	2181      	movs	r1, #129	; 0x81
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f002 f895 	bl	8004fd8 <USBD_LL_FlushEP>
  
  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev,
 8002eae:	f505 7203 	add.w	r2, r5, #524	; 0x20c
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	231f      	movs	r3, #31
 8002eb6:	2101      	movs	r1, #1
                          MSC_EPOUT_ADDR,
                          (uint8_t *)&hmsc->cbw,
                          USBD_BOT_CBW_LENGTH);    
}
 8002eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
  
  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev,
 8002ebc:	f002 b8e6 	b.w	800508c <USBD_LL_PrepareReceive>

08002ec0 <MSC_BOT_Reset>:
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset (USBD_HandleTypeDef  *pdev)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8002ec0:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
    
  hmsc->bot_state  = USBD_BOT_IDLE;
 8002ec4:	2300      	movs	r3, #0
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8002ec6:	2101      	movs	r1, #1
*/
void MSC_BOT_Reset (USBD_HandleTypeDef  *pdev)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
    
  hmsc->bot_state  = USBD_BOT_IDLE;
 8002ec8:	7213      	strb	r3, [r2, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8002eca:	7251      	strb	r1, [r2, #9]
  
  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev,
 8002ecc:	231f      	movs	r3, #31
 8002ece:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8002ed2:	f002 b8db 	b.w	800508c <USBD_LL_PrepareReceive>

08002ed6 <MSC_BOT_DeInit>:
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit (USBD_HandleTypeDef  *pdev)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8002ed6:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8002eda:	2200      	movs	r2, #0
 8002edc:	721a      	strb	r2, [r3, #8]
 8002ede:	4770      	bx	lr

08002ee0 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW (USBD_HandleTypeDef  *pdev,
                              uint8_t CSW_Status)
{
 8002ee0:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8002ee2:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <MSC_BOT_SendCSW+0x34>)
 8002ee8:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
  hmsc->bot_state = USBD_BOT_IDLE;
 8002eec:	2300      	movs	r3, #0
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW (USBD_HandleTypeDef  *pdev,
                              uint8_t CSW_Status)
{
 8002eee:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
  hmsc->csw.bStatus = CSW_Status;
 8002ef0:	f884 1238 	strb.w	r1, [r4, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8002ef4:	7223      	strb	r3, [r4, #8]
  
  USBD_LL_Transmit (pdev, 
 8002ef6:	f504 720b 	add.w	r2, r4, #556	; 0x22c
 8002efa:	230d      	movs	r3, #13
 8002efc:	2181      	movs	r1, #129	; 0x81
 8002efe:	f002 f8b7 	bl	8005070 <USBD_LL_Transmit>
             MSC_EPIN_ADDR, 
             (uint8_t *)&hmsc->csw, 
             USBD_BOT_CSW_LENGTH);
  
  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive (pdev,
 8002f02:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8002f06:	4628      	mov	r0, r5
 8002f08:	231f      	movs	r3, #31
 8002f0a:	2101      	movs	r1, #1
                    MSC_EPOUT_ADDR,
                    (uint8_t *)&hmsc->cbw, 
                    USBD_BOT_CBW_LENGTH);  
  
}
 8002f0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
             MSC_EPIN_ADDR, 
             (uint8_t *)&hmsc->csw, 
             USBD_BOT_CSW_LENGTH);
  
  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive (pdev,
 8002f10:	f002 b8bc 	b.w	800508c <USBD_LL_PrepareReceive>
 8002f14:	53425355 	.word	0x53425355

08002f18 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn (USBD_HandleTypeDef  *pdev, 
                     uint8_t epnum)
{
 8002f18:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8002f1a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  switch (hmsc->bot_state)
 8002f1e:	7a1a      	ldrb	r2, [r3, #8]
 8002f20:	2a02      	cmp	r2, #2
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn (USBD_HandleTypeDef  *pdev, 
                     uint8_t epnum)
{
 8002f22:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
  
  switch (hmsc->bot_state)
 8002f24:	d003      	beq.n	8002f2e <MSC_BOT_DataIn+0x16>
 8002f26:	d312      	bcc.n	8002f4e <MSC_BOT_DataIn+0x36>
 8002f28:	2a04      	cmp	r2, #4
 8002f2a:	d90b      	bls.n	8002f44 <MSC_BOT_DataIn+0x2c>
 8002f2c:	bd10      	pop	{r4, pc}
  {
  case USBD_BOT_DATA_IN:
    if(SCSI_ProcessCmd(pdev,
 8002f2e:	f203 221b 	addw	r2, r3, #539	; 0x21b
 8002f32:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8002f36:	f000 f8a5 	bl	8003084 <SCSI_ProcessCmd>
 8002f3a:	2800      	cmp	r0, #0
 8002f3c:	da07      	bge.n	8002f4e <MSC_BOT_DataIn+0x36>
                        hmsc->cbw.bLUN,
                        &hmsc->cbw.CB[0]) < 0)
    {
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8002f3e:	2101      	movs	r1, #1
 8002f40:	4620      	mov	r0, r4
 8002f42:	e000      	b.n	8002f46 <MSC_BOT_DataIn+0x2e>
    }
    break;
    
  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8002f44:	2100      	movs	r1, #0
    break;
    
  default:
    break;
  }
}
 8002f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    break;
    
  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8002f4a:	f7ff bfc9 	b.w	8002ee0 <MSC_BOT_SendCSW>
 8002f4e:	bd10      	pop	{r4, pc}

08002f50 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut (USBD_HandleTypeDef  *pdev, 
                      uint8_t epnum)
{
 8002f50:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8002f52:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  switch (hmsc->bot_state)
 8002f56:	7a26      	ldrb	r6, [r4, #8]
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut (USBD_HandleTypeDef  *pdev, 
                      uint8_t epnum)
{
 8002f58:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
  
  switch (hmsc->bot_state)
 8002f5a:	b116      	cbz	r6, 8002f62 <MSC_BOT_DataOut+0x12>
 8002f5c:	2e01      	cmp	r6, #1
 8002f5e:	d057      	beq.n	8003010 <MSC_BOT_DataOut+0xc0>
 8002f60:	bd70      	pop	{r4, r5, r6, pc}
*/
static void  MSC_BOT_CBW_Decode (USBD_HandleTypeDef  *pdev)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
  
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8002f62:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8002f66:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8002f6a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002f6e:	f8c4 3234 	str.w	r3, [r4, #564]	; 0x234
  
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8002f72:	2101      	movs	r1, #1
 8002f74:	f002 f898 	bl	80050a8 <USBD_LL_GetRxDataSize>
 8002f78:	281f      	cmp	r0, #31
 8002f7a:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8002f7e:	d10b      	bne.n	8002f98 <MSC_BOT_DataOut+0x48>
 8002f80:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8002f84:	4b27      	ldr	r3, [pc, #156]	; (8003024 <MSC_BOT_DataOut+0xd4>)
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d106      	bne.n	8002f98 <MSC_BOT_DataOut+0x48>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8002f8a:	2901      	cmp	r1, #1
 8002f8c:	d804      	bhi.n	8002f98 <MSC_BOT_DataOut+0x48>
        (hmsc->cbw.bLUN > 1) || 
 8002f8e:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
 8002f92:	3b01      	subs	r3, #1
 8002f94:	2b0f      	cmp	r3, #15
 8002f96:	d907      	bls.n	8002fa8 <MSC_BOT_DataOut+0x58>
          (hmsc->cbw.bCBLength < 1) || 
            (hmsc->cbw.bCBLength > 16))
  {
    
    SCSI_SenseCode(pdev,
 8002f98:	2320      	movs	r3, #32
 8002f9a:	2205      	movs	r2, #5
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	f000 f859 	bl	8003054 <SCSI_SenseCode>
                   hmsc->cbw.bLUN, 
                   ILLEGAL_REQUEST, 
                   INVALID_CDB);
    
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	7263      	strb	r3, [r4, #9]
 8002fa6:	e00b      	b.n	8002fc0 <MSC_BOT_DataOut+0x70>
    MSC_BOT_Abort(pdev);
 
  }
  else
  {
    if(SCSI_ProcessCmd(pdev,
 8002fa8:	f204 221b 	addw	r2, r4, #539	; 0x21b
 8002fac:	4628      	mov	r0, r5
 8002fae:	f000 f869 	bl	8003084 <SCSI_ProcessCmd>
 8002fb2:	2800      	cmp	r0, #0
 8002fb4:	7a23      	ldrb	r3, [r4, #8]
 8002fb6:	da08      	bge.n	8002fca <MSC_BOT_DataOut+0x7a>
                       hmsc->cbw.bLUN,
                       &hmsc->cbw.CB[0]) < 0)
    {
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 8002fb8:	2b05      	cmp	r3, #5
 8002fba:	d101      	bne.n	8002fc0 <MSC_BOT_DataOut+0x70>
      {
       MSC_BOT_SendCSW (pdev,
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	e022      	b.n	8003006 <MSC_BOT_DataOut+0xb6>
                         USBD_CSW_CMD_FAILED); 
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8002fc0:	4628      	mov	r0, r5
    break;
    
  default:
    break;
  }
}
 8002fc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
       MSC_BOT_SendCSW (pdev,
                         USBD_CSW_CMD_FAILED); 
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8002fc6:	f7ff bf3b 	b.w	8002e40 <MSC_BOT_Abort>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d927      	bls.n	8003020 <MSC_BOT_DataOut+0xd0>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN)) 
    {
      if (hmsc->bot_data_length > 0)
 8002fd0:	8961      	ldrh	r1, [r4, #10]
 8002fd2:	b1c1      	cbz	r1, 8003006 <MSC_BOT_DataOut+0xb6>
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef  *pdev,
                              uint8_t* buf, 
                              uint16_t len)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8002fd4:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
  
  len = MIN (hmsc->cbw.dDataLength, len);
 8002fd8:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
  hmsc->csw.dDataResidue -= len;
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8002fdc:	f882 6238 	strb.w	r6, [r2, #568]	; 0x238
                              uint8_t* buf, 
                              uint16_t len)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  len = MIN (hmsc->cbw.dDataLength, len);
 8002fe0:	4299      	cmp	r1, r3
 8002fe2:	bf28      	it	cs
 8002fe4:	4619      	movcs	r1, r3
  hmsc->csw.dDataResidue -= len;
 8002fe6:	f8d2 3234 	ldr.w	r3, [r2, #564]	; 0x234
 8002fea:	1a5b      	subs	r3, r3, r1
 8002fec:	f8c2 3234 	str.w	r3, [r2, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	7213      	strb	r3, [r2, #8]
  
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8002ff4:	4628      	mov	r0, r5
 8002ff6:	b28b      	uxth	r3, r1
 8002ff8:	f104 020c 	add.w	r2, r4, #12
 8002ffc:	2181      	movs	r1, #129	; 0x81
    break;
    
  default:
    break;
  }
}
 8002ffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  len = MIN (hmsc->cbw.dDataLength, len);
  hmsc->csw.dDataResidue -= len;
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
  hmsc->bot_state = USBD_BOT_SEND_DATA;
  
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8003002:	f002 b835 	b.w	8005070 <USBD_LL_Transmit>
                         hmsc->bot_data, 
                         hmsc->bot_data_length);
      }
      else if (hmsc->bot_data_length == 0) 
      {
        MSC_BOT_SendCSW (pdev,
 8003006:	4628      	mov	r0, r5
    break;
    
  default:
    break;
  }
}
 8003008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                         hmsc->bot_data, 
                         hmsc->bot_data_length);
      }
      else if (hmsc->bot_data_length == 0) 
      {
        MSC_BOT_SendCSW (pdev,
 800300c:	f7ff bf68 	b.w	8002ee0 <MSC_BOT_SendCSW>
    MSC_BOT_CBW_Decode(pdev);
    break;
    
  case USBD_BOT_DATA_OUT:
    
    if(SCSI_ProcessCmd(pdev,
 8003010:	f204 221b 	addw	r2, r4, #539	; 0x21b
 8003014:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8003018:	f000 f834 	bl	8003084 <SCSI_ProcessCmd>
 800301c:	2800      	cmp	r0, #0
 800301e:	dbcd      	blt.n	8002fbc <MSC_BOT_DataOut+0x6c>
 8003020:	bd70      	pop	{r4, r5, r6, pc}
 8003022:	bf00      	nop
 8003024:	43425355 	.word	0x43425355

08003028 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8003028:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800302a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 800302e:	7a63      	ldrb	r3, [r4, #9]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d105      	bne.n	8003040 <MSC_BOT_CplClrFeature+0x18>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8003034:	2181      	movs	r1, #129	; 0x81
 8003036:	f001 ffdd 	bl	8004ff4 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 800303a:	2300      	movs	r3, #0
 800303c:	7263      	strb	r3, [r4, #9]
 800303e:	bd10      	pop	{r4, pc}
  }
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8003040:	060a      	lsls	r2, r1, #24
 8003042:	d506      	bpl.n	8003052 <MSC_BOT_CplClrFeature+0x2a>
 8003044:	2b01      	cmp	r3, #1
 8003046:	d004      	beq.n	8003052 <MSC_BOT_CplClrFeature+0x2a>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8003048:	2101      	movs	r1, #1
  }
  
}
 800304a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
  }
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800304e:	f7ff bf47 	b.w	8002ee0 <MSC_BOT_SendCSW>
 8003052:	bd10      	pop	{r4, pc}

08003054 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8003054:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8003056:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800305a:	f890 125d 	ldrb.w	r1, [r0, #605]	; 0x25d
 800305e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
  hmsc->scsi_sense_tail++;
 8003062:	3101      	adds	r1, #1
 8003064:	b2c9      	uxtb	r1, r1
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8003066:	021b      	lsls	r3, r3, #8
  hmsc->scsi_sense_tail++;
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8003068:	2904      	cmp	r1, #4
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800306a:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  hmsc->scsi_sense_tail++;
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
  {
    hmsc->scsi_sense_tail = 0;
 800306e:	bf08      	it	eq
 8003070:	2300      	moveq	r3, #0
*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8003072:	f884 223c 	strb.w	r2, [r4, #572]	; 0x23c
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
  hmsc->scsi_sense_tail++;
 8003076:	bf14      	ite	ne
 8003078:	f880 125d 	strbne.w	r1, [r0, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
  {
    hmsc->scsi_sense_tail = 0;
 800307c:	f880 325d 	strbeq.w	r3, [r0, #605]	; 0x25d
 8003080:	bd10      	pop	{r4, pc}
	...

08003084 <SCSI_ProcessCmd>:
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef  *pdev,
                           uint8_t lun, 
                           uint8_t *params)
{
 8003084:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  
  switch (params[0])
 8003088:	7813      	ldrb	r3, [r2, #0]
 800308a:	2b1e      	cmp	r3, #30
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef  *pdev,
                           uint8_t lun, 
                           uint8_t *params)
{
 800308c:	4605      	mov	r5, r0
 800308e:	460f      	mov	r7, r1
 8003090:	4690      	mov	r8, r2
  
  switch (params[0])
 8003092:	f000 8089 	beq.w	80031a8 <SCSI_ProcessCmd+0x124>
 8003096:	d813      	bhi.n	80030c0 <SCSI_ProcessCmd+0x3c>
 8003098:	2b12      	cmp	r3, #18
 800309a:	d066      	beq.n	800316a <SCSI_ProcessCmd+0xe6>
 800309c:	d80b      	bhi.n	80030b6 <SCSI_ProcessCmd+0x32>
 800309e:	b31b      	cbz	r3, 80030e8 <SCSI_ProcessCmd+0x64>
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	f040 81f8 	bne.w	8003496 <SCSI_ProcessCmd+0x412>
 80030a6:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
  {
    hmsc->bot_data[i] = 0;
 80030aa:	2000      	movs	r0, #0
 80030ac:	f103 020b 	add.w	r2, r3, #11
 80030b0:	f103 011d 	add.w	r1, r3, #29
 80030b4:	e031      	b.n	800311a <SCSI_ProcessCmd+0x96>
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef  *pdev,
                           uint8_t lun, 
                           uint8_t *params)
{
  
  switch (params[0])
 80030b6:	2b1a      	cmp	r3, #26
 80030b8:	d07a      	beq.n	80031b0 <SCSI_ProcessCmd+0x12c>
 80030ba:	2b1b      	cmp	r3, #27
 80030bc:	d074      	beq.n	80031a8 <SCSI_ProcessCmd+0x124>
 80030be:	e1ea      	b.n	8003496 <SCSI_ProcessCmd+0x412>
 80030c0:	2b28      	cmp	r3, #40	; 0x28
 80030c2:	f000 80dc 	beq.w	800327e <SCSI_ProcessCmd+0x1fa>
 80030c6:	d806      	bhi.n	80030d6 <SCSI_ProcessCmd+0x52>
 80030c8:	2b23      	cmp	r3, #35	; 0x23
 80030ca:	f000 808b 	beq.w	80031e4 <SCSI_ProcessCmd+0x160>
 80030ce:	2b25      	cmp	r3, #37	; 0x25
 80030d0:	f000 80b2 	beq.w	8003238 <SCSI_ProcessCmd+0x1b4>
 80030d4:	e1df      	b.n	8003496 <SCSI_ProcessCmd+0x412>
 80030d6:	2b2f      	cmp	r3, #47	; 0x2f
 80030d8:	f000 81c8 	beq.w	800346c <SCSI_ProcessCmd+0x3e8>
 80030dc:	2b5a      	cmp	r3, #90	; 0x5a
 80030de:	d074      	beq.n	80031ca <SCSI_ProcessCmd+0x146>
 80030e0:	2b2a      	cmp	r3, #42	; 0x2a
 80030e2:	f040 81d8 	bne.w	8003496 <SCSI_ProcessCmd+0x412>
 80030e6:	e141      	b.n	800336c <SCSI_ProcessCmd+0x2e8>
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 80030e8:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
    
  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0)
 80030ec:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f040 8144 	bne.w	800337e <SCSI_ProcessCmd+0x2fa>
                   ILLEGAL_REQUEST, 
                   INVALID_CDB);
    return -1;
  }  
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 80030f6:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80030fa:	4608      	mov	r0, r1
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	4798      	blx	r3
 8003100:	4604      	mov	r4, r0
 8003102:	b140      	cbz	r0, 8003116 <SCSI_ProcessCmd+0x92>
  {
    SCSI_SenseCode(pdev,
 8003104:	233a      	movs	r3, #58	; 0x3a
 8003106:	2202      	movs	r2, #2
 8003108:	4639      	mov	r1, r7
 800310a:	4628      	mov	r0, r5
 800310c:	f7ff ffa2 	bl	8003054 <SCSI_SenseCode>
                   lun,
                   NOT_READY, 
                   MEDIUM_NOT_PRESENT);
    
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8003110:	2305      	movs	r3, #5
 8003112:	7233      	strb	r3, [r6, #8]
 8003114:	e1c5      	b.n	80034a2 <SCSI_ProcessCmd+0x41e>
    return -1;
  } 
  hmsc->bot_data_length = 0;
 8003116:	8170      	strh	r0, [r6, #10]
 8003118:	e203      	b.n	8003522 <SCSI_ProcessCmd+0x49e>
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
  {
    hmsc->bot_data[i] = 0;
 800311a:	f802 0f01 	strb.w	r0, [r2, #1]!
static int8_t SCSI_RequestSense (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 800311e:	4291      	cmp	r1, r2
 8003120:	d1fb      	bne.n	800311a <SCSI_ProcessCmd+0x96>
  {
    hmsc->bot_data[i] = 0;
  }
  
  hmsc->bot_data[0]	= 0x70;		
 8003122:	2270      	movs	r2, #112	; 0x70
 8003124:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 8003126:	220c      	movs	r2, #12
 8003128:	74da      	strb	r2, [r3, #19]
  
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 800312a:	f893 125d 	ldrb.w	r1, [r3, #605]	; 0x25d
 800312e:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8003132:	4291      	cmp	r1, r2
 8003134:	d011      	beq.n	800315a <SCSI_ProcessCmd+0xd6>
 8003136:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
    hmsc->scsi_sense_head++;
 800313a:	3201      	adds	r2, #1
  hmsc->bot_data[0]	= 0x70;		
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
  
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
    
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 800313c:	f891 023c 	ldrb.w	r0, [r1, #572]	; 0x23c
 8003140:	7398      	strb	r0, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 8003142:	f891 0241 	ldrb.w	r0, [r1, #577]	; 0x241
 8003146:	7618      	strb	r0, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
    hmsc->scsi_sense_head++;
 8003148:	b2d2      	uxtb	r2, r2
    
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800314a:	2a04      	cmp	r2, #4
  
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
    
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 800314c:	f891 1240 	ldrb.w	r1, [r1, #576]	; 0x240
 8003150:	7659      	strb	r1, [r3, #25]
    hmsc->scsi_sense_head++;
    
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
    {
      hmsc->scsi_sense_head = 0;
 8003152:	bf08      	it	eq
 8003154:	2200      	moveq	r2, #0
 8003156:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 800315a:	2212      	movs	r2, #18
 800315c:	815a      	strh	r2, [r3, #10]
  
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800315e:	f898 2004 	ldrb.w	r2, [r8, #4]
 8003162:	2a12      	cmp	r2, #18
  {
    hmsc->bot_data_length = params[4];
 8003164:	bf98      	it	ls
 8003166:	815a      	strhls	r2, [r3, #10]
 8003168:	e17e      	b.n	8003468 <SCSI_ProcessCmd+0x3e4>
{
  uint8_t* pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  if (params[1] & 0x01)/*Evpd is set*/
 800316a:	7853      	ldrb	r3, [r2, #1]
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  uint8_t* pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800316c:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
  
  if (params[1] & 0x01)/*Evpd is set*/
 8003170:	07db      	lsls	r3, r3, #31
 8003172:	d40d      	bmi.n	8003190 <SCSI_ProcessCmd+0x10c>
    len = LENGTH_INQUIRY_PAGE00;
  }
  else
  {
    
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8003174:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    len = pPage[4] + 5;
    
    if (params[4] <= len)
 8003178:	7912      	ldrb	r2, [r2, #4]
    len = LENGTH_INQUIRY_PAGE00;
  }
  else
  {
    
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 8003180:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    len = pPage[4] + 5;
 8003184:	793b      	ldrb	r3, [r7, #4]
 8003186:	3305      	adds	r3, #5
 8003188:	4293      	cmp	r3, r2
 800318a:	bf28      	it	cs
 800318c:	4613      	movcs	r3, r2
 800318e:	e001      	b.n	8003194 <SCSI_ProcessCmd+0x110>
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  if (params[1] & 0x01)/*Evpd is set*/
  {
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 8003190:	4fd0      	ldr	r7, [pc, #832]	; (80034d4 <SCSI_ProcessCmd+0x450>)
    len = LENGTH_INQUIRY_PAGE00;
 8003192:	2307      	movs	r3, #7
    if (params[4] <= len)
    {
      len = params[4];
    }
  }
  hmsc->bot_data_length = len;
 8003194:	814b      	strh	r3, [r1, #10]
  
  while (len) 
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8166 	beq.w	8003468 <SCSI_ProcessCmd+0x3e4>
  {
    len--;
 800319c:	3b01      	subs	r3, #1
 800319e:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = pPage[len];
 80031a0:	18ca      	adds	r2, r1, r3
 80031a2:	5cf8      	ldrb	r0, [r7, r3]
 80031a4:	7310      	strb	r0, [r2, #12]
 80031a6:	e7f6      	b.n	8003196 <SCSI_ProcessCmd+0x112>
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
  hmsc->bot_data_length = 0;
 80031a8:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 80031ac:	2400      	movs	r4, #0
 80031ae:	e1b7      	b.n	8003520 <SCSI_ProcessCmd+0x49c>
 80031b0:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hmsc->bot_data_length = len;
  
  while (len) 
  {
    len--;
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 80031b4:	4cc8      	ldr	r4, [pc, #800]	; (80034d8 <SCSI_ProcessCmd+0x454>)
*/
static int8_t SCSI_ModeSense6 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  uint16_t len = 8 ;
  hmsc->bot_data_length = len;
 80031b6:	2308      	movs	r3, #8
 80031b8:	8153      	strh	r3, [r2, #10]
  
  while (len) 
  {
    len--;
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 80031be:	18d1      	adds	r1, r2, r3
 80031c0:	5ce0      	ldrb	r0, [r4, r3]
 80031c2:	7308      	strb	r0, [r1, #12]
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  uint16_t len = 8 ;
  hmsc->bot_data_length = len;
  
  while (len) 
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f8      	bne.n	80031ba <SCSI_ProcessCmd+0x136>
 80031c8:	e14e      	b.n	8003468 <SCSI_ProcessCmd+0x3e4>
 80031ca:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hmsc->bot_data_length = len;

  while (len) 
  {
    len--;
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 80031ce:	4cc3      	ldr	r4, [pc, #780]	; (80034dc <SCSI_ProcessCmd+0x458>)
static int8_t SCSI_ModeSense10 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  uint16_t len = 8;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  hmsc->bot_data_length = len;
 80031d0:	2308      	movs	r3, #8
 80031d2:	8153      	strh	r3, [r2, #10]

  while (len) 
  {
    len--;
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 80031d8:	18d1      	adds	r1, r2, r3
 80031da:	5ce0      	ldrb	r0, [r4, r3]
 80031dc:	7308      	strb	r0, [r1, #12]
  uint16_t len = 8;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  hmsc->bot_data_length = len;

  while (len) 
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f8      	bne.n	80031d4 <SCSI_ProcessCmd+0x150>
 80031e2:	e141      	b.n	8003468 <SCSI_ProcessCmd+0x3e4>
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80031e4:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  uint32_t blk_nbr;
  uint16_t i;
  
  for(i=0 ; i < 12 ; i++) 
  {
    hmsc->bot_data[i] = 0;
 80031e8:	2100      	movs	r1, #0
 80031ea:	f106 030b 	add.w	r3, r6, #11
 80031ee:	f106 0217 	add.w	r2, r6, #23
 80031f2:	f803 1f01 	strb.w	r1, [r3, #1]!
  
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  
  for(i=0 ; i < 12 ; i++) 
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d1fb      	bne.n	80031f2 <SCSI_ProcessCmd+0x16e>
  {
    hmsc->bot_data[i] = 0;
  }
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 80031fa:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 80031fe:	f10d 0202 	add.w	r2, sp, #2
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	a901      	add	r1, sp, #4
 8003206:	4638      	mov	r0, r7
 8003208:	4798      	blx	r3
 800320a:	4604      	mov	r4, r0
 800320c:	bb08      	cbnz	r0, 8003252 <SCSI_ProcessCmd+0x1ce>
                   MEDIUM_NOT_PRESENT);
    return -1;
  } 
  else
  {
    hmsc->bot_data[3] = 0x08;
 800320e:	2308      	movs	r3, #8
 8003210:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 8003212:	9b01      	ldr	r3, [sp, #4]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
    
    hmsc->bot_data[8] = 0x02;
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8003214:	7570      	strb	r0, [r6, #21]
    return -1;
  } 
  else
  {
    hmsc->bot_data[3] = 0x08;
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 8003216:	3b01      	subs	r3, #1
 8003218:	0e1a      	lsrs	r2, r3, #24
 800321a:	7432      	strb	r2, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 800321c:	0c1a      	lsrs	r2, r3, #16
 800321e:	7472      	strb	r2, [r6, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 8003220:	74f3      	strb	r3, [r6, #19]
  else
  {
    hmsc->bot_data[3] = 0x08;
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 8003222:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
    
    hmsc->bot_data[8] = 0x02;
 8003224:	2302      	movs	r3, #2
 8003226:	7533      	strb	r3, [r6, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8003228:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  else
  {
    hmsc->bot_data[3] = 0x08;
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 800322c:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
    
    hmsc->bot_data[8] = 0x02;
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800322e:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8003230:	75f3      	strb	r3, [r6, #23]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
    
    hmsc->bot_data[8] = 0x02;
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8003232:	75b2      	strb	r2, [r6, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
    
    hmsc->bot_data_length = 12;
 8003234:	230c      	movs	r3, #12
 8003236:	e020      	b.n	800327a <SCSI_ProcessCmd+0x1f6>
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8003238:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 800323c:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8003240:	f206 225e 	addw	r2, r6, #606	; 0x25e
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f506 7118 	add.w	r1, r6, #608	; 0x260
 800324a:	4638      	mov	r0, r7
 800324c:	4798      	blx	r3
 800324e:	4604      	mov	r4, r0
 8003250:	b108      	cbz	r0, 8003256 <SCSI_ProcessCmd+0x1d2>
  {
    SCSI_SenseCode(pdev,
 8003252:	233a      	movs	r3, #58	; 0x3a
 8003254:	e0a8      	b.n	80033a8 <SCSI_ProcessCmd+0x324>
    return -1;
  } 
  else
  {
    
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 8003256:	f8d6 3260 	ldr.w	r3, [r6, #608]	; 0x260
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
    
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800325a:	7430      	strb	r0, [r6, #16]
    return -1;
  } 
  else
  {
    
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 800325c:	3b01      	subs	r3, #1
 800325e:	0e1a      	lsrs	r2, r3, #24
 8003260:	7332      	strb	r2, [r6, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 8003262:	0c1a      	lsrs	r2, r3, #16
 8003264:	7372      	strb	r2, [r6, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 8003266:	73f3      	strb	r3, [r6, #15]
  else
  {
    
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 8003268:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
    
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800326a:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
  else
  {
    
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 800326e:	73b2      	strb	r2, [r6, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
    
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8003270:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8003272:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
    
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8003274:	7470      	strb	r0, [r6, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8003276:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
    
    hmsc->bot_data_length = 8;
 8003278:	2308      	movs	r3, #8
 800327a:	8173      	strh	r3, [r6, #10]
 800327c:	e151      	b.n	8003522 <SCSI_ProcessCmd+0x49e>
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 800327e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 8003282:	7a23      	ldrb	r3, [r4, #8]
 8003284:	bb8b      	cbnz	r3, 80032ea <SCSI_ProcessCmd+0x266>
  {
    
    /* case 10 : Ho <> Di */
    
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 8003286:	f994 3218 	ldrsb.w	r3, [r4, #536]	; 0x218
 800328a:	2b00      	cmp	r3, #0
 800328c:	db04      	blt.n	8003298 <SCSI_ProcessCmd+0x214>
    {
      SCSI_SenseCode(pdev,
 800328e:	2320      	movs	r3, #32
 8003290:	2205      	movs	r2, #5
 8003292:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8003296:	e102      	b.n	800349e <SCSI_ProcessCmd+0x41a>
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
    }    
    
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8003298:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800329c:	4608      	mov	r0, r1
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4798      	blx	r3
 80032a2:	2800      	cmp	r0, #0
 80032a4:	d1d5      	bne.n	8003252 <SCSI_ProcessCmd+0x1ce>
                     NOT_READY, 
                     MEDIUM_NOT_PRESENT);
      return -1;
    } 
    
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80032a6:	f898 3003 	ldrb.w	r3, [r8, #3]
 80032aa:	f898 2002 	ldrb.w	r2, [r8, #2]
 80032ae:	041b      	lsls	r3, r3, #16
 80032b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80032b4:	f898 2005 	ldrb.w	r2, [r8, #5]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f898 2004 	ldrb.w	r2, [r8, #4]
 80032be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80032c2:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
      (params[3] << 16) | \
        (params[4] <<  8) | \
          params[5];
    
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80032c6:	f898 2008 	ldrb.w	r2, [r8, #8]
 80032ca:	f898 1007 	ldrb.w	r1, [r8, #7]
 80032ce:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef  *pdev, uint8_t lun , uint32_t blk_offset , uint16_t blk_nbr)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
  
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80032d2:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
    hmsc->scsi_blk_addr = (params[2] << 24) | \
      (params[3] << 16) | \
        (params[4] <<  8) | \
          params[5];
    
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80032d6:	f8c4 1268 	str.w	r1, [r4, #616]	; 0x268
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef  *pdev, uint8_t lun , uint32_t blk_offset , uint16_t blk_nbr)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
  
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80032da:	f8d2 2260 	ldr.w	r2, [r2, #608]	; 0x260
 80032de:	1858      	adds	r0, r3, r1
 80032e0:	4290      	cmp	r0, r2
 80032e2:	f240 80e1 	bls.w	80034a8 <SCSI_ProcessCmd+0x424>
  {
    SCSI_SenseCode(pdev,
 80032e6:	2321      	movs	r3, #33	; 0x21
 80032e8:	e0d6      	b.n	8003498 <SCSI_ProcessCmd+0x414>
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 80032ea:	f8d5 6218 	ldr.w	r6, [r5, #536]	; 0x218
  uint32_t len;
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
  
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 80032ee:	f8d5 021c 	ldr.w	r0, [r5, #540]	; 0x21c
 80032f2:	f8b6 225e 	ldrh.w	r2, [r6, #606]	; 0x25e
 80032f6:	f8d6 1264 	ldr.w	r1, [r6, #612]	; 0x264
 80032fa:	f8d0 9010 	ldr.w	r9, [r0, #16]
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 80032fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003302:	8163      	strh	r3, [r4, #10]
static int8_t SCSI_ProcessRead (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
  uint32_t len;
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8003304:	f8d6 3268 	ldr.w	r3, [r6, #616]	; 0x268
 8003308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330c:	bf28      	it	cs
 800330e:	f44f 7300 	movcs.w	r3, #512	; 0x200
  
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
                              hmsc->bot_data, 
 8003312:	f106 040c 	add.w	r4, r6, #12
static int8_t SCSI_ProcessRead (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
  uint32_t len;
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8003316:	4698      	mov	r8, r3
  
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8003318:	4638      	mov	r0, r7
 800331a:	fbb3 f3f2 	udiv	r3, r3, r2
 800331e:	fbb1 f2f2 	udiv	r2, r1, r2
 8003322:	b29b      	uxth	r3, r3
 8003324:	4621      	mov	r1, r4
 8003326:	47c8      	blx	r9
 8003328:	2800      	cmp	r0, #0
 800332a:	da01      	bge.n	8003330 <SCSI_ProcessCmd+0x2ac>
                              hmsc->bot_data, 
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
                              len / hmsc->scsi_blk_size) < 0)
  {
    
    SCSI_SenseCode(pdev,
 800332c:	2311      	movs	r3, #17
 800332e:	e079      	b.n	8003424 <SCSI_ProcessCmd+0x3a0>
                   UNRECOVERED_READ_ERROR);
    return -1; 
  }
  
  
  USBD_LL_Transmit (pdev, 
 8003330:	fa1f f388 	uxth.w	r3, r8
 8003334:	4622      	mov	r2, r4
 8003336:	2181      	movs	r1, #129	; 0x81
 8003338:	4628      	mov	r0, r5
 800333a:	f001 fe99 	bl	8005070 <USBD_LL_Transmit>
             MSC_EPIN_ADDR,
             hmsc->bot_data,
             len);
  
  
  hmsc->scsi_blk_addr   += len; 
 800333e:	f8d6 3264 	ldr.w	r3, [r6, #612]	; 0x264
  hmsc->scsi_blk_len    -= len;  
 8003342:	f8d6 4268 	ldr.w	r4, [r6, #616]	; 0x268
             MSC_EPIN_ADDR,
             hmsc->bot_data,
             len);
  
  
  hmsc->scsi_blk_addr   += len; 
 8003346:	4443      	add	r3, r8
 8003348:	f8c6 3264 	str.w	r3, [r6, #612]	; 0x264
  hmsc->scsi_blk_len    -= len;  
  
  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800334c:	f8d6 3234 	ldr.w	r3, [r6, #564]	; 0x234
             hmsc->bot_data,
             len);
  
  
  hmsc->scsi_blk_addr   += len; 
  hmsc->scsi_blk_len    -= len;  
 8003350:	ebc8 0404 	rsb	r4, r8, r4
  
  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8003354:	ebc8 0303 	rsb	r3, r8, r3
             hmsc->bot_data,
             len);
  
  
  hmsc->scsi_blk_addr   += len; 
  hmsc->scsi_blk_len    -= len;  
 8003358:	f8c6 4268 	str.w	r4, [r6, #616]	; 0x268
  
  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800335c:	f8c6 3234 	str.w	r3, [r6, #564]	; 0x234
  
  if (hmsc->scsi_blk_len == 0)
 8003360:	2c00      	cmp	r4, #0
 8003362:	f040 8081 	bne.w	8003468 <SCSI_ProcessCmd+0x3e4>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8003366:	2303      	movs	r3, #3
 8003368:	7233      	strb	r3, [r6, #8]
 800336a:	e0da      	b.n	8003522 <SCSI_ProcessCmd+0x49e>
* @retval status
*/

static int8_t SCSI_Write10 (USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 800336c:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8003370:	7a33      	ldrb	r3, [r6, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d13a      	bne.n	80033ec <SCSI_ProcessCmd+0x368>
  {
    
    /* case 8 : Hi <> Do */
    
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 8003376:	f996 3218 	ldrsb.w	r3, [r6, #536]	; 0x218
 800337a:	2b00      	cmp	r3, #0
 800337c:	da04      	bge.n	8003388 <SCSI_ProcessCmd+0x304>
    {
      SCSI_SenseCode(pdev,
 800337e:	2320      	movs	r3, #32
 8003380:	2205      	movs	r2, #5
 8003382:	f896 1219 	ldrb.w	r1, [r6, #537]	; 0x219
 8003386:	e08a      	b.n	800349e <SCSI_ProcessCmd+0x41a>
                     INVALID_CDB);
      return -1;
    }
    
    /* Check whether Media is ready */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8003388:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800338c:	4608      	mov	r0, r1
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	4798      	blx	r3
 8003392:	2800      	cmp	r0, #0
 8003394:	f47f af5d 	bne.w	8003252 <SCSI_ProcessCmd+0x1ce>
                     MEDIUM_NOT_PRESENT);
      return -1;
    } 
    
    /* Check If media is write-protected */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 8003398:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800339c:	4638      	mov	r0, r7
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4798      	blx	r3
 80033a2:	4604      	mov	r4, r0
 80033a4:	b110      	cbz	r0, 80033ac <SCSI_ProcessCmd+0x328>
    {
      SCSI_SenseCode(pdev,
 80033a6:	2327      	movs	r3, #39	; 0x27
 80033a8:	2202      	movs	r2, #2
 80033aa:	e076      	b.n	800349a <SCSI_ProcessCmd+0x416>
                     WRITE_PROTECTED);
      return -1;
    } 
    
    
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80033ac:	f898 3003 	ldrb.w	r3, [r8, #3]
 80033b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80033b4:	041b      	lsls	r3, r3, #16
 80033b6:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 80033ba:	f898 3005 	ldrb.w	r3, [r8, #5]
 80033be:	4313      	orrs	r3, r2
 80033c0:	f898 2004 	ldrb.w	r2, [r8, #4]
 80033c4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80033c8:	f8c6 2264 	str.w	r2, [r6, #612]	; 0x264
      (params[3] << 16) | \
        (params[4] <<  8) | \
          params[5];
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80033cc:	f898 1007 	ldrb.w	r1, [r8, #7]
 80033d0:	f898 3008 	ldrb.w	r3, [r8, #8]
 80033d4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef  *pdev, uint8_t lun , uint32_t blk_offset , uint16_t blk_nbr)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
  
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80033d8:	f8d5 1218 	ldr.w	r1, [r5, #536]	; 0x218
    
    hmsc->scsi_blk_addr = (params[2] << 24) | \
      (params[3] << 16) | \
        (params[4] <<  8) | \
          params[5];
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80033dc:	f8c6 3268 	str.w	r3, [r6, #616]	; 0x268
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef  *pdev, uint8_t lun , uint32_t blk_offset , uint16_t blk_nbr)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
  
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80033e0:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260
 80033e4:	18d0      	adds	r0, r2, r3
 80033e6:	4288      	cmp	r0, r1
 80033e8:	d97a      	bls.n	80034e0 <SCSI_ProcessCmd+0x45c>
 80033ea:	e77c      	b.n	80032e6 <SCSI_ProcessCmd+0x262>
static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
  uint32_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80033ec:	f8d6 4268 	ldr.w	r4, [r6, #616]	; 0x268
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 80033f0:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 80033f4:	f8b6 225e 	ldrh.w	r2, [r6, #606]	; 0x25e
 80033f8:	f8d6 1264 	ldr.w	r1, [r6, #612]	; 0x264
 80033fc:	f8d0 9014 	ldr.w	r9, [r0, #20]
static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
  uint32_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8003400:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
                              hmsc->bot_data, 
 8003404:	f106 080c 	add.w	r8, r6, #12
static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
  uint32_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8003408:	bf28      	it	cs
 800340a:	f44f 7400 	movcs.w	r4, #512	; 0x200
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 800340e:	4638      	mov	r0, r7
 8003410:	fbb4 f3f2 	udiv	r3, r4, r2
 8003414:	fbb1 f2f2 	udiv	r2, r1, r2
 8003418:	b29b      	uxth	r3, r3
 800341a:	4641      	mov	r1, r8
 800341c:	47c8      	blx	r9
 800341e:	2800      	cmp	r0, #0
 8003420:	da02      	bge.n	8003428 <SCSI_ProcessCmd+0x3a4>
                              hmsc->bot_data, 
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
                              len / hmsc->scsi_blk_size) < 0)
  {
    SCSI_SenseCode(pdev,
 8003422:	2303      	movs	r3, #3
 8003424:	2204      	movs	r2, #4
 8003426:	e038      	b.n	800349a <SCSI_ProcessCmd+0x416>
                   WRITE_FAULT);     
    return -1; 
  }
  
  
  hmsc->scsi_blk_addr  += len; 
 8003428:	f8d6 3264 	ldr.w	r3, [r6, #612]	; 0x264
  hmsc->scsi_blk_len   -= len; 
  
  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800342c:	f8d6 2234 	ldr.w	r2, [r6, #564]	; 0x234
                   WRITE_FAULT);     
    return -1; 
  }
  
  
  hmsc->scsi_blk_addr  += len; 
 8003430:	4423      	add	r3, r4
 8003432:	f8c6 3264 	str.w	r3, [r6, #612]	; 0x264
  hmsc->scsi_blk_len   -= len; 
 8003436:	f8d6 3268 	ldr.w	r3, [r6, #616]	; 0x268
 800343a:	1b1b      	subs	r3, r3, r4
  
  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800343c:	1b14      	subs	r4, r2, r4
    return -1; 
  }
  
  
  hmsc->scsi_blk_addr  += len; 
  hmsc->scsi_blk_len   -= len; 
 800343e:	f8c6 3268 	str.w	r3, [r6, #616]	; 0x268
  
  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8003442:	f8c6 4234 	str.w	r4, [r6, #564]	; 0x234
  
  if (hmsc->scsi_blk_len == 0)
 8003446:	b923      	cbnz	r3, 8003452 <SCSI_ProcessCmd+0x3ce>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8003448:	2100      	movs	r1, #0
 800344a:	4628      	mov	r0, r5
 800344c:	f7ff fd48 	bl	8002ee0 <MSC_BOT_SendCSW>
 8003450:	e00a      	b.n	8003468 <SCSI_ProcessCmd+0x3e4>
  }
  else
  {
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev,
 8003452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003456:	bf28      	it	cs
 8003458:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800345c:	b29b      	uxth	r3, r3
 800345e:	4642      	mov	r2, r8
 8003460:	2101      	movs	r1, #1
 8003462:	4628      	mov	r0, r5
 8003464:	f001 fe12 	bl	800508c <USBD_LL_PrepareReceive>
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
  }
  
  return 0;
 8003468:	2400      	movs	r4, #0
 800346a:	e05a      	b.n	8003522 <SCSI_ProcessCmd+0x49e>

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
  
  if ((params[1]& 0x02) == 0x02) 
 800346c:	7852      	ldrb	r2, [r2, #1]
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 800346e:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if ((params[1]& 0x02) == 0x02) 
 8003472:	f002 0202 	and.w	r2, r2, #2
 8003476:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800347a:	b112      	cbz	r2, 8003482 <SCSI_ProcessCmd+0x3fe>
  {
    SCSI_SenseCode (pdev,
 800347c:	2324      	movs	r3, #36	; 0x24
 800347e:	2205      	movs	r2, #5
 8003480:	e00d      	b.n	800349e <SCSI_ProcessCmd+0x41a>
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef  *pdev, uint8_t lun , uint32_t blk_offset , uint16_t blk_nbr)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
  
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8003482:	f8b3 1268 	ldrh.w	r1, [r3, #616]	; 0x268
 8003486:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800348a:	440a      	add	r2, r1
 800348c:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
 8003490:	428a      	cmp	r2, r1
 8003492:	d945      	bls.n	8003520 <SCSI_ProcessCmd+0x49c>
 8003494:	e727      	b.n	80032e6 <SCSI_ProcessCmd+0x262>
    
  case SCSI_VERIFY10:
    return SCSI_Verify10(pdev, lun, params);
    
  default:
    SCSI_SenseCode(pdev, 
 8003496:	2320      	movs	r3, #32
 8003498:	2205      	movs	r2, #5
 800349a:	4639      	mov	r1, r7
 800349c:	4628      	mov	r0, r5
 800349e:	f7ff fdd9 	bl	8003054 <SCSI_SenseCode>
                   lun,
                   ILLEGAL_REQUEST, 
                   INVALID_CDB);    
    return -1;
 80034a2:	f04f 34ff 	mov.w	r4, #4294967295
 80034a6:	e03c      	b.n	8003522 <SCSI_ProcessCmd+0x49e>
    if( SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
    }
    
    hmsc->bot_state = USBD_BOT_DATA_IN;
 80034a8:	2202      	movs	r2, #2
 80034aa:	7222      	strb	r2, [r4, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80034ac:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
 80034b0:	4353      	muls	r3, r2
 80034b2:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80034b6:	fb02 f301 	mul.w	r3, r2, r1
    
    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80034ba:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
      return -1; /* error */
    }
    
    hmsc->bot_state = USBD_BOT_DATA_IN;
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80034be:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    
    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	f43f af11 	beq.w	80032ea <SCSI_ProcessCmd+0x266>
    {
      SCSI_SenseCode(pdev,
 80034c8:	2320      	movs	r3, #32
 80034ca:	2205      	movs	r2, #5
 80034cc:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 80034d0:	e7e4      	b.n	800349c <SCSI_ProcessCmd+0x418>
 80034d2:	bf00      	nop
 80034d4:	08005484 	.word	0x08005484
 80034d8:	08005493 	.word	0x08005493
 80034dc:	0800548b 	.word	0x0800548b
                              hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */      
    }
    
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80034e0:	f8b6 125e 	ldrh.w	r1, [r6, #606]	; 0x25e
 80034e4:	434a      	muls	r2, r1
 80034e6:	f8c6 2264 	str.w	r2, [r6, #612]	; 0x264
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
    
    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80034ea:	f8d6 2214 	ldr.w	r2, [r6, #532]	; 0x214
    {
      return -1; /* error */      
    }
    
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80034ee:	434b      	muls	r3, r1
    
    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80034f0:	4293      	cmp	r3, r2
    {
      return -1; /* error */      
    }
    
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80034f2:	f8c6 3268 	str.w	r3, [r6, #616]	; 0x268
    
    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80034f6:	d004      	beq.n	8003502 <SCSI_ProcessCmd+0x47e>
    {
      SCSI_SenseCode(pdev,
 80034f8:	2320      	movs	r3, #32
 80034fa:	2205      	movs	r2, #5
 80034fc:	f896 1219 	ldrb.w	r1, [r6, #537]	; 0x219
 8003500:	e7cc      	b.n	800349c <SCSI_ProcessCmd+0x418>
      return -1;
    }
    
    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
    USBD_LL_PrepareReceive (pdev,
 8003502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
                     INVALID_CDB);
      return -1;
    }
    
    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 8003506:	f04f 0101 	mov.w	r1, #1
    USBD_LL_PrepareReceive (pdev,
 800350a:	bf28      	it	cs
 800350c:	f44f 7300 	movcs.w	r3, #512	; 0x200
                     INVALID_CDB);
      return -1;
    }
    
    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 8003510:	7231      	strb	r1, [r6, #8]
    USBD_LL_PrepareReceive (pdev,
 8003512:	b29b      	uxth	r3, r3
 8003514:	f106 020c 	add.w	r2, r6, #12
 8003518:	4628      	mov	r0, r5
 800351a:	f001 fdb7 	bl	800508c <USBD_LL_PrepareReceive>
 800351e:	e000      	b.n	8003522 <SCSI_ProcessCmd+0x49e>
                            hmsc->scsi_blk_addr, 
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */      
  }
  hmsc->bot_data_length = 0;
 8003520:	815c      	strh	r4, [r3, #10]
                   lun,
                   ILLEGAL_REQUEST, 
                   INVALID_CDB);    
    return -1;
  }
}
 8003522:	4620      	mov	r0, r4
 8003524:	b003      	add	sp, #12
 8003526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800352a:	bf00      	nop

0800352c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800352c:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800352e:	b180      	cbz	r0, 8003552 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003530:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003534:	b113      	cbz	r3, 800353c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8003536:	2300      	movs	r3, #0
 8003538:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800353c:	b109      	cbz	r1, 8003542 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800353e:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003542:	2301      	movs	r3, #1
 8003544:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8003548:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800354a:	f001 fce9 	bl	8004f20 <USBD_LL_Init>
  
  return USBD_OK; 
 800354e:	2000      	movs	r0, #0
 8003550:	bd08      	pop	{r3, pc}
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8003552:	2002      	movs	r0, #2
  pdev->id = id;
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
  
  return USBD_OK; 
}
 8003554:	bd08      	pop	{r3, pc}

08003556 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8003556:	b119      	cbz	r1, 8003560 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003558:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800355c:	2000      	movs	r0, #0
 800355e:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8003560:	2002      	movs	r0, #2
  }
  
  return status;
}
 8003562:	4770      	bx	lr

08003564 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003564:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8003566:	f001 fd0b 	bl	8004f80 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800356a:	2000      	movs	r0, #0
 800356c:	bd08      	pop	{r3, pc}

0800356e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800356e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8003570:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003574:	b90b      	cbnz	r3, 800357a <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8003576:	2002      	movs	r0, #2
 8003578:	bd08      	pop	{r3, pc}
  
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4798      	blx	r3
 800357e:	2800      	cmp	r0, #0
 8003580:	d1f9      	bne.n	8003576 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8003582:	bd08      	pop	{r3, pc}

08003584 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003584:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8003586:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4798      	blx	r3
  return USBD_OK;
}
 800358e:	2000      	movs	r0, #0
 8003590:	bd08      	pop	{r3, pc}

08003592 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003592:	b538      	push	{r3, r4, r5, lr}
 8003594:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003596:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800359a:	4628      	mov	r0, r5
 800359c:	f000 f8f3 	bl	8003786 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80035a0:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80035a2:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80035a6:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80035aa:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80035ae:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80035b2:	f001 031f 	and.w	r3, r1, #31
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d00c      	beq.n	80035d4 <USBD_LL_SetupStage+0x42>
 80035ba:	d306      	bcc.n	80035ca <USBD_LL_SetupStage+0x38>
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d10e      	bne.n	80035de <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80035c0:	4629      	mov	r1, r5
 80035c2:	4620      	mov	r0, r4
 80035c4:	f000 fa2c 	bl	8003a20 <USBD_StdEPReq>
    break;
 80035c8:	e00e      	b.n	80035e8 <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 80035ca:	4629      	mov	r1, r5
 80035cc:	4620      	mov	r0, r4
 80035ce:	f000 f8f9 	bl	80037c4 <USBD_StdDevReq>
    break;
 80035d2:	e009      	b.n	80035e8 <USBD_LL_SetupStage+0x56>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 80035d4:	4629      	mov	r1, r5
 80035d6:	4620      	mov	r0, r4
 80035d8:	f000 fa0a 	bl	80039f0 <USBD_StdItfReq>
    break;
 80035dc:	e004      	b.n	80035e8 <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80035de:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80035e2:	4620      	mov	r0, r4
 80035e4:	f001 fd06 	bl	8004ff4 <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 80035e8:	2000      	movs	r0, #0
 80035ea:	bd38      	pop	{r3, r4, r5, pc}

080035ec <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80035ec:	b538      	push	{r3, r4, r5, lr}
 80035ee:	4604      	mov	r4, r0
 80035f0:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80035f2:	bb09      	cbnz	r1, 8003638 <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80035f4:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d126      	bne.n	800364a <USBD_LL_DataOutStage+0x5e>
    {
      if(pep->rem_length > pep->maxpacket)
 80035fc:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8003600:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8003604:	4291      	cmp	r1, r2
 8003606:	d90a      	bls.n	800361e <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -=  pep->maxpacket;
 8003608:	1a8b      	subs	r3, r1, r2
       
        USBD_CtlContinueRx (pdev, 
 800360a:	429a      	cmp	r2, r3
 800360c:	bf28      	it	cs
 800360e:	461a      	movcs	r2, r3
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8003610:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 8003614:	b292      	uxth	r2, r2
 8003616:	4629      	mov	r1, r5
 8003618:	f000 fa96 	bl	8003b48 <USBD_CtlContinueRx>
 800361c:	e015      	b.n	800364a <USBD_LL_DataOutStage+0x5e>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800361e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	b123      	cbz	r3, 8003630 <USBD_LL_DataOutStage+0x44>
 8003626:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800362a:	2a03      	cmp	r2, #3
 800362c:	d100      	bne.n	8003630 <USBD_LL_DataOutStage+0x44>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800362e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003630:	4620      	mov	r0, r4
 8003632:	f000 fa91 	bl	8003b58 <USBD_CtlSendStatus>
 8003636:	e008      	b.n	800364a <USBD_LL_DataOutStage+0x5e>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8003638:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	b123      	cbz	r3, 800364a <USBD_LL_DataOutStage+0x5e>
 8003640:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003644:	2a03      	cmp	r2, #3
 8003646:	d100      	bne.n	800364a <USBD_LL_DataOutStage+0x5e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8003648:	4798      	blx	r3
  }  
  return USBD_OK;
}
 800364a:	2000      	movs	r0, #0
 800364c:	bd38      	pop	{r3, r4, r5, pc}

0800364e <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800364e:	b570      	push	{r4, r5, r6, lr}
 8003650:	4613      	mov	r3, r2
 8003652:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8003654:	460e      	mov	r6, r1
 8003656:	2900      	cmp	r1, #0
 8003658:	d13c      	bne.n	80036d4 <USBD_LL_DataInStage+0x86>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800365a:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800365e:	2a02      	cmp	r2, #2
 8003660:	d130      	bne.n	80036c4 <USBD_LL_DataInStage+0x76>
    {
      if(pep->rem_length > pep->maxpacket)
 8003662:	69c5      	ldr	r5, [r0, #28]
 8003664:	6a02      	ldr	r2, [r0, #32]
 8003666:	4295      	cmp	r5, r2
 8003668:	d907      	bls.n	800367a <USBD_LL_DataInStage+0x2c>
      {
        pep->rem_length -=  pep->maxpacket;
 800366a:	1aaa      	subs	r2, r5, r2
 800366c:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800366e:	4619      	mov	r1, r3
 8003670:	b292      	uxth	r2, r2
 8003672:	f000 fa61 	bl	8003b38 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8003676:	4633      	mov	r3, r6
 8003678:	e011      	b.n	800369e <USBD_LL_DataInStage+0x50>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 800367a:	6983      	ldr	r3, [r0, #24]
 800367c:	fbb3 f5f2 	udiv	r5, r3, r2
 8003680:	fb02 3515 	mls	r5, r2, r5, r3
 8003684:	b98d      	cbnz	r5, 80036aa <USBD_LL_DataInStage+0x5c>
 8003686:	429a      	cmp	r2, r3
 8003688:	d80f      	bhi.n	80036aa <USBD_LL_DataInStage+0x5c>
           (pep->total_length >= pep->maxpacket) &&
 800368a:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 800368e:	4293      	cmp	r3, r2
 8003690:	d20b      	bcs.n	80036aa <USBD_LL_DataInStage+0x5c>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8003692:	462a      	mov	r2, r5
 8003694:	f000 fa50 	bl	8003b38 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8003698:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800369c:	462b      	mov	r3, r5
 800369e:	461a      	mov	r2, r3
 80036a0:	4619      	mov	r1, r3
 80036a2:	4620      	mov	r0, r4
 80036a4:	f001 fcf2 	bl	800508c <USBD_LL_PrepareReceive>
 80036a8:	e00c      	b.n	80036c4 <USBD_LL_DataInStage+0x76>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80036aa:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	b12b      	cbz	r3, 80036be <USBD_LL_DataInStage+0x70>
 80036b2:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80036b6:	2a03      	cmp	r2, #3
 80036b8:	d101      	bne.n	80036be <USBD_LL_DataInStage+0x70>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 80036ba:	4620      	mov	r0, r4
 80036bc:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80036be:	4620      	mov	r0, r4
 80036c0:	f000 fa55 	bl	8003b6e <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80036c4:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d10c      	bne.n	80036e6 <USBD_LL_DataInStage+0x98>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 80036d2:	e008      	b.n	80036e6 <USBD_LL_DataInStage+0x98>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 80036d4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	b123      	cbz	r3, 80036e6 <USBD_LL_DataInStage+0x98>
 80036dc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80036e0:	2a03      	cmp	r2, #3
 80036e2:	d100      	bne.n	80036e6 <USBD_LL_DataInStage+0x98>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 80036e4:	4798      	blx	r3
  }  
  return USBD_OK;
}
 80036e6:	2000      	movs	r0, #0
 80036e8:	bd70      	pop	{r4, r5, r6, pc}

080036ea <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80036ea:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80036ec:	2200      	movs	r2, #0
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80036ee:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80036f0:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80036f2:	2540      	movs	r5, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80036f4:	2340      	movs	r3, #64	; 0x40
 80036f6:	f001 fc51 	bl	8004f9c <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80036fa:	462b      	mov	r3, r5
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80036fc:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8003700:	2200      	movs	r2, #0
 8003702:	2180      	movs	r1, #128	; 0x80
 8003704:	4620      	mov	r0, r4
 8003706:	f001 fc49 	bl	8004f9c <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800370a:	2301      	movs	r3, #1
 800370c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8003710:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003714:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 8003716:	b12b      	cbz	r3, 8003724 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003718:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800371c:	7921      	ldrb	r1, [r4, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4620      	mov	r0, r4
 8003722:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8003724:	2000      	movs	r0, #0
 8003726:	bd38      	pop	{r3, r4, r5, pc}

08003728 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003728:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800372a:	2000      	movs	r0, #0
 800372c:	4770      	bx	lr

0800372e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800372e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003732:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003736:	2304      	movs	r3, #4
 8003738:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800373c:	2000      	movs	r0, #0
 800373e:	4770      	bx	lr

08003740 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8003740:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8003744:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003748:	2000      	movs	r0, #0
 800374a:	4770      	bx	lr

0800374c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800374c:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800374e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003752:	2a03      	cmp	r2, #3
 8003754:	d104      	bne.n	8003760 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8003756:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	b103      	cbz	r3, 8003760 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800375e:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8003760:	2000      	movs	r0, #0
 8003762:	bd08      	pop	{r3, pc}

08003764 <USBD_LL_IsoINIncomplete>:
 8003764:	2000      	movs	r0, #0
 8003766:	4770      	bx	lr

08003768 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8003768:	2000      	movs	r0, #0
 800376a:	4770      	bx	lr

0800376c <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 800376c:	2000      	movs	r0, #0
 800376e:	4770      	bx	lr

08003770 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8003770:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003772:	2201      	movs	r2, #1
 8003774:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003778:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 800377c:	7901      	ldrb	r1, [r0, #4]
 800377e:	6852      	ldr	r2, [r2, #4]
 8003780:	4790      	blx	r2
   
  return USBD_OK;
}
 8003782:	2000      	movs	r0, #0
 8003784:	bd08      	pop	{r3, pc}

08003786 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 8003786:	780b      	ldrb	r3, [r1, #0]
 8003788:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800378a:	784b      	ldrb	r3, [r1, #1]
 800378c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800378e:	78ca      	ldrb	r2, [r1, #3]
 8003790:	788b      	ldrb	r3, [r1, #2]
 8003792:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003796:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003798:	794a      	ldrb	r2, [r1, #5]
 800379a:	790b      	ldrb	r3, [r1, #4]
 800379c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80037a0:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80037a2:	79ca      	ldrb	r2, [r1, #7]
 80037a4:	798b      	ldrb	r3, [r1, #6]
 80037a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80037aa:	80c3      	strh	r3, [r0, #6]
 80037ac:	4770      	bx	lr

080037ae <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80037ae:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 80037b0:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80037b2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80037b4:	f001 fc1e 	bl	8004ff4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80037b8:	4620      	mov	r0, r4
 80037ba:	2100      	movs	r1, #0
}
 80037bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
  USBD_LL_StallEP(pdev , 0);
 80037c0:	f001 bc18 	b.w	8004ff4 <USBD_LL_StallEP>

080037c4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80037c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 80037c6:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80037c8:	4604      	mov	r4, r0
 80037ca:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 80037cc:	2b09      	cmp	r3, #9
 80037ce:	f200 8105 	bhi.w	80039dc <USBD_StdDevReq+0x218>
 80037d2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80037d6:	00d7      	.short	0x00d7
 80037d8:	010300ee 	.word	0x010300ee
 80037dc:	010300ea 	.word	0x010300ea
 80037e0:	000a0081 	.word	0x000a0081
 80037e4:	00c70103 	.word	0x00c70103
 80037e8:	009d      	.short	0x009d
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80037ea:	884b      	ldrh	r3, [r1, #2]
 80037ec:	0a1a      	lsrs	r2, r3, #8
 80037ee:	3a01      	subs	r2, #1
 80037f0:	2a0e      	cmp	r2, #14
 80037f2:	f200 80f3 	bhi.w	80039dc <USBD_StdDevReq+0x218>
 80037f6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80037fa:	0013      	.short	0x0013
 80037fc:	0027001b 	.word	0x0027001b
 8003800:	00f100f1 	.word	0x00f100f1
 8003804:	00530048 	.word	0x00530048
 8003808:	00f100f1 	.word	0x00f100f1
 800380c:	00f100f1 	.word	0x00f100f1
 8003810:	00f100f1 	.word	0x00f100f1
 8003814:	000f00f1 	.word	0x000f00f1
  { 
#if (USBD_LPM_ENABLED == 1)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8003818:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	e002      	b.n	8003826 <USBD_StdDevReq+0x62>
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003820:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	7c20      	ldrb	r0, [r4, #16]
 8003828:	f10d 0106 	add.w	r1, sp, #6
 800382c:	4798      	blx	r3
 800382e:	e043      	b.n	80038b8 <USBD_StdDevReq+0xf4>
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8003830:	7c02      	ldrb	r2, [r0, #16]
 8003832:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003836:	b90a      	cbnz	r2, 800383c <USBD_StdDevReq+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	e000      	b.n	800383e <USBD_StdDevReq+0x7a>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	f10d 0006 	add.w	r0, sp, #6
 8003842:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003844:	2302      	movs	r3, #2
 8003846:	e036      	b.n	80038b6 <USBD_StdDevReq+0xf2>
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b05      	cmp	r3, #5
 800384c:	f200 80c6 	bhi.w	80039dc <USBD_StdDevReq+0x218>
 8003850:	e8df f003 	tbb	[pc, r3]
 8003854:	0f0b0703 	.word	0x0f0b0703
 8003858:	1713      	.short	0x1713
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800385a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	e7e1      	b.n	8003826 <USBD_StdDevReq+0x62>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003862:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	e7dd      	b.n	8003826 <USBD_StdDevReq+0x62>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800386a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	e7d9      	b.n	8003826 <USBD_StdDevReq+0x62>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003872:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	e7d5      	b.n	8003826 <USBD_StdDevReq+0x62>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800387a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	e7d1      	b.n	8003826 <USBD_StdDevReq+0x62>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003882:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	e7cd      	b.n	8003826 <USBD_StdDevReq+0x62>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800388a:	7c03      	ldrb	r3, [r0, #16]
 800388c:	2b00      	cmp	r3, #0
 800388e:	f040 80a5 	bne.w	80039dc <USBD_StdDevReq+0x218>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003892:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003896:	f10d 0006 	add.w	r0, sp, #6
 800389a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389c:	4798      	blx	r3
 800389e:	e00b      	b.n	80038b8 <USBD_StdDevReq+0xf4>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80038a0:	7c03      	ldrb	r3, [r0, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f040 809a 	bne.w	80039dc <USBD_StdDevReq+0x218>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80038a8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80038ac:	f10d 0006 	add.w	r0, sp, #6
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80038b4:	2307      	movs	r3, #7
 80038b6:	7043      	strb	r3, [r0, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 80038b8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80038bc:	2a00      	cmp	r2, #0
 80038be:	f000 8091 	beq.w	80039e4 <USBD_StdDevReq+0x220>
 80038c2:	88eb      	ldrh	r3, [r5, #6]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 808d 	beq.w	80039e4 <USBD_StdDevReq+0x220>
  {
    
    len = MIN(len , req->wLength);
 80038ca:	429a      	cmp	r2, r3
 80038cc:	bf28      	it	cs
 80038ce:	461a      	movcs	r2, r3
 80038d0:	f8ad 2006 	strh.w	r2, [sp, #6]
    
    USBD_CtlSendData (pdev, 
 80038d4:	4601      	mov	r1, r0
 80038d6:	e064      	b.n	80039a2 <USBD_StdDevReq+0x1de>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80038d8:	888b      	ldrh	r3, [r1, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d17e      	bne.n	80039dc <USBD_StdDevReq+0x218>
 80038de:	88cb      	ldrh	r3, [r1, #6]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d17b      	bne.n	80039dc <USBD_StdDevReq+0x218>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80038e4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80038e8:	788e      	ldrb	r6, [r1, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80038ea:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80038ec:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80038f0:	d074      	beq.n	80039dc <USBD_StdDevReq+0x218>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 80038f2:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80038f6:	4631      	mov	r1, r6
 80038f8:	f001 fbac 	bl	8005054 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80038fc:	4620      	mov	r0, r4
 80038fe:	f000 f92b 	bl	8003b58 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8003902:	b10e      	cbz	r6, 8003908 <USBD_StdDevReq+0x144>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8003904:	2302      	movs	r3, #2
 8003906:	e000      	b.n	800390a <USBD_StdDevReq+0x146>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003908:	2301      	movs	r3, #1
 800390a:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 800390e:	e069      	b.n	80039e4 <USBD_StdDevReq+0x220>
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8003910:	7889      	ldrb	r1, [r1, #2]
 8003912:	4e36      	ldr	r6, [pc, #216]	; (80039ec <USBD_StdDevReq+0x228>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003914:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8003916:	7031      	strb	r1, [r6, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003918:	d860      	bhi.n	80039dc <USBD_StdDevReq+0x218>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 800391a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800391e:	2b02      	cmp	r3, #2
 8003920:	d002      	beq.n	8003928 <USBD_StdDevReq+0x164>
 8003922:	2b03      	cmp	r3, #3
 8003924:	d008      	beq.n	8003938 <USBD_StdDevReq+0x174>
 8003926:	e059      	b.n	80039dc <USBD_StdDevReq+0x218>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8003928:	2900      	cmp	r1, #0
 800392a:	d053      	beq.n	80039d4 <USBD_StdDevReq+0x210>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 800392c:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800392e:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8003930:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003932:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 8003936:	e00f      	b.n	8003958 <USBD_StdDevReq+0x194>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8003938:	b931      	cbnz	r1, 8003948 <USBD_StdDevReq+0x184>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800393a:	2302      	movs	r3, #2
 800393c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8003940:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8003942:	f7ff fe1f 	bl	8003584 <USBD_ClrClassConfig>
 8003946:	e045      	b.n	80039d4 <USBD_StdDevReq+0x210>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 8003948:	6841      	ldr	r1, [r0, #4]
 800394a:	2901      	cmp	r1, #1
 800394c:	d042      	beq.n	80039d4 <USBD_StdDevReq+0x210>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800394e:	b2c9      	uxtb	r1, r1
 8003950:	f7ff fe18 	bl	8003584 <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 8003954:	7831      	ldrb	r1, [r6, #0]
 8003956:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003958:	4620      	mov	r0, r4
 800395a:	f7ff fe08 	bl	800356e <USBD_SetClassConfig>
 800395e:	2802      	cmp	r0, #2
 8003960:	d138      	bne.n	80039d4 <USBD_StdDevReq+0x210>
 8003962:	e03b      	b.n	80039dc <USBD_StdDevReq+0x218>
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 8003964:	88ca      	ldrh	r2, [r1, #6]
 8003966:	2a01      	cmp	r2, #1
 8003968:	d138      	bne.n	80039dc <USBD_StdDevReq+0x218>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 800396a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800396e:	2b02      	cmp	r3, #2
 8003970:	d003      	beq.n	800397a <USBD_StdDevReq+0x1b6>
 8003972:	2b03      	cmp	r3, #3
 8003974:	d132      	bne.n	80039dc <USBD_StdDevReq+0x218>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 8003976:	1d01      	adds	r1, r0, #4
 8003978:	e013      	b.n	80039a2 <USBD_StdDevReq+0x1de>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 800397a:	4601      	mov	r1, r0
 800397c:	2300      	movs	r3, #0
 800397e:	f841 3f08 	str.w	r3, [r1, #8]!
 8003982:	e00e      	b.n	80039a2 <USBD_StdDevReq+0x1de>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 8003984:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003988:	3b02      	subs	r3, #2
 800398a:	2b01      	cmp	r3, #1
 800398c:	d826      	bhi.n	80039dc <USBD_StdDevReq+0x218>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800398e:	2301      	movs	r3, #1
 8003990:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8003992:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003996:	b10b      	cbz	r3, 800399c <USBD_StdDevReq+0x1d8>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8003998:	2303      	movs	r3, #3
 800399a:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 800399c:	2202      	movs	r2, #2
 800399e:	f104 010c 	add.w	r1, r4, #12
 80039a2:	4620      	mov	r0, r4
 80039a4:	f000 f8bb 	bl	8003b1e <USBD_CtlSendData>
 80039a8:	e01c      	b.n	80039e4 <USBD_StdDevReq+0x220>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80039aa:	884b      	ldrh	r3, [r1, #2]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d119      	bne.n	80039e4 <USBD_StdDevReq+0x220>
 80039b0:	e008      	b.n	80039c4 <USBD_StdDevReq+0x200>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 80039b2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80039b6:	3b02      	subs	r3, #2
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d80f      	bhi.n	80039dc <USBD_StdDevReq+0x218>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80039bc:	884b      	ldrh	r3, [r1, #2]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d110      	bne.n	80039e4 <USBD_StdDevReq+0x220>
    {
      pdev->dev_remote_wakeup = 0; 
 80039c2:	2300      	movs	r3, #0
 80039c4:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80039c8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80039cc:	4629      	mov	r1, r5
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4620      	mov	r0, r4
 80039d2:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80039d4:	4620      	mov	r0, r4
 80039d6:	f000 f8bf 	bl	8003b58 <USBD_CtlSendStatus>
 80039da:	e003      	b.n	80039e4 <USBD_StdDevReq+0x220>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 80039dc:	4629      	mov	r1, r5
 80039de:	4620      	mov	r0, r4
 80039e0:	f7ff fee5 	bl	80037ae <USBD_CtlError>
    break;
  }
  
  return ret;
}
 80039e4:	2000      	movs	r0, #0
 80039e6:	b002      	add	sp, #8
 80039e8:	bd70      	pop	{r4, r5, r6, pc}
 80039ea:	bf00      	nop
 80039ec:	20000190 	.word	0x20000190

080039f0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80039f0:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 80039f2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80039f6:	2b03      	cmp	r3, #3
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80039f8:	4604      	mov	r4, r0
 80039fa:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 80039fc:	d10c      	bne.n	8003a18 <USBD_StdItfReq+0x28>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80039fe:	790b      	ldrb	r3, [r1, #4]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d809      	bhi.n	8003a18 <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 8003a04:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003a0c:	88eb      	ldrh	r3, [r5, #6]
 8003a0e:	b92b      	cbnz	r3, 8003a1c <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 8003a10:	4620      	mov	r0, r4
 8003a12:	f000 f8a1 	bl	8003b58 <USBD_CtlSendStatus>
 8003a16:	e001      	b.n	8003a1c <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 8003a18:	f7ff fec9 	bl	80037ae <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	bd38      	pop	{r3, r4, r5, pc}

08003a20 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003a20:	b570      	push	{r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8003a22:	780a      	ldrb	r2, [r1, #0]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8003a24:	888e      	ldrh	r6, [r1, #4]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8003a26:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003a2a:	2a20      	cmp	r2, #32
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003a2c:	4604      	mov	r4, r0
 8003a2e:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8003a30:	b2f3      	uxtb	r3, r6
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8003a32:	d104      	bne.n	8003a3e <USBD_StdEPReq+0x1e>
  {
    pdev->pClass->Setup (pdev, req);
 8003a34:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	4798      	blx	r3
    
    return USBD_OK;
 8003a3c:	e051      	b.n	8003ae2 <USBD_StdEPReq+0xc2>
  }
  
  switch (req->bRequest) 
 8003a3e:	784a      	ldrb	r2, [r1, #1]
 8003a40:	2a01      	cmp	r2, #1
 8003a42:	d010      	beq.n	8003a66 <USBD_StdEPReq+0x46>
 8003a44:	d326      	bcc.n	8003a94 <USBD_StdEPReq+0x74>
 8003a46:	2a03      	cmp	r2, #3
 8003a48:	d14b      	bne.n	8003ae2 <USBD_StdEPReq+0xc2>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 8003a4a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003a4e:	2a02      	cmp	r2, #2
 8003a50:	d027      	beq.n	8003aa2 <USBD_StdEPReq+0x82>
 8003a52:	2a03      	cmp	r2, #3
 8003a54:	d143      	bne.n	8003ade <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003a56:	884a      	ldrh	r2, [r1, #2]
 8003a58:	b992      	cbnz	r2, 8003a80 <USBD_StdEPReq+0x60>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003a5a:	065e      	lsls	r6, r3, #25
 8003a5c:	d010      	beq.n	8003a80 <USBD_StdEPReq+0x60>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 8003a5e:	4619      	mov	r1, r3
 8003a60:	f001 fac8 	bl	8004ff4 <USBD_LL_StallEP>
 8003a64:	e00c      	b.n	8003a80 <USBD_StdEPReq+0x60>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 8003a66:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003a6a:	2a02      	cmp	r2, #2
 8003a6c:	d019      	beq.n	8003aa2 <USBD_StdEPReq+0x82>
 8003a6e:	2a03      	cmp	r2, #3
 8003a70:	d135      	bne.n	8003ade <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003a72:	884a      	ldrh	r2, [r1, #2]
 8003a74:	bbaa      	cbnz	r2, 8003ae2 <USBD_StdEPReq+0xc2>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 8003a76:	0659      	lsls	r1, r3, #25
 8003a78:	d008      	beq.n	8003a8c <USBD_StdEPReq+0x6c>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	f001 fac8 	bl	8005010 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8003a80:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003a84:	4629      	mov	r1, r5
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4620      	mov	r0, r4
 8003a8a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	f000 f863 	bl	8003b58 <USBD_CtlSendStatus>
 8003a92:	e026      	b.n	8003ae2 <USBD_StdEPReq+0xc2>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8003a94:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003a98:	2a02      	cmp	r2, #2
 8003a9a:	d002      	beq.n	8003aa2 <USBD_StdEPReq+0x82>
 8003a9c:	2a03      	cmp	r2, #3
 8003a9e:	d006      	beq.n	8003aae <USBD_StdEPReq+0x8e>
 8003aa0:	e01d      	b.n	8003ade <USBD_StdEPReq+0xbe>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 8003aa2:	065a      	lsls	r2, r3, #25
 8003aa4:	d01d      	beq.n	8003ae2 <USBD_StdEPReq+0xc2>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	f001 faa4 	bl	8004ff4 <USBD_LL_StallEP>
 8003aac:	e019      	b.n	8003ae2 <USBD_StdEPReq+0xc2>
 8003aae:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003ab2:	f016 0f80 	tst.w	r6, #128	; 0x80
 8003ab6:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003aba:	4619      	mov	r1, r3
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003abc:	bf14      	ite	ne
 8003abe:	3514      	addne	r5, #20
 8003ac0:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003ac4:	f001 fab2 	bl	800502c <USBD_LL_IsStallEP>
 8003ac8:	b110      	cbz	r0, 8003ad0 <USBD_StdEPReq+0xb0>
      {
        pep->status = 0x0001;     
 8003aca:	2301      	movs	r3, #1
 8003acc:	602b      	str	r3, [r5, #0]
 8003ace:	e000      	b.n	8003ad2 <USBD_StdEPReq+0xb2>
      }
      else
      {
        pep->status = 0x0000;  
 8003ad0:	6028      	str	r0, [r5, #0]
      }
      
      USBD_CtlSendData (pdev,
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f000 f821 	bl	8003b1e <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 8003adc:	e001      	b.n	8003ae2 <USBD_StdEPReq+0xc2>
      
    default:                         
      USBD_CtlError(pdev , req);
 8003ade:	f7ff fe66 	bl	80037ae <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	bd70      	pop	{r4, r5, r6, pc}

08003ae6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003ae6:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8003ae8:	b1c0      	cbz	r0, 8003b1c <USBD_GetString+0x36>
 8003aea:	4605      	mov	r5, r0
 8003aec:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8003aee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2c00      	cmp	r4, #0
 8003af6:	d1f9      	bne.n	8003aec <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	3302      	adds	r3, #2
 8003afc:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8003afe:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003b00:	2303      	movs	r3, #3
 8003b02:	704b      	strb	r3, [r1, #1]
 8003b04:	3801      	subs	r0, #1
 8003b06:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 8003b08:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003b0c:	b135      	cbz	r5, 8003b1c <USBD_GetString+0x36>
    {
      unicode[idx++] = *desc++;
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8003b14:	3302      	adds	r3, #2
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	548c      	strb	r4, [r1, r2]
 8003b1a:	e7f5      	b.n	8003b08 <USBD_GetString+0x22>
 8003b1c:	bd30      	pop	{r4, r5, pc}

08003b1e <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003b1e:	b510      	push	{r4, lr}
 8003b20:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003b22:	2202      	movs	r2, #2
 8003b24:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8003b28:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003b2a:	460a      	mov	r2, r1
                               uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8003b2c:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003b2e:	2100      	movs	r1, #0
 8003b30:	f001 fa9e 	bl	8005070 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003b34:	2000      	movs	r0, #0
 8003b36:	bd10      	pop	{r4, pc}

08003b38 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003b38:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	460a      	mov	r2, r1
 8003b3e:	2100      	movs	r1, #0
 8003b40:	f001 fa96 	bl	8005070 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003b44:	2000      	movs	r0, #0
 8003b46:	bd08      	pop	{r3, pc}

08003b48 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003b48:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	460a      	mov	r2, r1
 8003b4e:	2100      	movs	r1, #0
 8003b50:	f001 fa9c 	bl	800508c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8003b54:	2000      	movs	r0, #0
 8003b56:	bd08      	pop	{r3, pc}

08003b58 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8003b58:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8003b60:	2300      	movs	r3, #0
 8003b62:	461a      	mov	r2, r3
 8003b64:	4619      	mov	r1, r3
 8003b66:	f001 fa83 	bl	8005070 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	bd08      	pop	{r3, pc}

08003b6e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8003b6e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8003b70:	2305      	movs	r3, #5
 8003b72:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003b76:	2300      	movs	r3, #0
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	f001 fa86 	bl	800508c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8003b80:	2000      	movs	r0, #0
 8003b82:	bd08      	pop	{r3, pc}

08003b84 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003b84:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003b86:	f000 fbf3 	bl	8004370 <vTaskStartScheduler>
  
  return osOK;
}
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	bd08      	pop	{r3, pc}

08003b8e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003b8e:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b90:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8003b94:	8a02      	ldrh	r2, [r0, #16]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003b96:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b98:	e890 0022 	ldmia.w	r0, {r1, r5}
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003b9c:	b085      	sub	sp, #20
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8003b9e:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8003ba0:	bf14      	ite	ne
 8003ba2:	3403      	addne	r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003ba4:	2400      	moveq	r4, #0

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ba6:	a803      	add	r0, sp, #12
 8003ba8:	9001      	str	r0, [sp, #4]
 8003baa:	9400      	str	r4, [sp, #0]
 8003bac:	4628      	mov	r0, r5
 8003bae:	f000 fb09 	bl	80041c4 <xTaskCreate>
 8003bb2:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003bb4:	bf0c      	ite	eq
 8003bb6:	9803      	ldreq	r0, [sp, #12]
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 8003bb8:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
}
 8003bba:	b005      	add	sp, #20
 8003bbc:	bd30      	pop	{r4, r5, pc}

08003bbe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003bbe:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	bf08      	it	eq
 8003bc4:	2001      	moveq	r0, #1
 8003bc6:	f000 fd27 	bl	8004618 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003bca:	2000      	movs	r0, #0
 8003bcc:	bd08      	pop	{r3, pc}

08003bce <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8003bce:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003bd0:	f000 fdbc 	bl	800474c <xTaskGetSchedulerState>
 8003bd4:	2801      	cmp	r0, #1
 8003bd6:	d003      	beq.n	8003be0 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8003bd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8003bdc:	f000 b90a 	b.w	8003df4 <xPortSysTickHandler>
 8003be0:	bd08      	pop	{r3, pc}

08003be2 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003be2:	f100 0308 	add.w	r3, r0, #8
 8003be6:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003be8:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bec:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bee:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bf0:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bf2:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bf4:	6003      	str	r3, [r0, #0]
 8003bf6:	4770      	bx	lr

08003bf8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	6103      	str	r3, [r0, #16]
 8003bfc:	4770      	bx	lr

08003bfe <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bfe:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c00:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c0a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003c0c:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c0e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003c10:	3301      	adds	r3, #1
 8003c12:	6003      	str	r3, [r0, #0]
 8003c14:	4770      	bx	lr

08003c16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c16:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c18:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c1a:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c1c:	d101      	bne.n	8003c22 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c1e:	6903      	ldr	r3, [r0, #16]
 8003c20:	e007      	b.n	8003c32 <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c22:	f100 0308 	add.w	r3, r0, #8
 8003c26:	685c      	ldr	r4, [r3, #4]
 8003c28:	6825      	ldr	r5, [r4, #0]
 8003c2a:	42aa      	cmp	r2, r5
 8003c2c:	d301      	bcc.n	8003c32 <vListInsert+0x1c>
 8003c2e:	4623      	mov	r3, r4
 8003c30:	e7f9      	b.n	8003c26 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c36:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c38:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c3a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003c3c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c3e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003c40:	3301      	adds	r3, #1
 8003c42:	6003      	str	r3, [r0, #0]
 8003c44:	bd30      	pop	{r4, r5, pc}

08003c46 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c46:	6841      	ldr	r1, [r0, #4]
 8003c48:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003c4a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c4c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c4e:	6882      	ldr	r2, [r0, #8]
 8003c50:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c56:	bf08      	it	eq
 8003c58:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	3801      	subs	r0, #1
 8003c62:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8003c64:	4770      	bx	lr
	...

08003c68 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c68:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <prvTaskExitError+0x2c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	d008      	beq.n	8003c82 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	e7fe      	b.n	8003c80 <prvTaskExitError+0x18>
 8003c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	e7fe      	b.n	8003c92 <prvTaskExitError+0x2a>
 8003c94:	200000a4 	.word	0x200000a4

08003c98 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003c98:	4806      	ldr	r0, [pc, #24]	; (8003cb4 <prvPortStartFirstTask+0x1c>)
 8003c9a:	6800      	ldr	r0, [r0, #0]
 8003c9c:	6800      	ldr	r0, [r0, #0]
 8003c9e:	f380 8808 	msr	MSP, r0
 8003ca2:	b662      	cpsie	i
 8003ca4:	b661      	cpsie	f
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	df00      	svc	0
 8003cb0:	bf00      	nop
 8003cb2:	0000      	.short	0x0000
 8003cb4:	e000ed08 	.word	0xe000ed08

08003cb8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003cb8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003cc8 <vPortEnableVFP+0x10>
 8003cbc:	6801      	ldr	r1, [r0, #0]
 8003cbe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003cc2:	6001      	str	r1, [r0, #0]
 8003cc4:	4770      	bx	lr
 8003cc6:	0000      	.short	0x0000
 8003cc8:	e000ed88 	.word	0xe000ed88

08003ccc <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ccc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cd0:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003cd4:	4b07      	ldr	r3, [pc, #28]	; (8003cf4 <pxPortInitialiseStack+0x28>)
 8003cd6:	f840 3c0c 	str.w	r3, [r0, #-12]
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003cda:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003cde:	f06f 0302 	mvn.w	r3, #2
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ce2:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ce6:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003cea:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8003cee:	3844      	subs	r0, #68	; 0x44
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	08003c69 	.word	0x08003c69
	...

08003d00 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003d00:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <pxCurrentTCBConst2>)
 8003d02:	6819      	ldr	r1, [r3, #0]
 8003d04:	6808      	ldr	r0, [r1, #0]
 8003d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d0a:	f380 8809 	msr	PSP, r0
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	f04f 0000 	mov.w	r0, #0
 8003d16:	f380 8811 	msr	BASEPRI, r0
 8003d1a:	4770      	bx	lr
 8003d1c:	f3af 8000 	nop.w

08003d20 <pxCurrentTCBConst2>:
 8003d20:	20003e7c 	.word	0x20003e7c

08003d24 <vPortEnterCritical>:
 8003d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003d34:	4a0a      	ldr	r2, [pc, #40]	; (8003d60 <vPortEnterCritical+0x3c>)
 8003d36:	6813      	ldr	r3, [r2, #0]
 8003d38:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003d3a:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003d3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003d3e:	d10d      	bne.n	8003d5c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d40:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <vPortEnterCritical+0x40>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003d48:	d008      	beq.n	8003d5c <vPortEnterCritical+0x38>
 8003d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	e7fe      	b.n	8003d5a <vPortEnterCritical+0x36>
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	200000a4 	.word	0x200000a4
 8003d64:	e000ed04 	.word	0xe000ed04

08003d68 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8003d68:	4a08      	ldr	r2, [pc, #32]	; (8003d8c <vPortExitCritical+0x24>)
 8003d6a:	6813      	ldr	r3, [r2, #0]
 8003d6c:	b943      	cbnz	r3, 8003d80 <vPortExitCritical+0x18>
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	e7fe      	b.n	8003d7e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003d80:	3b01      	subs	r3, #1
 8003d82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d84:	b90b      	cbnz	r3, 8003d8a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	4770      	bx	lr
 8003d8c:	200000a4 	.word	0x200000a4

08003d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d90:	f3ef 8009 	mrs	r0, PSP
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <pxCurrentTCBConst>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	f01e 0f10 	tst.w	lr, #16
 8003da0:	bf08      	it	eq
 8003da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003daa:	6010      	str	r0, [r2, #0]
 8003dac:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003db0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003db4:	f380 8811 	msr	BASEPRI, r0
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f000 fc8a 	bl	80046d8 <vTaskSwitchContext>
 8003dc4:	f04f 0000 	mov.w	r0, #0
 8003dc8:	f380 8811 	msr	BASEPRI, r0
 8003dcc:	bc08      	pop	{r3}
 8003dce:	6819      	ldr	r1, [r3, #0]
 8003dd0:	6808      	ldr	r0, [r1, #0]
 8003dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd6:	f01e 0f10 	tst.w	lr, #16
 8003dda:	bf08      	it	eq
 8003ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003de0:	f380 8809 	msr	PSP, r0
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	f3af 8000 	nop.w

08003df0 <pxCurrentTCBConst>:
 8003df0:	20003e7c 	.word	0x20003e7c

08003df4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003df4:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003e06:	f000 faf7 	bl	80043f8 <xTaskIncrementTick>
 8003e0a:	b118      	cbz	r0, 8003e14 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e0c:	4b03      	ldr	r3, [pc, #12]	; (8003e1c <xPortSysTickHandler+0x28>)
 8003e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e12:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e14:	2300      	movs	r3, #0
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	bd08      	pop	{r3, pc}
 8003e1c:	e000ed04 	.word	0xe000ed04

08003e20 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e20:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <vPortSetupTimerInterrupt+0x1c>)
 8003e22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e2c:	4a04      	ldr	r2, [pc, #16]	; (8003e40 <vPortSetupTimerInterrupt+0x20>)
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e32:	4b04      	ldr	r3, [pc, #16]	; (8003e44 <vPortSetupTimerInterrupt+0x24>)
 8003e34:	2207      	movs	r2, #7
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	200000a8 	.word	0x200000a8
 8003e40:	e000e014 	.word	0xe000e014
 8003e44:	e000e010 	.word	0xe000e010

08003e48 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e48:	4b31      	ldr	r3, [pc, #196]	; (8003f10 <xPortStartScheduler+0xc8>)
 8003e4a:	4a32      	ldr	r2, [pc, #200]	; (8003f14 <xPortStartScheduler+0xcc>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e4c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e4e:	6819      	ldr	r1, [r3, #0]
 8003e50:	4291      	cmp	r1, r2
 8003e52:	d108      	bne.n	8003e66 <xPortStartScheduler+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	e7fe      	b.n	8003e64 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	4b2b      	ldr	r3, [pc, #172]	; (8003f18 <xPortStartScheduler+0xd0>)
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d108      	bne.n	8003e80 <xPortStartScheduler+0x38>
 8003e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	e7fe      	b.n	8003e7e <xPortStartScheduler+0x36>
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e80:	4b26      	ldr	r3, [pc, #152]	; (8003f1c <xPortStartScheduler+0xd4>)
 8003e82:	781a      	ldrb	r2, [r3, #0]
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e88:	22ff      	movs	r2, #255	; 0xff
 8003e8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e8c:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e8e:	4a24      	ldr	r2, [pc, #144]	; (8003f20 <xPortStartScheduler+0xd8>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e96:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003e9a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e9e:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ea0:	4b20      	ldr	r3, [pc, #128]	; (8003f24 <xPortStartScheduler+0xdc>)
 8003ea2:	2207      	movs	r2, #7
 8003ea4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003eac:	0600      	lsls	r0, r0, #24
 8003eae:	f102 34ff 	add.w	r4, r2, #4294967295
 8003eb2:	d508      	bpl.n	8003ec6 <xPortStartScheduler+0x7e>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003eb4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003eb8:	0052      	lsls	r2, r2, #1
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	f88d 2003 	strb.w	r2, [sp, #3]
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	4622      	mov	r2, r4
 8003ec4:	e7f0      	b.n	8003ea8 <xPortStartScheduler+0x60>
 8003ec6:	b101      	cbz	r1, 8003eca <xPortStartScheduler+0x82>
 8003ec8:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	0212      	lsls	r2, r2, #8
 8003ece:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003ed2:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ed4:	9b01      	ldr	r3, [sp, #4]
 8003ed6:	4a11      	ldr	r2, [pc, #68]	; (8003f1c <xPortStartScheduler+0xd4>)
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003edc:	4b12      	ldr	r3, [pc, #72]	; (8003f28 <xPortStartScheduler+0xe0>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003eec:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003eee:	f7ff ff97 	bl	8003e20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <xPortStartScheduler+0xe4>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003ef8:	f7ff fede 	bl	8003cb8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003efc:	4a0c      	ldr	r2, [pc, #48]	; (8003f30 <xPortStartScheduler+0xe8>)
 8003efe:	6813      	ldr	r3, [r2, #0]
 8003f00:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f04:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f06:	f7ff fec7 	bl	8003c98 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8003f0a:	f7ff fead 	bl	8003c68 <prvTaskExitError>
 8003f0e:	bf00      	nop
 8003f10:	e000ed00 	.word	0xe000ed00
 8003f14:	410fc271 	.word	0x410fc271
 8003f18:	410fc270 	.word	0x410fc270
 8003f1c:	e000e400 	.word	0xe000e400
 8003f20:	20000191 	.word	0x20000191
 8003f24:	20000194 	.word	0x20000194
 8003f28:	e000ed20 	.word	0xe000ed20
 8003f2c:	200000a4 	.word	0x200000a4
 8003f30:	e000ef34 	.word	0xe000ef34

08003f34 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f34:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f36:	4b0f      	ldr	r3, [pc, #60]	; (8003f74 <prvInsertBlockIntoFreeList+0x40>)
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	4282      	cmp	r2, r0
 8003f3c:	d201      	bcs.n	8003f42 <prvInsertBlockIntoFreeList+0xe>
 8003f3e:	4613      	mov	r3, r2
 8003f40:	e7fa      	b.n	8003f38 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f42:	6859      	ldr	r1, [r3, #4]
 8003f44:	185c      	adds	r4, r3, r1
 8003f46:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f48:	bf01      	itttt	eq
 8003f4a:	6840      	ldreq	r0, [r0, #4]
 8003f4c:	1809      	addeq	r1, r1, r0
 8003f4e:	4618      	moveq	r0, r3
 8003f50:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f52:	6841      	ldr	r1, [r0, #4]
 8003f54:	1844      	adds	r4, r0, r1
 8003f56:	42a2      	cmp	r2, r4
 8003f58:	d107      	bne.n	8003f6a <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f5a:	4c07      	ldr	r4, [pc, #28]	; (8003f78 <prvInsertBlockIntoFreeList+0x44>)
 8003f5c:	6824      	ldr	r4, [r4, #0]
 8003f5e:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f60:	bf1f      	itttt	ne
 8003f62:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f64:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f66:	1909      	addne	r1, r1, r4
 8003f68:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003f6a:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f6c:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f6e:	bf18      	it	ne
 8003f70:	6018      	strne	r0, [r3, #0]
 8003f72:	bd10      	pop	{r4, pc}
 8003f74:	200001a0 	.word	0x200001a0
 8003f78:	2000019c 	.word	0x2000019c

08003f7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f80:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8003f82:	f000 fa31 	bl	80043e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003f86:	4940      	ldr	r1, [pc, #256]	; (8004088 <pvPortMalloc+0x10c>)
 8003f88:	4d40      	ldr	r5, [pc, #256]	; (800408c <pvPortMalloc+0x110>)
 8003f8a:	680b      	ldr	r3, [r1, #0]
 8003f8c:	bb0b      	cbnz	r3, 8003fd2 <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003f8e:	4a40      	ldr	r2, [pc, #256]	; (8004090 <pvPortMalloc+0x114>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f90:	0756      	lsls	r6, r2, #29
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f92:	bf1f      	itttt	ne
 8003f94:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f96:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f9a:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8003f9e:	1a1b      	subne	r3, r3, r0
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fa0:	bf14      	ite	ne
 8003fa2:	4602      	movne	r2, r0
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003fa4:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003fa8:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8003faa:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fac:	f023 0307 	bic.w	r3, r3, #7

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003fb0:	4e38      	ldr	r6, [pc, #224]	; (8004094 <pvPortMalloc+0x118>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 8003fb2:	600b      	str	r3, [r1, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	6070      	str	r0, [r6, #4]

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003fb8:	6032      	str	r2, [r6, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 8003fba:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003fbc:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003fbe:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003fc0:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fc2:	4b35      	ldr	r3, [pc, #212]	; (8004098 <pvPortMalloc+0x11c>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003fc4:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fc6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fc8:	4b34      	ldr	r3, [pc, #208]	; (800409c <pvPortMalloc+0x120>)
 8003fca:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003fcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003fd0:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003fd2:	682f      	ldr	r7, [r5, #0]
 8003fd4:	4227      	tst	r7, r4
 8003fd6:	d146      	bne.n	8004066 <pvPortMalloc+0xea>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003fd8:	2c00      	cmp	r4, #0
 8003fda:	d045      	beq.n	8004068 <pvPortMalloc+0xec>
			{
				xWantedSize += xHeapStructSize;
 8003fdc:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003fe0:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003fe2:	bf1c      	itt	ne
 8003fe4:	f023 0307 	bicne.w	r3, r3, #7
 8003fe8:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d039      	beq.n	8004062 <pvPortMalloc+0xe6>
 8003fee:	4a2b      	ldr	r2, [pc, #172]	; (800409c <pvPortMalloc+0x120>)
 8003ff0:	6816      	ldr	r6, [r2, #0]
 8003ff2:	42b3      	cmp	r3, r6
 8003ff4:	4690      	mov	r8, r2
 8003ff6:	d836      	bhi.n	8004066 <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8003ff8:	4a26      	ldr	r2, [pc, #152]	; (8004094 <pvPortMalloc+0x118>)
 8003ffa:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ffc:	6868      	ldr	r0, [r5, #4]
 8003ffe:	4283      	cmp	r3, r0
 8004000:	d803      	bhi.n	800400a <pvPortMalloc+0x8e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004002:	6809      	ldr	r1, [r1, #0]
 8004004:	428d      	cmp	r5, r1
 8004006:	d106      	bne.n	8004016 <pvPortMalloc+0x9a>
 8004008:	e02d      	b.n	8004066 <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800400a:	682c      	ldr	r4, [r5, #0]
 800400c:	2c00      	cmp	r4, #0
 800400e:	d0f8      	beq.n	8004002 <pvPortMalloc+0x86>
 8004010:	462a      	mov	r2, r5
 8004012:	4625      	mov	r5, r4
 8004014:	e7f2      	b.n	8003ffc <pvPortMalloc+0x80>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004016:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004018:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800401a:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800401c:	1ac2      	subs	r2, r0, r3
 800401e:	2a10      	cmp	r2, #16
 8004020:	d90f      	bls.n	8004042 <pvPortMalloc+0xc6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004022:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004024:	0741      	lsls	r1, r0, #29
 8004026:	d008      	beq.n	800403a <pvPortMalloc+0xbe>
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	e7fe      	b.n	8004038 <pvPortMalloc+0xbc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800403a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800403c:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800403e:	f7ff ff79 	bl	8003f34 <prvInsertBlockIntoFreeList>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004042:	4915      	ldr	r1, [pc, #84]	; (8004098 <pvPortMalloc+0x11c>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004044:	686b      	ldr	r3, [r5, #4]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004046:	6808      	ldr	r0, [r1, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004048:	1af2      	subs	r2, r6, r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800404a:	431f      	orrs	r7, r3
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800404c:	4282      	cmp	r2, r0
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 800404e:	f04f 0300 	mov.w	r3, #0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004052:	f8c8 2000 	str.w	r2, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004056:	bf38      	it	cc
 8004058:	600a      	strcc	r2, [r1, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800405a:	3408      	adds	r4, #8
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800405c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800405e:	602b      	str	r3, [r5, #0]
 8004060:	e002      	b.n	8004068 <pvPortMalloc+0xec>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004062:	461c      	mov	r4, r3
 8004064:	e000      	b.n	8004068 <pvPortMalloc+0xec>
 8004066:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004068:	f000 fa5e 	bl	8004528 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800406c:	0763      	lsls	r3, r4, #29
 800406e:	d008      	beq.n	8004082 <pvPortMalloc+0x106>
 8004070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	e7fe      	b.n	8004080 <pvPortMalloc+0x104>
	return pvReturn;
}
 8004082:	4620      	mov	r0, r4
 8004084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004088:	2000019c 	.word	0x2000019c
 800408c:	20003da8 	.word	0x20003da8
 8004090:	200001a8 	.word	0x200001a8
 8004094:	200001a0 	.word	0x200001a0
 8004098:	20003dac 	.word	0x20003dac
 800409c:	20000198 	.word	0x20000198

080040a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80040a0:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 80040a2:	4604      	mov	r4, r0
 80040a4:	b370      	cbz	r0, 8004104 <vPortFree+0x64>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040a6:	4a18      	ldr	r2, [pc, #96]	; (8004108 <vPortFree+0x68>)
 80040a8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	4213      	tst	r3, r2
 80040b0:	d108      	bne.n	80040c4 <vPortFree+0x24>
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	e7fe      	b.n	80040c2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80040c4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80040c8:	b141      	cbz	r1, 80040dc <vPortFree+0x3c>
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	e7fe      	b.n	80040da <vPortFree+0x3a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80040dc:	ea23 0302 	bic.w	r3, r3, r2
 80040e0:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 80040e4:	f000 f980 	bl	80043e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040e8:	4a08      	ldr	r2, [pc, #32]	; (800410c <vPortFree+0x6c>)
 80040ea:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80040ee:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040f0:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040f4:	440b      	add	r3, r1
 80040f6:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040f8:	f7ff ff1c 	bl	8003f34 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 8004100:	f000 ba12 	b.w	8004528 <xTaskResumeAll>
 8004104:	bd10      	pop	{r4, pc}
 8004106:	bf00      	nop
 8004108:	20003da8 	.word	0x20003da8
 800410c:	20000198 	.word	0x20000198

08004110 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004110:	4a06      	ldr	r2, [pc, #24]	; (800412c <prvResetNextTaskUnblockTime+0x1c>)
 8004112:	6813      	ldr	r3, [r2, #0]
 8004114:	6819      	ldr	r1, [r3, #0]
 8004116:	4b06      	ldr	r3, [pc, #24]	; (8004130 <prvResetNextTaskUnblockTime+0x20>)
 8004118:	b911      	cbnz	r1, 8004120 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800411a:	f04f 32ff 	mov.w	r2, #4294967295
 800411e:	e003      	b.n	8004128 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004120:	6812      	ldr	r2, [r2, #0]
 8004122:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004124:	68d2      	ldr	r2, [r2, #12]
 8004126:	6852      	ldr	r2, [r2, #4]
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	4770      	bx	lr
 800412c:	20003db4 	.word	0x20003db4
 8004130:	20003e80 	.word	0x20003e80

08004134 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004136:	4b1c      	ldr	r3, [pc, #112]	; (80041a8 <prvAddCurrentTaskToDelayedList+0x74>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004138:	4d1c      	ldr	r5, [pc, #112]	; (80041ac <prvAddCurrentTaskToDelayedList+0x78>)


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800413a:	681e      	ldr	r6, [r3, #0]
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800413c:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800413e:	6828      	ldr	r0, [r5, #0]
 8004140:	3004      	adds	r0, #4
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004142:	460f      	mov	r7, r1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004144:	f7ff fd7f 	bl	8003c46 <uxListRemove>
 8004148:	462b      	mov	r3, r5
 800414a:	b940      	cbnz	r0, 800415e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800414c:	682a      	ldr	r2, [r5, #0]
 800414e:	4d18      	ldr	r5, [pc, #96]	; (80041b0 <prvAddCurrentTaskToDelayedList+0x7c>)
 8004150:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004152:	6828      	ldr	r0, [r5, #0]
 8004154:	2201      	movs	r2, #1
 8004156:	408a      	lsls	r2, r1
 8004158:	ea20 0202 	bic.w	r2, r0, r2
 800415c:	602a      	str	r2, [r5, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800415e:	1c62      	adds	r2, r4, #1
 8004160:	d107      	bne.n	8004172 <prvAddCurrentTaskToDelayedList+0x3e>
 8004162:	b137      	cbz	r7, 8004172 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004164:	6819      	ldr	r1, [r3, #0]
 8004166:	4813      	ldr	r0, [pc, #76]	; (80041b4 <prvAddCurrentTaskToDelayedList+0x80>)
 8004168:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800416a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800416e:	f7ff bd46 	b.w	8003bfe <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004172:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a0d      	ldr	r2, [pc, #52]	; (80041ac <prvAddCurrentTaskToDelayedList+0x78>)
 8004178:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800417a:	42a6      	cmp	r6, r4
 800417c:	d907      	bls.n	800418e <prvAddCurrentTaskToDelayedList+0x5a>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800417e:	4b0e      	ldr	r3, [pc, #56]	; (80041b8 <prvAddCurrentTaskToDelayedList+0x84>)
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	6811      	ldr	r1, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004184:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004188:	3104      	adds	r1, #4
 800418a:	f7ff bd44 	b.w	8003c16 <vListInsert>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800418e:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <prvAddCurrentTaskToDelayedList+0x88>)
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	6811      	ldr	r1, [r2, #0]
 8004194:	3104      	adds	r1, #4
 8004196:	f7ff fd3e 	bl	8003c16 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800419a:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <prvAddCurrentTaskToDelayedList+0x8c>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 80041a0:	bf38      	it	cc
 80041a2:	601c      	strcc	r4, [r3, #0]
 80041a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20003e84 	.word	0x20003e84
 80041ac:	20003e7c 	.word	0x20003e7c
 80041b0:	20003ed4 	.word	0x20003ed4
 80041b4:	20003ec0 	.word	0x20003ec0
 80041b8:	20003e88 	.word	0x20003e88
 80041bc:	20003db4 	.word	0x20003db4
 80041c0:	20003e80 	.word	0x20003e80

080041c4 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041c8:	0095      	lsls	r5, r2, #2
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041ca:	4680      	mov	r8, r0
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041cc:	4628      	mov	r0, r5
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041ce:	460f      	mov	r7, r1
 80041d0:	4699      	mov	r9, r3
 80041d2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041d4:	f7ff fed2 	bl	8003f7c <pvPortMalloc>

			if( pxStack != NULL )
 80041d8:	4682      	mov	sl, r0
 80041da:	2800      	cmp	r0, #0
 80041dc:	f000 80a8 	beq.w	8004330 <xTaskCreate+0x16c>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80041e0:	205c      	movs	r0, #92	; 0x5c
 80041e2:	f7ff fecb 	bl	8003f7c <pvPortMalloc>

				if( pxNewTCB != NULL )
 80041e6:	4604      	mov	r4, r0
 80041e8:	b188      	cbz	r0, 800420e <xTaskCreate+0x4a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041ea:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80041ee:	462a      	mov	r2, r5
 80041f0:	4650      	mov	r0, sl
 80041f2:	21a5      	movs	r1, #165	; 0xa5
 80041f4:	f001 f85c 	bl	80052b0 <memset>
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80041f8:	f1a5 0a04 	sub.w	sl, r5, #4
 80041fc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80041fe:	44aa      	add	sl, r5
 8004200:	1e7b      	subs	r3, r7, #1
 8004202:	f02a 0a07 	bic.w	sl, sl, #7
 8004206:	f104 0233 	add.w	r2, r4, #51	; 0x33
 800420a:	370f      	adds	r7, #15
 800420c:	e005      	b.n	800421a <xTaskCreate+0x56>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800420e:	4650      	mov	r0, sl
 8004210:	f7ff ff46 	bl	80040a0 <vPortFree>
 8004214:	e08c      	b.n	8004330 <xTaskCreate+0x16c>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004216:	429f      	cmp	r7, r3
 8004218:	d006      	beq.n	8004228 <xTaskCreate+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800421a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800421e:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004222:	7819      	ldrb	r1, [r3, #0]
 8004224:	2900      	cmp	r1, #0
 8004226:	d1f6      	bne.n	8004216 <xTaskCreate+0x52>
 8004228:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800422a:	2d06      	cmp	r5, #6
 800422c:	bf28      	it	cs
 800422e:	2506      	movcs	r5, #6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004230:	f04f 0b00 	mov.w	fp, #0
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004234:	1d27      	adds	r7, r4, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004236:	62e5      	str	r5, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004238:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800423a:	4638      	mov	r0, r7
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800423c:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43

	pxNewTCB->uxPriority = uxPriority;
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
 8004240:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004244:	f7ff fcd8 	bl	8003bf8 <vListInitialiseItem>
	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004248:	f1c5 0507 	rsb	r5, r5, #7
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800424c:	f104 0018 	add.w	r0, r4, #24
 8004250:	f7ff fcd2 	bl	8003bf8 <vListInitialiseItem>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004254:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004258:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800425a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800425c:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800425e:	f884 b058 	strb.w	fp, [r4, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004262:	464a      	mov	r2, r9
 8004264:	4641      	mov	r1, r8
 8004266:	4650      	mov	r0, sl
 8004268:	f7ff fd30 	bl	8003ccc <pxPortInitialiseStack>
 800426c:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800426e:	b106      	cbz	r6, 8004272 <xTaskCreate+0xae>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004270:	6034      	str	r4, [r6, #0]

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004272:	f7ff fd57 	bl	8003d24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004276:	4b30      	ldr	r3, [pc, #192]	; (8004338 <xTaskCreate+0x174>)
		if( pxCurrentTCB == NULL )
 8004278:	4e30      	ldr	r6, [pc, #192]	; (800433c <xTaskCreate+0x178>)
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
	{
		uxCurrentNumberOfTasks++;
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8004368 <xTaskCreate+0x1a4>
 8004280:	3201      	adds	r2, #1
 8004282:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004284:	6835      	ldr	r5, [r6, #0]
 8004286:	bb15      	cbnz	r5, 80042ce <xTaskCreate+0x10a>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004288:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d127      	bne.n	80042e0 <xTaskCreate+0x11c>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004290:	eb08 0005 	add.w	r0, r8, r5
 8004294:	3514      	adds	r5, #20
 8004296:	f7ff fca4 	bl	8003be2 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800429a:	2d8c      	cmp	r5, #140	; 0x8c
 800429c:	d1f8      	bne.n	8004290 <xTaskCreate+0xcc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800429e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800436c <xTaskCreate+0x1a8>
	vListInitialise( &xDelayedTaskList2 );
 80042a2:	4d27      	ldr	r5, [pc, #156]	; (8004340 <xTaskCreate+0x17c>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80042a4:	4648      	mov	r0, r9
 80042a6:	f7ff fc9c 	bl	8003be2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042aa:	4628      	mov	r0, r5
 80042ac:	f7ff fc99 	bl	8003be2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042b0:	4824      	ldr	r0, [pc, #144]	; (8004344 <xTaskCreate+0x180>)
 80042b2:	f7ff fc96 	bl	8003be2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042b6:	4824      	ldr	r0, [pc, #144]	; (8004348 <xTaskCreate+0x184>)
 80042b8:	f7ff fc93 	bl	8003be2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042bc:	4823      	ldr	r0, [pc, #140]	; (800434c <xTaskCreate+0x188>)
 80042be:	f7ff fc90 	bl	8003be2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042c2:	4b23      	ldr	r3, [pc, #140]	; (8004350 <xTaskCreate+0x18c>)
 80042c4:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042c8:	4b22      	ldr	r3, [pc, #136]	; (8004354 <xTaskCreate+0x190>)
 80042ca:	601d      	str	r5, [r3, #0]
 80042cc:	e008      	b.n	80042e0 <xTaskCreate+0x11c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042ce:	4b22      	ldr	r3, [pc, #136]	; (8004358 <xTaskCreate+0x194>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	b92b      	cbnz	r3, 80042e0 <xTaskCreate+0x11c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042d4:	6833      	ldr	r3, [r6, #0]
 80042d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80042da:	429a      	cmp	r2, r3
				{
					pxCurrentTCB = pxNewTCB;
 80042dc:	bf98      	it	ls
 80042de:	6034      	strls	r4, [r6, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042e0:	4a1e      	ldr	r2, [pc, #120]	; (800435c <xTaskCreate+0x198>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042e2:	491f      	ldr	r1, [pc, #124]	; (8004360 <xTaskCreate+0x19c>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042e4:	6813      	ldr	r3, [r2, #0]
 80042e6:	3301      	adds	r3, #1
 80042e8:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		uxTaskNumber++;

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80042ec:	6463      	str	r3, [r4, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042ee:	2501      	movs	r5, #1
 80042f0:	680b      	ldr	r3, [r1, #0]
 80042f2:	fa05 f002 	lsl.w	r0, r5, r2
 80042f6:	4303      	orrs	r3, r0
 80042f8:	2014      	movs	r0, #20
 80042fa:	600b      	str	r3, [r1, #0]
 80042fc:	fb00 8002 	mla	r0, r0, r2, r8
 8004300:	4639      	mov	r1, r7
 8004302:	f7ff fc7c 	bl	8003bfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004306:	f7ff fd2f 	bl	8003d68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800430a:	4b13      	ldr	r3, [pc, #76]	; (8004358 <xTaskCreate+0x194>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	b163      	cbz	r3, 800432a <xTaskCreate+0x166>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004310:	6833      	ldr	r3, [r6, #0]
 8004312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004314:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004316:	429a      	cmp	r2, r3
 8004318:	d207      	bcs.n	800432a <xTaskCreate+0x166>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800431a:	4b12      	ldr	r3, [pc, #72]	; (8004364 <xTaskCreate+0x1a0>)
 800431c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	f3bf 8f6f 	isb	sy
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
 800432a:	4628      	mov	r0, r5
 800432c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004330:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
 8004334:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004338:	20003ea4 	.word	0x20003ea4
 800433c:	20003e7c 	.word	0x20003e7c
 8004340:	20003ea8 	.word	0x20003ea8
 8004344:	20003e8c 	.word	0x20003e8c
 8004348:	20003e64 	.word	0x20003e64
 800434c:	20003ec0 	.word	0x20003ec0
 8004350:	20003db4 	.word	0x20003db4
 8004354:	20003e88 	.word	0x20003e88
 8004358:	20003db8 	.word	0x20003db8
 800435c:	20003ea0 	.word	0x20003ea0
 8004360:	20003ed4 	.word	0x20003ed4
 8004364:	e000ed04 	.word	0xe000ed04
 8004368:	20003dd8 	.word	0x20003dd8
 800436c:	20003dc0 	.word	0x20003dc0

08004370 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004370:	b513      	push	{r0, r1, r4, lr}
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004372:	4b17      	ldr	r3, [pc, #92]	; (80043d0 <vTaskStartScheduler+0x60>)
 8004374:	9301      	str	r3, [sp, #4]
 8004376:	2400      	movs	r4, #0
 8004378:	9400      	str	r4, [sp, #0]
 800437a:	4623      	mov	r3, r4
 800437c:	2280      	movs	r2, #128	; 0x80
 800437e:	4915      	ldr	r1, [pc, #84]	; (80043d4 <vTaskStartScheduler+0x64>)
 8004380:	4815      	ldr	r0, [pc, #84]	; (80043d8 <vTaskStartScheduler+0x68>)
 8004382:	f7ff ff1f 	bl	80041c4 <xTaskCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004386:	2801      	cmp	r0, #1
 8004388:	d114      	bne.n	80043b4 <vTaskStartScheduler+0x44>
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800439a:	4b10      	ldr	r3, [pc, #64]	; (80043dc <vTaskStartScheduler+0x6c>)
 800439c:	f04f 32ff 	mov.w	r2, #4294967295
 80043a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043a2:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <vTaskStartScheduler+0x70>)
 80043a4:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80043a6:	4b0f      	ldr	r3, [pc, #60]	; (80043e4 <vTaskStartScheduler+0x74>)
 80043a8:	601c      	str	r4, [r3, #0]
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043aa:	b002      	add	sp, #8
 80043ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043b0:	f7ff bd4a 	b.w	8003e48 <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043b4:	3001      	adds	r0, #1
 80043b6:	d108      	bne.n	80043ca <vTaskStartScheduler+0x5a>
 80043b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	e7fe      	b.n	80043c8 <vTaskStartScheduler+0x58>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043ca:	b002      	add	sp, #8
 80043cc:	bd10      	pop	{r4, pc}
 80043ce:	bf00      	nop
 80043d0:	20003ebc 	.word	0x20003ebc
 80043d4:	0800549b 	.word	0x0800549b
 80043d8:	08004661 	.word	0x08004661
 80043dc:	20003e80 	.word	0x20003e80
 80043e0:	20003db8 	.word	0x20003db8
 80043e4:	20003e84 	.word	0x20003e84

080043e8 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80043e8:	4a02      	ldr	r2, [pc, #8]	; (80043f4 <vTaskSuspendAll+0xc>)
 80043ea:	6813      	ldr	r3, [r2, #0]
 80043ec:	3301      	adds	r3, #1
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20003dbc 	.word	0x20003dbc

080043f8 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043f8:	4b40      	ldr	r3, [pc, #256]	; (80044fc <xTaskIncrementTick+0x104>)
 80043fa:	681b      	ldr	r3, [r3, #0]

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004400:	2b00      	cmp	r3, #0
 8004402:	d13b      	bne.n	800447c <xTaskIncrementTick+0x84>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8004404:	4b3e      	ldr	r3, [pc, #248]	; (8004500 <xTaskIncrementTick+0x108>)
 8004406:	681c      	ldr	r4, [r3, #0]
 8004408:	3401      	adds	r4, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800440a:	601c      	str	r4, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800440c:	b9bc      	cbnz	r4, 800443e <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
 800440e:	4b3d      	ldr	r3, [pc, #244]	; (8004504 <xTaskIncrementTick+0x10c>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	b142      	cbz	r2, 8004428 <xTaskIncrementTick+0x30>
 8004416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	e7fe      	b.n	8004426 <xTaskIncrementTick+0x2e>
 8004428:	4a37      	ldr	r2, [pc, #220]	; (8004508 <xTaskIncrementTick+0x110>)
 800442a:	6819      	ldr	r1, [r3, #0]
 800442c:	6810      	ldr	r0, [r2, #0]
 800442e:	6018      	str	r0, [r3, #0]
 8004430:	6011      	str	r1, [r2, #0]
 8004432:	4a36      	ldr	r2, [pc, #216]	; (800450c <xTaskIncrementTick+0x114>)
 8004434:	6813      	ldr	r3, [r2, #0]
 8004436:	3301      	adds	r3, #1
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	f7ff fe69 	bl	8004110 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800443e:	4d34      	ldr	r5, [pc, #208]	; (8004510 <xTaskIncrementTick+0x118>)
 8004440:	9501      	str	r5, [sp, #4]
 8004442:	682b      	ldr	r3, [r5, #0]
 8004444:	4e33      	ldr	r6, [pc, #204]	; (8004514 <xTaskIncrementTick+0x11c>)
 8004446:	4f34      	ldr	r7, [pc, #208]	; (8004518 <xTaskIncrementTick+0x120>)
 8004448:	429c      	cmp	r4, r3
 800444a:	f04f 0b00 	mov.w	fp, #0
 800444e:	d30b      	bcc.n	8004468 <xTaskIncrementTick+0x70>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004450:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8004504 <xTaskIncrementTick+0x10c>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004454:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8004524 <xTaskIncrementTick+0x12c>
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004458:	f8d8 2000 	ldr.w	r2, [r8]
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	b9a2      	cbnz	r2, 800448a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004460:	9b01      	ldr	r3, [sp, #4]
 8004462:	f04f 32ff 	mov.w	r2, #4294967295
 8004466:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800446c:	2214      	movs	r2, #20
 800446e:	434a      	muls	r2, r1
 8004470:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 8004472:	2a02      	cmp	r2, #2
 8004474:	bf28      	it	cs
 8004476:	f04f 0b01 	movcs.w	fp, #1
 800447a:	e034      	b.n	80044e6 <xTaskIncrementTick+0xee>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800447c:	4a27      	ldr	r2, [pc, #156]	; (800451c <xTaskIncrementTick+0x124>)
 800447e:	6813      	ldr	r3, [r2, #0]
 8004480:	3301      	adds	r3, #1
 8004482:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004484:	f04f 0b00 	mov.w	fp, #0
 8004488:	e02d      	b.n	80044e6 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800448a:	f8d8 2000 	ldr.w	r2, [r8]
 800448e:	68d2      	ldr	r2, [r2, #12]
 8004490:	68d5      	ldr	r5, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004492:	6869      	ldr	r1, [r5, #4]

					if( xConstTickCount < xItemValue )
 8004494:	428c      	cmp	r4, r1
 8004496:	d202      	bcs.n	800449e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004498:	9b01      	ldr	r3, [sp, #4]
 800449a:	6019      	str	r1, [r3, #0]
						break;
 800449c:	e7e4      	b.n	8004468 <xTaskIncrementTick+0x70>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800449e:	f105 0a04 	add.w	sl, r5, #4
 80044a2:	4650      	mov	r0, sl
 80044a4:	f7ff fbcf 	bl	8003c46 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044a8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80044aa:	b119      	cbz	r1, 80044b4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044ac:	f105 0018 	add.w	r0, r5, #24
 80044b0:	f7ff fbc9 	bl	8003c46 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044b4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80044b6:	f8d9 1000 	ldr.w	r1, [r9]
 80044ba:	2301      	movs	r3, #1
 80044bc:	fa03 fe00 	lsl.w	lr, r3, r0
 80044c0:	ea4e 0101 	orr.w	r1, lr, r1
 80044c4:	f04f 0e14 	mov.w	lr, #20
 80044c8:	f8c9 1000 	str.w	r1, [r9]
 80044cc:	fb0e 6000 	mla	r0, lr, r0, r6
 80044d0:	4651      	mov	r1, sl
 80044d2:	f7ff fb94 	bl	8003bfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044d6:	6838      	ldr	r0, [r7, #0]
 80044d8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80044da:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
						{
							xSwitchRequired = pdTRUE;
 80044dc:	4291      	cmp	r1, r2
 80044de:	bf28      	it	cs
 80044e0:	f04f 0b01 	movcs.w	fp, #1
 80044e4:	e7b8      	b.n	8004458 <xTaskIncrementTick+0x60>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80044e6:	4a0e      	ldr	r2, [pc, #56]	; (8004520 <xTaskIncrementTick+0x128>)
 80044e8:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 80044ea:	2a00      	cmp	r2, #0
 80044ec:	bf18      	it	ne
 80044ee:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 80044f2:	4658      	mov	r0, fp
 80044f4:	b003      	add	sp, #12
 80044f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044fa:	bf00      	nop
 80044fc:	20003dbc 	.word	0x20003dbc
 8004500:	20003e84 	.word	0x20003e84
 8004504:	20003db4 	.word	0x20003db4
 8004508:	20003e88 	.word	0x20003e88
 800450c:	20003db0 	.word	0x20003db0
 8004510:	20003e80 	.word	0x20003e80
 8004514:	20003dd8 	.word	0x20003dd8
 8004518:	20003e7c 	.word	0x20003e7c
 800451c:	20003dd4 	.word	0x20003dd4
 8004520:	20003ed8 	.word	0x20003ed8
 8004524:	20003ed4 	.word	0x20003ed4

08004528 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800452c:	4c31      	ldr	r4, [pc, #196]	; (80045f4 <xTaskResumeAll+0xcc>)
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	b943      	cbnz	r3, 8004544 <xTaskResumeAll+0x1c>
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	e7fe      	b.n	8004542 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004544:	f7ff fbee 	bl	8003d24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	3b01      	subs	r3, #1
 800454c:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800454e:	6824      	ldr	r4, [r4, #0]
 8004550:	b10c      	cbz	r4, 8004556 <xTaskResumeAll+0x2e>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 8004552:	2400      	movs	r4, #0
 8004554:	e049      	b.n	80045ea <xTaskResumeAll+0xc2>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004556:	4b28      	ldr	r3, [pc, #160]	; (80045f8 <xTaskResumeAll+0xd0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f9      	beq.n	8004552 <xTaskResumeAll+0x2a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800455e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8004610 <xTaskResumeAll+0xe8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8004562:	4f26      	ldr	r7, [pc, #152]	; (80045fc <xTaskResumeAll+0xd4>)
 8004564:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8004614 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004568:	f8d9 3000 	ldr.w	r3, [r9]
 800456c:	b303      	cbz	r3, 80045b0 <xTaskResumeAll+0x88>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800456e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004572:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004574:	1d26      	adds	r6, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004576:	f104 0018 	add.w	r0, r4, #24
 800457a:	f7ff fb64 	bl	8003c46 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800457e:	4630      	mov	r0, r6
 8004580:	f7ff fb61 	bl	8003c46 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004584:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2501      	movs	r5, #1
 800458a:	fa05 f102 	lsl.w	r1, r5, r2
 800458e:	2014      	movs	r0, #20
 8004590:	430b      	orrs	r3, r1
 8004592:	fb00 8002 	mla	r0, r0, r2, r8
 8004596:	4631      	mov	r1, r6
 8004598:	603b      	str	r3, [r7, #0]
 800459a:	f7ff fb30 	bl	8003bfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800459e:	4b18      	ldr	r3, [pc, #96]	; (8004600 <xTaskResumeAll+0xd8>)
 80045a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	429a      	cmp	r2, r3
					{
						xYieldPending = pdTRUE;
 80045a8:	bf24      	itt	cs
 80045aa:	4b16      	ldrcs	r3, [pc, #88]	; (8004604 <xTaskResumeAll+0xdc>)
 80045ac:	601d      	strcs	r5, [r3, #0]
 80045ae:	e7db      	b.n	8004568 <xTaskResumeAll+0x40>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045b0:	b10c      	cbz	r4, 80045b6 <xTaskResumeAll+0x8e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045b2:	f7ff fdad 	bl	8004110 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80045b6:	4b14      	ldr	r3, [pc, #80]	; (8004608 <xTaskResumeAll+0xe0>)
 80045b8:	681c      	ldr	r4, [r3, #0]
 80045ba:	461d      	mov	r5, r3

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80045bc:	b144      	cbz	r4, 80045d0 <xTaskResumeAll+0xa8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
 80045be:	4e11      	ldr	r6, [pc, #68]	; (8004604 <xTaskResumeAll+0xdc>)
 80045c0:	2701      	movs	r7, #1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045c2:	f7ff ff19 	bl	80043f8 <xTaskIncrementTick>
 80045c6:	b100      	cbz	r0, 80045ca <xTaskResumeAll+0xa2>
							{
								xYieldPending = pdTRUE;
 80045c8:	6037      	str	r7, [r6, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80045ca:	3c01      	subs	r4, #1
 80045cc:	d1f9      	bne.n	80045c2 <xTaskResumeAll+0x9a>

						uxPendedTicks = 0;
 80045ce:	602c      	str	r4, [r5, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045d0:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <xTaskResumeAll+0xdc>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0bc      	beq.n	8004552 <xTaskResumeAll+0x2a>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045d8:	4b0c      	ldr	r3, [pc, #48]	; (800460c <xTaskResumeAll+0xe4>)
 80045da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045e8:	2401      	movs	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045ea:	f7ff fbbd 	bl	8003d68 <vPortExitCritical>

	return xAlreadyYielded;
}
 80045ee:	4620      	mov	r0, r4
 80045f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045f4:	20003dbc 	.word	0x20003dbc
 80045f8:	20003ea4 	.word	0x20003ea4
 80045fc:	20003ed4 	.word	0x20003ed4
 8004600:	20003e7c 	.word	0x20003e7c
 8004604:	20003ed8 	.word	0x20003ed8
 8004608:	20003dd4 	.word	0x20003dd4
 800460c:	e000ed04 	.word	0xe000ed04
 8004610:	20003e8c 	.word	0x20003e8c
 8004614:	20003dd8 	.word	0x20003dd8

08004618 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004618:	b508      	push	{r3, lr}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800461a:	b940      	cbnz	r0, 800462e <vTaskDelay+0x16>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 800461c:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <vTaskDelay+0x40>)
 800461e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	bd08      	pop	{r3, pc}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800462e:	4b0b      	ldr	r3, [pc, #44]	; (800465c <vTaskDelay+0x44>)
 8004630:	6819      	ldr	r1, [r3, #0]
 8004632:	b141      	cbz	r1, 8004646 <vTaskDelay+0x2e>
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	e7fe      	b.n	8004644 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004646:	f7ff fecf 	bl	80043e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800464a:	f7ff fd73 	bl	8004134 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800464e:	f7ff ff6b 	bl	8004528 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004652:	2800      	cmp	r0, #0
 8004654:	d0e2      	beq.n	800461c <vTaskDelay+0x4>
 8004656:	bd08      	pop	{r3, pc}
 8004658:	e000ed04 	.word	0xe000ed04
 800465c:	20003dbc 	.word	0x20003dbc

08004660 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004660:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004662:	4d18      	ldr	r5, [pc, #96]	; (80046c4 <prvIdleTask+0x64>)
 8004664:	462e      	mov	r6, r5
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004666:	4f18      	ldr	r7, [pc, #96]	; (80046c8 <prvIdleTask+0x68>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	b1f3      	cbz	r3, 80046aa <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 800466c:	f7ff febc 	bl	80043e8 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004670:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 8004672:	f7ff ff59 	bl	8004528 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8004676:	2c00      	cmp	r4, #0
 8004678:	d0f6      	beq.n	8004668 <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800467a:	f7ff fb53 	bl	8003d24 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800467e:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <prvIdleTask+0x68>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004684:	1d20      	adds	r0, r4, #4
 8004686:	f7ff fade 	bl	8003c46 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800468a:	4a10      	ldr	r2, [pc, #64]	; (80046cc <prvIdleTask+0x6c>)
 800468c:	6813      	ldr	r3, [r2, #0]
 800468e:	3b01      	subs	r3, #1
 8004690:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8004692:	6833      	ldr	r3, [r6, #0]
 8004694:	3b01      	subs	r3, #1
 8004696:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 8004698:	f7ff fb66 	bl	8003d68 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800469c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800469e:	f7ff fcff 	bl	80040a0 <vPortFree>
			vPortFree( pxTCB );
 80046a2:	4620      	mov	r0, r4
 80046a4:	f7ff fcfc 	bl	80040a0 <vPortFree>
 80046a8:	e7de      	b.n	8004668 <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046aa:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <prvIdleTask+0x70>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d9d9      	bls.n	8004666 <prvIdleTask+0x6>
			{
				taskYIELD();
 80046b2:	4b08      	ldr	r3, [pc, #32]	; (80046d4 <prvIdleTask+0x74>)
 80046b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	e7d0      	b.n	8004666 <prvIdleTask+0x6>
 80046c4:	20003e78 	.word	0x20003e78
 80046c8:	20003e64 	.word	0x20003e64
 80046cc:	20003ea4 	.word	0x20003ea4
 80046d0:	20003dd8 	.word	0x20003dd8
 80046d4:	e000ed04 	.word	0xe000ed04

080046d8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046d8:	4b17      	ldr	r3, [pc, #92]	; (8004738 <vTaskSwitchContext+0x60>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4b17      	ldr	r3, [pc, #92]	; (800473c <vTaskSwitchContext+0x64>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046de:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046e0:	b10a      	cbz	r2, 80046e6 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046e2:	2201      	movs	r2, #1
 80046e4:	e025      	b.n	8004732 <vTaskSwitchContext+0x5a>
	}
	else
	{
		xYieldPending = pdFALSE;
 80046e6:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80046e8:	4b15      	ldr	r3, [pc, #84]	; (8004740 <vTaskSwitchContext+0x68>)
 80046ea:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80046ec:	fab3 f383 	clz	r3, r3
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	f1c3 031f 	rsb	r3, r3, #31
 80046f6:	2214      	movs	r2, #20
 80046f8:	4912      	ldr	r1, [pc, #72]	; (8004744 <vTaskSwitchContext+0x6c>)
 80046fa:	435a      	muls	r2, r3
 80046fc:	1888      	adds	r0, r1, r2
 80046fe:	588c      	ldr	r4, [r1, r2]
 8004700:	b944      	cbnz	r4, 8004714 <vTaskSwitchContext+0x3c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	e7fe      	b.n	8004712 <vTaskSwitchContext+0x3a>
 8004714:	6844      	ldr	r4, [r0, #4]
 8004716:	3208      	adds	r2, #8
 8004718:	6864      	ldr	r4, [r4, #4]
 800471a:	6044      	str	r4, [r0, #4]
 800471c:	440a      	add	r2, r1
 800471e:	4294      	cmp	r4, r2
 8004720:	bf04      	itt	eq
 8004722:	6862      	ldreq	r2, [r4, #4]
 8004724:	6042      	streq	r2, [r0, #4]
 8004726:	2214      	movs	r2, #20
 8004728:	fb02 1303 	mla	r3, r2, r3, r1
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <vTaskSwitchContext+0x70>)
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	bd10      	pop	{r4, pc}
 8004736:	bf00      	nop
 8004738:	20003dbc 	.word	0x20003dbc
 800473c:	20003ed8 	.word	0x20003ed8
 8004740:	20003ed4 	.word	0x20003ed4
 8004744:	20003dd8 	.word	0x20003dd8
 8004748:	20003e7c 	.word	0x20003e7c

0800474c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800474c:	4b05      	ldr	r3, [pc, #20]	; (8004764 <xTaskGetSchedulerState+0x18>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	b133      	cbz	r3, 8004760 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004752:	4b05      	ldr	r3, [pc, #20]	; (8004768 <xTaskGetSchedulerState+0x1c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004758:	bf0c      	ite	eq
 800475a:	2002      	moveq	r0, #2
 800475c:	2000      	movne	r0, #0
 800475e:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004760:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 8004762:	4770      	bx	lr
 8004764:	20003db8 	.word	0x20003db8
 8004768:	20003dbc 	.word	0x20003dbc

0800476c <MX_CRC_Init>:

/* CRC init function */
void MX_CRC_Init(void)
{

  hcrc.Instance = CRC;
 800476c:	4805      	ldr	r0, [pc, #20]	; (8004784 <MX_CRC_Init+0x18>)

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800476e:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 8004770:	4b05      	ldr	r3, [pc, #20]	; (8004788 <MX_CRC_Init+0x1c>)
 8004772:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004774:	f7fb fdf8 	bl	8000368 <HAL_CRC_Init>
 8004778:	b118      	cbz	r0, 8004782 <MX_CRC_Init+0x16>
  {
    Error_Handler();
  }

}
 800477a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{

  hcrc.Instance = CRC;
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
  {
    Error_Handler();
 800477e:	f000 b97b 	b.w	8004a78 <Error_Handler>
 8004782:	bd08      	pop	{r3, pc}
 8004784:	20003ef0 	.word	0x20003ef0
 8004788:	40023000 	.word	0x40023000

0800478c <HAL_CRC_MspInit>:
}

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 800478c:	6802      	ldr	r2, [r0, #0]
 800478e:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <HAL_CRC_MspInit+0x28>)
 8004790:	429a      	cmp	r2, r3
  }

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8004792:	b082      	sub	sp, #8

  if(crcHandle->Instance==CRC)
 8004794:	d10b      	bne.n	80047ae <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004796:	2300      	movs	r3, #0
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	4b07      	ldr	r3, [pc, #28]	; (80047b8 <HAL_CRC_MspInit+0x2c>)
 800479c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800479e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80047ae:	b002      	add	sp, #8
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40023000 	.word	0x40023000
 80047b8:	40023800 	.word	0x40023800

080047bc <StartDefaultTask>:
  /* USER CODE END RTOS_QUEUES */
}

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 80047bc:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80047be:	f000 fb09 	bl	8004dd4 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80047c2:	2001      	movs	r0, #1
 80047c4:	f7ff f9fb 	bl	8003bbe <osDelay>
 80047c8:	e7fb      	b.n	80047c2 <StartDefaultTask+0x6>
	...

080047cc <MX_FREERTOS_Init>:

/* Hook prototypes */

/* Init FreeRTOS */

void MX_FREERTOS_Init(void) {
 80047cc:	b530      	push	{r4, r5, lr}
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80047ce:	4d07      	ldr	r5, [pc, #28]	; (80047ec <MX_FREERTOS_Init+0x20>)
 80047d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

/* Hook prototypes */

/* Init FreeRTOS */

void MX_FREERTOS_Init(void) {
 80047d2:	b087      	sub	sp, #28
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80047d4:	ac01      	add	r4, sp, #4
 80047d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80047dc:	2100      	movs	r1, #0
 80047de:	a801      	add	r0, sp, #4
 80047e0:	f7ff f9d5 	bl	8003b8e <osThreadCreate>
 80047e4:	4b02      	ldr	r3, [pc, #8]	; (80047f0 <MX_FREERTOS_Init+0x24>)
 80047e6:	6018      	str	r0, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
}
 80047e8:	b007      	add	sp, #28
 80047ea:	bd30      	pop	{r4, r5, pc}
 80047ec:	08005470 	.word	0x08005470
 80047f0:	20003ef8 	.word	0x20003ef8

080047f4 <MX_GPIO_Init>:
        * the Code Generation settings)
     PC8   ------> SDIO_D0
     PC12   ------> SDIO_CK
*/
void MX_GPIO_Init(void)
{
 80047f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f6:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047f8:	2400      	movs	r4, #0
 80047fa:	4b45      	ldr	r3, [pc, #276]	; (8004910 <MX_GPIO_Init+0x11c>)
 80047fc:	9400      	str	r4, [sp, #0]
 80047fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8004800:	4e44      	ldr	r6, [pc, #272]	; (8004914 <MX_GPIO_Init+0x120>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004802:	4f45      	ldr	r7, [pc, #276]	; (8004918 <MX_GPIO_Init+0x124>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004804:	f042 0204 	orr.w	r2, r2, #4
 8004808:	631a      	str	r2, [r3, #48]	; 0x30
 800480a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800480c:	f002 0204 	and.w	r2, r2, #4
 8004810:	9200      	str	r2, [sp, #0]
 8004812:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004814:	9401      	str	r4, [sp, #4]
 8004816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004818:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800481c:	631a      	str	r2, [r3, #48]	; 0x30
 800481e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004820:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004824:	9201      	str	r2, [sp, #4]
 8004826:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004828:	9402      	str	r4, [sp, #8]
 800482a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800482c:	f042 0201 	orr.w	r2, r2, #1
 8004830:	631a      	str	r2, [r3, #48]	; 0x30
 8004832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004834:	f002 0201 	and.w	r2, r2, #1
 8004838:	9202      	str	r2, [sp, #8]
 800483a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800483c:	9403      	str	r4, [sp, #12]
 800483e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004840:	f042 0202 	orr.w	r2, r2, #2
 8004844:	631a      	str	r2, [r3, #48]	; 0x30
 8004846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004848:	f002 0202 	and.w	r2, r2, #2
 800484c:	9203      	str	r2, [sp, #12]
 800484e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004850:	9404      	str	r4, [sp, #16]
 8004852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004854:	f042 0208 	orr.w	r2, r2, #8
 8004858:	631a      	str	r2, [r3, #48]	; 0x30
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	f003 0308 	and.w	r3, r3, #8

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8004860:	4622      	mov	r2, r4
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004862:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8004864:	4630      	mov	r0, r6
 8004866:	2120      	movs	r1, #32
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004868:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 800486a:	f7fb fe69 	bl	8000540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800486e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004872:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004874:	a905      	add	r1, sp, #20
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004876:	4b29      	ldr	r3, [pc, #164]	; (800491c <MX_GPIO_Init+0x128>)
 8004878:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800487a:	4638      	mov	r0, r7
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800487c:	2503      	movs	r5, #3
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004880:	f7fb fd84 	bl	800038c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1 
                           PC2 PC3 PC4 PC5 
                           PC6 PC7 PC9 PC10 
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
 8004884:	f64c 63ff 	movw	r3, #52991	; 0xceff
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004888:	a905      	add	r1, sp, #20
 800488a:	4638      	mov	r0, r7

  /*Configure GPIO pins : PC14 PC15 PC0 PC1 
                           PC2 PC3 PC4 PC5 
                           PC6 PC7 PC9 PC10 
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
 800488c:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800488e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004890:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004892:	f7fb fd7b 	bl	800038c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA8 
                           PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8 
 8004896:	f248 7313 	movw	r3, #34579	; 0x8713
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800489a:	a905      	add	r1, sp, #20
 800489c:	4820      	ldr	r0, [pc, #128]	; (8004920 <MX_GPIO_Init+0x12c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PA0 PA1 PA4 PA8 
                           PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8 
 800489e:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048a0:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048a4:	f7fb fd72 	bl	800038c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12 
                           PB13 PB14 PB15 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12 
 80048a8:	f24f 33c7 	movw	r3, #62407	; 0xf3c7
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ac:	a905      	add	r1, sp, #20
 80048ae:	4630      	mov	r0, r6
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 PB2 PB12 
                           PB13 PB14 PB15 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12 
 80048b0:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048b2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048b6:	f7fb fd69 	bl	800038c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = button_1_Pin|button_2_Pin;
 80048ba:	f44f 6382 	mov.w	r3, #1040	; 0x410
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048be:	a905      	add	r1, sp, #20
 80048c0:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = button_1_Pin|button_2_Pin;
 80048c2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048c4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048c8:	f7fb fd60 	bl	800038c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80048cc:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80048d0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d2:	2302      	movs	r3, #2
 80048d4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048d6:	a905      	add	r1, sp, #20
  /*Configure GPIO pins : PC8 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80048d8:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048da:	4638      	mov	r0, r7
  /*Configure GPIO pins : PC8 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80048dc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PC8 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048de:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048e0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048e2:	f7fb fd53 	bl	800038c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80048e6:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048e8:	a905      	add	r1, sp, #20
 80048ea:	480e      	ldr	r0, [pc, #56]	; (8004924 <MX_GPIO_Init+0x130>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80048ec:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048ee:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048f2:	f7fb fd4b 	bl	800038c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 80048f6:	2320      	movs	r3, #32
 80048f8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 80048fa:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048fc:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 80048fe:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004900:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004902:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004904:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8004906:	f7fb fd41 	bl	800038c <HAL_GPIO_Init>

}
 800490a:	b00b      	add	sp, #44	; 0x2c
 800490c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800490e:	bf00      	nop
 8004910:	40023800 	.word	0x40023800
 8004914:	40020400 	.word	0x40020400
 8004918:	40020800 	.word	0x40020800
 800491c:	10210000 	.word	0x10210000
 8004920:	40020000 	.word	0x40020000
 8004924:	40020c00 	.word	0x40020c00

08004928 <exampleTask>:

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
TaskHandle_t debug_task;
uint32_t i=0;
void exampleTask(void* args) {
 8004928:	b508      	push	{r3, lr}

	while(1){
		i++;
 800492a:	4c04      	ldr	r4, [pc, #16]	; (800493c <exampleTask+0x14>)
 800492c:	6823      	ldr	r3, [r4, #0]
		vTaskDelay( 1000 );
 800492e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
TaskHandle_t debug_task;
uint32_t i=0;
void exampleTask(void* args) {

	while(1){
		i++;
 8004932:	3301      	adds	r3, #1
 8004934:	6023      	str	r3, [r4, #0]
		vTaskDelay( 1000 );
 8004936:	f7ff fe6f 	bl	8004618 <vTaskDelay>
 800493a:	e7f7      	b.n	800492c <exampleTask+0x4>
 800493c:	20003edc 	.word	0x20003edc

08004940 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8004940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004942:	b0ad      	sub	sp, #180	; 0xb4
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004944:	4b32      	ldr	r3, [pc, #200]	; (8004a10 <SystemClock_Config+0xd0>)
 8004946:	2100      	movs	r1, #0
 8004948:	9101      	str	r1, [sp, #4]
 800494a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800494c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004950:	641a      	str	r2, [r3, #64]	; 0x40
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004958:	9301      	str	r3, [sp, #4]
 800495a:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800495c:	4b2d      	ldr	r3, [pc, #180]	; (8004a14 <SystemClock_Config+0xd4>)
 800495e:	9102      	str	r1, [sp, #8]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800496e:	9302      	str	r3, [sp, #8]
 8004970:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004972:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004976:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004978:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800497c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
 800497e:	23b4      	movs	r3, #180	; 0xb4

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004980:	2402      	movs	r4, #2

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004982:	2701      	movs	r7, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004984:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004986:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004988:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800498a:	2303      	movs	r3, #3

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800498c:	9708      	str	r7, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800498e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004990:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004992:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004994:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004996:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004998:	f7fc ff1e 	bl	80017d8 <HAL_RCC_OscConfig>
 800499c:	b100      	cbz	r0, 80049a0 <SystemClock_Config+0x60>
 800499e:	e7fe      	b.n	800499e <SystemClock_Config+0x5e>
    Error_Handler();
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80049a0:	f7fc fa7c 	bl	8000e9c <HAL_PWREx_EnableOverDrive>
 80049a4:	b100      	cbz	r0, 80049a8 <SystemClock_Config+0x68>
 80049a6:	e7fe      	b.n	80049a6 <SystemClock_Config+0x66>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80049a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049ac:	260f      	movs	r6, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049ae:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80049b0:	2105      	movs	r1, #5
 80049b2:	a803      	add	r0, sp, #12
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049b4:	9603      	str	r6, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049b6:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80049b8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80049ba:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80049bc:	f7fc faba 	bl	8000f34 <HAL_RCC_ClockConfig>
 80049c0:	b100      	cbz	r0, 80049c4 <SystemClock_Config+0x84>
 80049c2:	e7fe      	b.n	80049c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80049c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80049c8:	9315      	str	r3, [sp, #84]	; 0x54
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 80049ca:	2308      	movs	r3, #8
 80049cc:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80049ce:	23c0      	movs	r3, #192	; 0xc0
 80049d0:	931c      	str	r3, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
  PeriphClkInitStruct.PLLSAIDivQ = 1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049d2:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
  PeriphClkInitStruct.PLLSAIDivQ = 1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80049d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80049d8:	941e      	str	r4, [sp, #120]	; 0x78
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80049da:	951d      	str	r5, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80049dc:	9720      	str	r7, [sp, #128]	; 0x80
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80049de:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049e0:	f7fc fbb0 	bl	8001144 <HAL_RCCEx_PeriphCLKConfig>
 80049e4:	4604      	mov	r4, r0
 80049e6:	b100      	cbz	r0, 80049ea <SystemClock_Config+0xaa>
 80049e8:	e7fe      	b.n	80049e8 <SystemClock_Config+0xa8>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80049ea:	f7fc fb57 	bl	800109c <HAL_RCC_GetHCLKFreq>
 80049ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80049f6:	f7fb fc95 	bl	8000324 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80049fa:	4628      	mov	r0, r5
 80049fc:	f7fb fca8 	bl	8000350 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8004a00:	4622      	mov	r2, r4
 8004a02:	4631      	mov	r1, r6
 8004a04:	f04f 30ff 	mov.w	r0, #4294967295
 8004a08:	f7fb fc4c 	bl	80002a4 <HAL_NVIC_SetPriority>
}
 8004a0c:	b02d      	add	sp, #180	; 0xb4
 8004a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a10:	40023800 	.word	0x40023800
 8004a14:	40007000 	.word	0x40007000

08004a18 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8004a18:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a1a:	f7fb fbf9 	bl	8000210 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8004a1e:	f7ff ff8f 	bl	8004940 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a22:	f7ff fee7 	bl	80047f4 <MX_GPIO_Init>
  MX_TIM10_Init();
 8004a26:	f000 f935 	bl	8004c94 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8004a2a:	f000 f98f 	bl	8004d4c <MX_USART2_UART_Init>
  //MX_WWDG_Init();
  MX_SPI1_Init();
 8004a2e:	f000 f825 	bl	8004a7c <MX_SPI1_Init>
  MX_CRC_Init();
 8004a32:	f7ff fe9b 	bl	800476c <MX_CRC_Init>
  MX_TIM7_Init();
 8004a36:	f000 f911 	bl	8004c5c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8004a3a:	f7ff fec7 	bl	80047cc <MX_FREERTOS_Init>

  xTaskCreate(	exampleTask,
 8004a3e:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <main+0x40>)
 8004a40:	9301      	str	r3, [sp, #4]
 8004a42:	2301      	movs	r3, #1
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	2250      	movs	r2, #80	; 0x50
 8004a48:	2300      	movs	r3, #0
 8004a4a:	4904      	ldr	r1, [pc, #16]	; (8004a5c <main+0x44>)
 8004a4c:	4804      	ldr	r0, [pc, #16]	; (8004a60 <main+0x48>)
 8004a4e:	f7ff fbb9 	bl	80041c4 <xTaskCreate>
  				NULL,
  				(UBaseType_t)1,
				&debug_task);

  /* Start scheduler */
  osKernelStart();
 8004a52:	f7ff f897 	bl	8003b84 <osKernelStart>
 8004a56:	e7fe      	b.n	8004a56 <main+0x3e>
 8004a58:	20003efc 	.word	0x20003efc
 8004a5c:	080054ac 	.word	0x080054ac
 8004a60:	08004929 	.word	0x08004929

08004a64 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8004a64:	6802      	ldr	r2, [r0, #0]
 8004a66:	4b03      	ldr	r3, [pc, #12]	; (8004a74 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d101      	bne.n	8004a70 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8004a6c:	f7fb bbea 	b.w	8000244 <HAL_IncTick>
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40000800 	.word	0x40000800

08004a78 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8004a78:	e7fe      	b.n	8004a78 <Error_Handler>
	...

08004a7c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004a7c:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 8004a7e:	480e      	ldr	r0, [pc, #56]	; (8004ab8 <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004a80:	4b0e      	ldr	r3, [pc, #56]	; (8004abc <MX_SPI1_Init+0x40>)
 8004a82:	f44f 7e82 	mov.w	lr, #260	; 0x104
 8004a86:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a8e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a90:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a92:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004a94:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a98:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a9a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a9c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a9e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004aa0:	230a      	movs	r3, #10
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004aa2:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 8004aa4:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004aa6:	f7fd f843 	bl	8001b30 <HAL_SPI_Init>
 8004aaa:	b118      	cbz	r0, 8004ab4 <MX_SPI1_Init+0x38>
  {
    Error_Handler();
  }

}
 8004aac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
 8004ab0:	f7ff bfe2 	b.w	8004a78 <Error_Handler>
 8004ab4:	bd08      	pop	{r3, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20003f00 	.word	0x20003f00
 8004abc:	40013000 	.word	0x40013000

08004ac0 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004ac0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8004ac2:	6802      	ldr	r2, [r0, #0]
 8004ac4:	4b0f      	ldr	r3, [pc, #60]	; (8004b04 <HAL_SPI_MspInit+0x44>)
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d119      	bne.n	8004afe <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004aca:	2100      	movs	r1, #0
 8004acc:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8004ad0:	9100      	str	r1, [sp, #0]
 8004ad2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ad4:	480c      	ldr	r0, [pc, #48]	; (8004b08 <HAL_SPI_MspInit+0x48>)
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ad6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ada:	645a      	str	r2, [r3, #68]	; 0x44
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ade:	9103      	str	r1, [sp, #12]
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	9b00      	ldr	r3, [sp, #0]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004ae8:	23e0      	movs	r3, #224	; 0xe0
 8004aea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aec:	2302      	movs	r3, #2
 8004aee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004af0:	2303      	movs	r3, #3
 8004af2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004af4:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004af6:	2305      	movs	r3, #5
 8004af8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004afa:	f7fb fc47 	bl	800038c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004afe:	b007      	add	sp, #28
 8004b00:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b04:	40013000 	.word	0x40013000
 8004b08:	40020000 	.word	0x40020000

08004b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b0e:	2003      	movs	r0, #3
 8004b10:	f7fb fbb6 	bl	8000280 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004b14:	2200      	movs	r2, #0
 8004b16:	4611      	mov	r1, r2
 8004b18:	f06f 000b 	mvn.w	r0, #11
 8004b1c:	f7fb fbc2 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004b20:	2200      	movs	r2, #0
 8004b22:	4611      	mov	r1, r2
 8004b24:	f06f 000a 	mvn.w	r0, #10
 8004b28:	f7fb fbbc 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	4611      	mov	r1, r2
 8004b30:	f06f 0009 	mvn.w	r0, #9
 8004b34:	f7fb fbb6 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004b38:	2200      	movs	r2, #0
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	f06f 0004 	mvn.w	r0, #4
 8004b40:	f7fb fbb0 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004b44:	2200      	movs	r2, #0
 8004b46:	4611      	mov	r1, r2
 8004b48:	f06f 0003 	mvn.w	r0, #3
 8004b4c:	f7fb fbaa 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004b50:	2200      	movs	r2, #0
 8004b52:	210f      	movs	r1, #15
 8004b54:	f06f 0001 	mvn.w	r0, #1
 8004b58:	f7fb fba4 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	210f      	movs	r1, #15
 8004b60:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8004b68:	f7fb bb9c 	b.w	80002a4 <HAL_NVIC_SetPriority>

08004b6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b6c:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8004b6e:	4601      	mov	r1, r0
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b70:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8004b72:	2200      	movs	r2, #0
 8004b74:	201e      	movs	r0, #30
 8004b76:	f7fb fb95 	bl	80002a4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8004b7a:	201e      	movs	r0, #30
 8004b7c:	f7fb fbc6 	bl	800030c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8004b80:	2500      	movs	r5, #0
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <HAL_InitTick+0x6c>)
 8004b84:	9502      	str	r5, [sp, #8]
 8004b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8004b88:	4c14      	ldr	r4, [pc, #80]	; (8004bdc <HAL_InitTick+0x70>)
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8004b8a:	f042 0204 	orr.w	r2, r2, #4
 8004b8e:	641a      	str	r2, [r3, #64]	; 0x40
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	9302      	str	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004b98:	a901      	add	r1, sp, #4
 8004b9a:	a803      	add	r0, sp, #12
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8004b9c:	9b02      	ldr	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004b9e:	f7fc fab3 	bl	8001108 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004ba2:	f7fc fa81 	bl	80010a8 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8004ba6:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <HAL_InitTick+0x74>)
 8004ba8:	6023      	str	r3, [r4, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8004baa:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004bae:	60e3      	str	r3, [r4, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8004bb0:	0040      	lsls	r0, r0, #1
 8004bb2:	4b0c      	ldr	r3, [pc, #48]	; (8004be4 <HAL_InitTick+0x78>)
 8004bb4:	fbb0 f0f3 	udiv	r0, r0, r3
 8004bb8:	3801      	subs	r0, #1
 8004bba:	6060      	str	r0, [r4, #4]
  htim4.Init.ClockDivision = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8004bbc:	4620      	mov	r0, r4
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 8004bbe:	6125      	str	r5, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bc0:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8004bc2:	f7fd f98d 	bl	8001ee0 <HAL_TIM_Base_Init>
 8004bc6:	b918      	cbnz	r0, 8004bd0 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8004bc8:	4620      	mov	r0, r4
 8004bca:	f7fd f873 	bl	8001cb4 <HAL_TIM_Base_Start_IT>
 8004bce:	e000      	b.n	8004bd2 <HAL_InitTick+0x66>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004bd0:	2001      	movs	r0, #1
}
 8004bd2:	b009      	add	sp, #36	; 0x24
 8004bd4:	bd30      	pop	{r4, r5, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	20003f58 	.word	0x20003f58
 8004be0:	40000800 	.word	0x40000800
 8004be4:	000f4240 	.word	0x000f4240

08004be8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8004be8:	f7fe bff1 	b.w	8003bce <osSystickHandler>

08004bec <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004bec:	4801      	ldr	r0, [pc, #4]	; (8004bf4 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8004bee:	f7fd b871 	b.w	8001cd4 <HAL_TIM_IRQHandler>
 8004bf2:	bf00      	nop
 8004bf4:	20003f94 	.word	0x20003f94

08004bf8 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004bf8:	4801      	ldr	r0, [pc, #4]	; (8004c00 <TIM4_IRQHandler+0x8>)
 8004bfa:	f7fd b86b 	b.w	8001cd4 <HAL_TIM_IRQHandler>
 8004bfe:	bf00      	nop
 8004c00:	20003f58 	.word	0x20003f58

08004c04 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004c04:	4801      	ldr	r0, [pc, #4]	; (8004c0c <OTG_FS_IRQHandler+0x8>)
 8004c06:	f7fb bd27 	b.w	8000658 <HAL_PCD_IRQHandler>
 8004c0a:	bf00      	nop
 8004c0c:	20004270 	.word	0x20004270

08004c10 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c10:	490f      	ldr	r1, [pc, #60]	; (8004c50 <SystemInit+0x40>)
 8004c12:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004c16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <SystemInit+0x44>)
 8004c20:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004c22:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004c24:	f042 0201 	orr.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004c2a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004c32:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004c36:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004c38:	4a07      	ldr	r2, [pc, #28]	; (8004c58 <SystemInit+0x48>)
 8004c3a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c42:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004c44:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004c46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c4a:	608b      	str	r3, [r1, #8]
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	e000ed00 	.word	0xe000ed00
 8004c54:	40023800 	.word	0x40023800
 8004c58:	24003010 	.word	0x24003010

08004c5c <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004c5c:	b513      	push	{r0, r1, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig;

  htim7.Instance = TIM7;
  htim7.Init.Prescaler = 0;
 8004c5e:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <MX_TIM7_Init+0x30>)
/* TIM7 init function */
void MX_TIM7_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;

  htim7.Instance = TIM7;
 8004c60:	480b      	ldr	r0, [pc, #44]	; (8004c90 <MX_TIM7_Init+0x34>)
  htim7.Init.Prescaler = 0;
 8004c62:	2400      	movs	r4, #0
 8004c64:	e880 0018 	stmia.w	r0, {r3, r4}
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c68:	6084      	str	r4, [r0, #8]
  htim7.Init.Period = 0;
 8004c6a:	60c4      	str	r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004c6c:	f7fd f938 	bl	8001ee0 <HAL_TIM_Base_Init>
 8004c70:	b108      	cbz	r0, 8004c76 <MX_TIM7_Init+0x1a>
  {
    Error_Handler();
 8004c72:	f7ff ff01 	bl	8004a78 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004c76:	4669      	mov	r1, sp
 8004c78:	4805      	ldr	r0, [pc, #20]	; (8004c90 <MX_TIM7_Init+0x34>)
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c7a:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c7c:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004c7e:	f7fd f9c3 	bl	8002008 <HAL_TIMEx_MasterConfigSynchronization>
 8004c82:	b108      	cbz	r0, 8004c88 <MX_TIM7_Init+0x2c>
  {
    Error_Handler();
 8004c84:	f7ff fef8 	bl	8004a78 <Error_Handler>
  }

}
 8004c88:	b002      	add	sp, #8
 8004c8a:	bd10      	pop	{r4, pc}
 8004c8c:	40001400 	.word	0x40001400
 8004c90:	20003fd0 	.word	0x20003fd0

08004c94 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004c94:	b500      	push	{lr}
  TIM_OC_InitTypeDef sConfigOC;

  htim10.Instance = TIM10;
 8004c96:	4812      	ldr	r0, [pc, #72]	; (8004ce0 <MX_TIM10_Init+0x4c>)
 8004c98:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <MX_TIM10_Init+0x50>)
 8004c9a:	6003      	str	r3, [r0, #0]
  }

}
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004c9c:	b089      	sub	sp, #36	; 0x24
  TIM_OC_InitTypeDef sConfigOC;

  htim10.Instance = TIM10;
  htim10.Init.Prescaler = 0;
 8004c9e:	2300      	movs	r3, #0
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim10.Init.Period = 10000;
 8004ca0:	f242 7210 	movw	r2, #10000	; 0x2710
void MX_TIM10_Init(void)
{
  TIM_OC_InitTypeDef sConfigOC;

  htim10.Instance = TIM10;
  htim10.Init.Prescaler = 0;
 8004ca4:	6043      	str	r3, [r0, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ca6:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 10000;
 8004ca8:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004caa:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004cac:	f7fd f918 	bl	8001ee0 <HAL_TIM_Base_Init>
 8004cb0:	b108      	cbz	r0, 8004cb6 <MX_TIM10_Init+0x22>
  {
    Error_Handler();
 8004cb2:	f7ff fee1 	bl	8004a78 <Error_Handler>
  }

  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8004cb6:	480a      	ldr	r0, [pc, #40]	; (8004ce0 <MX_TIM10_Init+0x4c>)
 8004cb8:	f7fd f92c 	bl	8001f14 <HAL_TIM_OC_Init>
 8004cbc:	b108      	cbz	r0, 8004cc2 <MX_TIM10_Init+0x2e>
  {
    Error_Handler();
 8004cbe:	f7ff fedb 	bl	8004a78 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004cc2:	2200      	movs	r2, #0
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004cc4:	a901      	add	r1, sp, #4
 8004cc6:	4806      	ldr	r0, [pc, #24]	; (8004ce0 <MX_TIM10_Init+0x4c>)
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004cc8:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 8004cca:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ccc:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004cce:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004cd0:	f7fd f96c 	bl	8001fac <HAL_TIM_OC_ConfigChannel>
 8004cd4:	b108      	cbz	r0, 8004cda <MX_TIM10_Init+0x46>
  {
    Error_Handler();
 8004cd6:	f7ff fecf 	bl	8004a78 <Error_Handler>
  }

}
 8004cda:	b009      	add	sp, #36	; 0x24
 8004cdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ce0:	20003f94 	.word	0x20003f94
 8004ce4:	40014400 	.word	0x40014400

08004ce8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004ce8:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM7)
 8004cea:	6803      	ldr	r3, [r0, #0]
 8004cec:	4a14      	ldr	r2, [pc, #80]	; (8004d40 <HAL_TIM_Base_MspInit+0x58>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d10c      	bne.n	8004d0c <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	4b13      	ldr	r3, [pc, #76]	; (8004d44 <HAL_TIM_Base_MspInit+0x5c>)
 8004cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cfa:	f042 0220 	orr.w	r2, r2, #32
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	9b00      	ldr	r3, [sp, #0]
 8004d0a:	e015      	b.n	8004d38 <HAL_TIM_Base_MspInit+0x50>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM10)
 8004d0c:	4a0e      	ldr	r2, [pc, #56]	; (8004d48 <HAL_TIM_Base_MspInit+0x60>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d112      	bne.n	8004d38 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004d12:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <HAL_TIM_Base_MspInit+0x5c>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	9201      	str	r2, [sp, #4]
 8004d18:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004d1a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004d1e:	6459      	str	r1, [r3, #68]	; 0x44
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d26:	9301      	str	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8004d28:	2019      	movs	r0, #25
 8004d2a:	2105      	movs	r1, #5
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004d2c:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8004d2e:	f7fb fab9 	bl	80002a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004d32:	2019      	movs	r0, #25
 8004d34:	f7fb faea 	bl	800030c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8004d38:	b003      	add	sp, #12
 8004d3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d3e:	bf00      	nop
 8004d40:	40001400 	.word	0x40001400
 8004d44:	40023800 	.word	0x40023800
 8004d48:	40014400 	.word	0x40014400

08004d4c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004d4c:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8004d4e:	480b      	ldr	r0, [pc, #44]	; (8004d7c <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <MX_USART2_UART_Init+0x34>)
 8004d52:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8004d56:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d5a:	220c      	movs	r2, #12
void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d60:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d62:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d64:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d66:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d68:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d6a:	f7fd fa8f 	bl	800228c <HAL_UART_Init>
 8004d6e:	b118      	cbz	r0, 8004d78 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8004d70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
 8004d74:	f7ff be80 	b.w	8004a78 <Error_Handler>
 8004d78:	bd08      	pop	{r3, pc}
 8004d7a:	bf00      	nop
 8004d7c:	2000400c 	.word	0x2000400c
 8004d80:	40004400 	.word	0x40004400

08004d84 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004d84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8004d86:	6802      	ldr	r2, [r0, #0]
 8004d88:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <HAL_UART_MspInit+0x44>)
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d119      	bne.n	8004dc2 <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d8e:	2300      	movs	r3, #0
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	4b0e      	ldr	r3, [pc, #56]	; (8004dcc <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d94:	480e      	ldr	r0, [pc, #56]	; (8004dd0 <HAL_UART_MspInit+0x4c>)
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d98:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004da8:	230c      	movs	r3, #12
 8004daa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dac:	2302      	movs	r3, #2
 8004dae:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004db0:	2301      	movs	r3, #1
 8004db2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004db4:	2303      	movs	r3, #3
 8004db6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004db8:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004dba:	2307      	movs	r3, #7
 8004dbc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dbe:	f7fb fae5 	bl	800038c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004dc2:	b007      	add	sp, #28
 8004dc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8004dc8:	40004400 	.word	0x40004400
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	40020000 	.word	0x40020000

08004dd4 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 8004dd4:	b510      	push	{r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8004dd6:	4c09      	ldr	r4, [pc, #36]	; (8004dfc <MX_USB_DEVICE_Init+0x28>)
 8004dd8:	4909      	ldr	r1, [pc, #36]	; (8004e00 <MX_USB_DEVICE_Init+0x2c>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	4620      	mov	r0, r4
 8004dde:	f7fe fba5 	bl	800352c <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC);
 8004de2:	4908      	ldr	r1, [pc, #32]	; (8004e04 <MX_USB_DEVICE_Init+0x30>)
 8004de4:	4620      	mov	r0, r4
 8004de6:	f7fe fbb6 	bl	8003556 <USBD_RegisterClass>

  USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 8004dea:	4620      	mov	r0, r4
 8004dec:	4906      	ldr	r1, [pc, #24]	; (8004e08 <MX_USB_DEVICE_Init+0x34>)
 8004dee:	f7fe f822 	bl	8002e36 <USBD_MSC_RegisterStorage>

  USBD_Start(&hUsbDeviceFS);
 8004df2:	4620      	mov	r0, r4

}
 8004df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC);

  USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);

  USBD_Start(&hUsbDeviceFS);
 8004df8:	f7fe bbb4 	b.w	8003564 <USBD_Start>
 8004dfc:	2000404c 	.word	0x2000404c
 8004e00:	200000ac 	.word	0x200000ac
 8004e04:	2000004c 	.word	0x2000004c
 8004e08:	200000f0 	.word	0x200000f0

08004e0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004e0c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8004e0e:	6803      	ldr	r3, [r0, #0]
 8004e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004e14:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8004e16:	d125      	bne.n	8004e64 <HAL_PCD_MspInit+0x58>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004e18:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004e1c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e1e:	2302      	movs	r3, #2
 8004e20:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e22:	2303      	movs	r3, #3
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e24:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e26:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e28:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004e2a:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e2c:	480e      	ldr	r0, [pc, #56]	; (8004e68 <HAL_PCD_MspInit+0x5c>)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004e2e:	9305      	str	r3, [sp, #20]
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e30:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e32:	f7fb faab 	bl	800038c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004e36:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <HAL_PCD_MspInit+0x60>)
 8004e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e3e:	635a      	str	r2, [r3, #52]	; 0x34
 8004e40:	9400      	str	r4, [sp, #0]
 8004e42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e48:	645a      	str	r2, [r3, #68]	; 0x44
 8004e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e50:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8004e52:	2043      	movs	r0, #67	; 0x43
 8004e54:	4622      	mov	r2, r4
 8004e56:	2105      	movs	r1, #5
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004e58:	9b00      	ldr	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8004e5a:	f7fb fa23 	bl	80002a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004e5e:	2043      	movs	r0, #67	; 0x43
 8004e60:	f7fb fa54 	bl	800030c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004e64:	b006      	add	sp, #24
 8004e66:	bd10      	pop	{r4, pc}
 8004e68:	40020000 	.word	0x40020000
 8004e6c:	40023800 	.word	0x40023800

08004e70 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004e70:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 8004e74:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8004e78:	f7fe bb8b 	b.w	8003592 <USBD_LL_SetupStage>

08004e7c <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004e7c:	231c      	movs	r3, #28
 8004e7e:	fb03 0301 	mla	r3, r3, r1, r0
 8004e82:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8004e86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e8a:	f7fe bbaf 	b.w	80035ec <USBD_LL_DataOutStage>

08004e8e <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004e8e:	231c      	movs	r3, #28
 8004e90:	fb03 0301 	mla	r3, r3, r1, r0
 8004e94:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8004e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e9a:	f7fe bbd8 	b.w	800364e <USBD_LL_DataInStage>

08004e9e <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004e9e:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8004ea2:	f7fe bc53 	b.w	800374c <USBD_LL_SOF>

08004ea6 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8004ea6:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 8004ea8:	68c1      	ldr	r1, [r0, #12]
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8004eaa:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8004eac:	3100      	adds	r1, #0
 8004eae:	bf18      	it	ne
 8004eb0:	2101      	movne	r1, #1
 8004eb2:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8004eb6:	f7fe fc37 	bl	8003728 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004eba:	f8d4 03f8 	ldr.w	r0, [r4, #1016]	; 0x3f8
}
 8004ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004ec2:	f7fe bc12 	b.w	80036ea <USBD_LL_Reset>
	...

08004ec8 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{  
 8004ec8:	b510      	push	{r4, lr}
 8004eca:	4604      	mov	r4, r0
   /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004ecc:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8004ed0:	f7fe fc2d 	bl	800372e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004ed4:	6822      	ldr	r2, [r4, #0]
 8004ed6:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004ee2:	6a23      	ldr	r3, [r4, #32]
 8004ee4:	b123      	cbz	r3, 8004ef0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004ee6:	4a03      	ldr	r2, [pc, #12]	; (8004ef4 <HAL_PCD_SuspendCallback+0x2c>)
 8004ee8:	6913      	ldr	r3, [r2, #16]
 8004eea:	f043 0306 	orr.w	r3, r3, #6
 8004eee:	6113      	str	r3, [r2, #16]
 8004ef0:	bd10      	pop	{r4, pc}
 8004ef2:	bf00      	nop
 8004ef4:	e000ed00 	.word	0xe000ed00

08004ef8 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004ef8:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8004efc:	f7fe bc20 	b.w	8003740 <USBD_LL_Resume>

08004f00 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004f00:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8004f04:	f7fe bc30 	b.w	8003768 <USBD_LL_IsoOUTIncomplete>

08004f08 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004f08:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8004f0c:	f7fe bc2a 	b.w	8003764 <USBD_LL_IsoINIncomplete>

08004f10 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8004f10:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8004f14:	f7fe bc2a 	b.w	800376c <USBD_LL_DevConnected>

08004f18 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8004f18:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
 8004f1c:	f7fe bc28 	b.w	8003770 <USBD_LL_DevDisconnected>

08004f20 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8004f20:	b508      	push	{r3, lr}
  /* Init USB_IP */
  if (pdev->id == DEVICE_FS) {
 8004f22:	7802      	ldrb	r2, [r0, #0]
 8004f24:	bb42      	cbnz	r2, 8004f78 <USBD_LL_Init+0x58>
  /* Link The driver to the stack */	
  hpcd_USB_OTG_FS.pData = pdev;
 8004f26:	4b15      	ldr	r3, [pc, #84]	; (8004f7c <USBD_LL_Init+0x5c>)
  pdev->pData = &hpcd_USB_OTG_FS; 
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8004f28:	2106      	movs	r1, #6
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  if (pdev->id == DEVICE_FS) {
  /* Link The driver to the stack */	
  hpcd_USB_OTG_FS.pData = pdev;
 8004f2a:	f8c3 03f8 	str.w	r0, [r3, #1016]	; 0x3f8
  pdev->pData = &hpcd_USB_OTG_FS; 
 8004f2e:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8004f32:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004f36:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004f3a:	2102      	movs	r1, #2
 8004f3c:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004f3e:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004f40:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8004f42:	2101      	movs	r1, #1
  pdev->pData = &hpcd_USB_OTG_FS; 
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004f44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8004f46:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004f48:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004f4a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004f4c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8004f4e:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004f50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004f52:	f7fb faf9 	bl	8000548 <HAL_PCD_Init>
 8004f56:	b108      	cbz	r0, 8004f5c <USBD_LL_Init+0x3c>
  {
    Error_Handler();
 8004f58:	f7ff fd8e 	bl	8004a78 <Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8004f5c:	2180      	movs	r1, #128	; 0x80
 8004f5e:	4807      	ldr	r0, [pc, #28]	; (8004f7c <USBD_LL_Init+0x5c>)
 8004f60:	f7fb ff84 	bl	8000e6c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8004f64:	2240      	movs	r2, #64	; 0x40
 8004f66:	2100      	movs	r1, #0
 8004f68:	4804      	ldr	r0, [pc, #16]	; (8004f7c <USBD_LL_Init+0x5c>)
 8004f6a:	f7fb ff5e 	bl	8000e2a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8004f6e:	2280      	movs	r2, #128	; 0x80
 8004f70:	2101      	movs	r1, #1
 8004f72:	4802      	ldr	r0, [pc, #8]	; (8004f7c <USBD_LL_Init+0x5c>)
 8004f74:	f7fb ff59 	bl	8000e2a <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8004f78:	2000      	movs	r0, #0
 8004f7a:	bd08      	pop	{r3, pc}
 8004f7c:	20004270 	.word	0x20004270

08004f80 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004f80:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8004f82:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004f86:	f7fb fb51 	bl	800062c <HAL_PCD_Start>
 8004f8a:	2803      	cmp	r0, #3
 8004f8c:	bf9a      	itte	ls
 8004f8e:	4b02      	ldrls	r3, [pc, #8]	; (8004f98 <USBD_LL_Start+0x18>)
 8004f90:	5c18      	ldrbls	r0, [r3, r0]
 8004f92:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004f94:	bd08      	pop	{r3, pc}
 8004f96:	bf00      	nop
 8004f98:	080054ca 	.word	0x080054ca

08004f9c <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8004f9c:	b510      	push	{r4, lr}
 8004f9e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8004fa0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	4622      	mov	r2, r4
 8004fa8:	f7fb fe38 	bl	8000c1c <HAL_PCD_EP_Open>
 8004fac:	2803      	cmp	r0, #3
 8004fae:	bf9a      	itte	ls
 8004fb0:	4b01      	ldrls	r3, [pc, #4]	; (8004fb8 <USBD_LL_OpenEP+0x1c>)
 8004fb2:	5c18      	ldrbls	r0, [r3, r0]
 8004fb4:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8004fb6:	bd10      	pop	{r4, pc}
 8004fb8:	080054ca 	.word	0x080054ca

08004fbc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8004fbc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004fbe:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004fc2:	f7fb fe59 	bl	8000c78 <HAL_PCD_EP_Close>
 8004fc6:	2803      	cmp	r0, #3
 8004fc8:	bf9a      	itte	ls
 8004fca:	4b02      	ldrls	r3, [pc, #8]	; (8004fd4 <USBD_LL_CloseEP+0x18>)
 8004fcc:	5c18      	ldrbls	r0, [r3, r0]
 8004fce:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004fd0:	bd08      	pop	{r3, pc}
 8004fd2:	bf00      	nop
 8004fd4:	080054ca 	.word	0x080054ca

08004fd8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_FlushEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8004fd8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8004fda:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004fde:	f7fb ff0a 	bl	8000df6 <HAL_PCD_EP_Flush>
 8004fe2:	2803      	cmp	r0, #3
 8004fe4:	bf9a      	itte	ls
 8004fe6:	4b02      	ldrls	r3, [pc, #8]	; (8004ff0 <USBD_LL_FlushEP+0x18>)
 8004fe8:	5c18      	ldrbls	r0, [r3, r0]
 8004fea:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004fec:	bd08      	pop	{r3, pc}
 8004fee:	bf00      	nop
 8004ff0:	080054ca 	.word	0x080054ca

08004ff4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8004ff4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004ff6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004ffa:	f7fb feab 	bl	8000d54 <HAL_PCD_EP_SetStall>
 8004ffe:	2803      	cmp	r0, #3
 8005000:	bf9a      	itte	ls
 8005002:	4b02      	ldrls	r3, [pc, #8]	; (800500c <USBD_LL_StallEP+0x18>)
 8005004:	5c18      	ldrbls	r0, [r3, r0]
 8005006:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8005008:	bd08      	pop	{r3, pc}
 800500a:	bf00      	nop
 800500c:	080054ca 	.word	0x080054ca

08005010 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8005010:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005012:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005016:	f7fb fec9 	bl	8000dac <HAL_PCD_EP_ClrStall>
 800501a:	2803      	cmp	r0, #3
 800501c:	bf9a      	itte	ls
 800501e:	4b02      	ldrls	r3, [pc, #8]	; (8005028 <USBD_LL_ClearStallEP+0x18>)
 8005020:	5c18      	ldrbls	r0, [r3, r0]
 8005022:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8005024:	bd08      	pop	{r3, pc}
 8005026:	bf00      	nop
 8005028:	080054ca 	.word	0x080054ca

0800502c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 800502c:	f011 0f80 	tst.w	r1, #128	; 0x80
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005030:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005034:	bf18      	it	ne
 8005036:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 800503a:	f04f 001c 	mov.w	r0, #28
 800503e:	bf15      	itete	ne
 8005040:	fb00 2103 	mlane	r1, r0, r3, r2
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005044:	fb00 2101 	mlaeq	r1, r0, r1, r2
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005048:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800504c:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 8005050:	4770      	bx	lr
	...

08005054 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8005054:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005056:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800505a:	f7fb fdcd 	bl	8000bf8 <HAL_PCD_SetAddress>
 800505e:	2803      	cmp	r0, #3
 8005060:	bf9a      	itte	ls
 8005062:	4b02      	ldrls	r3, [pc, #8]	; (800506c <USBD_LL_SetUSBAddress+0x18>)
 8005064:	5c18      	ldrbls	r0, [r3, r0]
 8005066:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8005068:	bd08      	pop	{r3, pc}
 800506a:	bf00      	nop
 800506c:	080054ca 	.word	0x080054ca

08005070 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8005070:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005072:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005076:	f7fb fe4d 	bl	8000d14 <HAL_PCD_EP_Transmit>
 800507a:	2803      	cmp	r0, #3
 800507c:	bf9a      	itte	ls
 800507e:	4b02      	ldrls	r3, [pc, #8]	; (8005088 <USBD_LL_Transmit+0x18>)
 8005080:	5c18      	ldrbls	r0, [r3, r0]
 8005082:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8005084:	bd08      	pop	{r3, pc}
 8005086:	bf00      	nop
 8005088:	080054ca 	.word	0x080054ca

0800508c <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 800508c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800508e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005092:	f7fb fe14 	bl	8000cbe <HAL_PCD_EP_Receive>
 8005096:	2803      	cmp	r0, #3
 8005098:	bf9a      	itte	ls
 800509a:	4b02      	ldrls	r3, [pc, #8]	; (80050a4 <USBD_LL_PrepareReceive+0x18>)
 800509c:	5c18      	ldrbls	r0, [r3, r0]
 800509e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80050a0:	bd08      	pop	{r3, pc}
 80050a2:	bf00      	nop
 80050a4:	080054ca 	.word	0x080054ca

080050a8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 80050a8:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80050aa:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80050ae:	f7fb fe29 	bl	8000d04 <HAL_PCD_EP_GetRxCount>
}
 80050b2:	bd08      	pop	{r3, pc}

080050b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval HAL status
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80050b4:	b510      	push	{r4, lr}
 80050b6:	4604      	mov	r4, r0
  switch ( msg)
 80050b8:	b111      	cbz	r1, 80050c0 <HAL_PCDEx_LPM_Callback+0xc>
 80050ba:	2901      	cmp	r1, #1
 80050bc:	d016      	beq.n	80050ec <HAL_PCDEx_LPM_Callback+0x38>
 80050be:	bd10      	pop	{r4, pc}
  {
  case PCD_LPM_L0_ACTIVE:
    if (hpcd->Init.low_power_enable)
 80050c0:	6a03      	ldr	r3, [r0, #32]
 80050c2:	b133      	cbz	r3, 80050d2 <HAL_PCDEx_LPM_Callback+0x1e>
    {
      SystemClock_Config();
 80050c4:	f7ff fc3c 	bl	8004940 <SystemClock_Config>
      
      /* Reset SLEEPDEEP bit of Cortex System Control Register */
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80050c8:	4a12      	ldr	r2, [pc, #72]	; (8005114 <HAL_PCDEx_LPM_Callback+0x60>)
 80050ca:	6913      	ldr	r3, [r2, #16]
 80050cc:	f023 0306 	bic.w	r3, r3, #6
 80050d0:	6113      	str	r3, [r2, #16]
    }
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80050d2:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);    
 80050d4:	f8d4 03f8 	ldr.w	r0, [r4, #1016]	; 0x3f8
      SystemClock_Config();
      
      /* Reset SLEEPDEEP bit of Cortex System Control Register */
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80050d8:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80050dc:	f023 0301 	bic.w	r3, r3, #1
 80050e0:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }     
    break;   
  }
}
 80050e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      
      /* Reset SLEEPDEEP bit of Cortex System Control Register */
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
    USBD_LL_Resume(hpcd->pData);    
 80050e8:	f7fe bb2a 	b.w	8003740 <USBD_LL_Resume>
    break;
    
  case PCD_LPM_L1_ACTIVE:
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80050ec:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 80050ee:	f8d0 03f8 	ldr.w	r0, [r0, #1016]	; 0x3f8
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
    USBD_LL_Resume(hpcd->pData);    
    break;
    
  case PCD_LPM_L1_ACTIVE:
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80050f2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 80050fe:	f7fe fb16 	bl	800372e <USBD_LL_Suspend>
    
    /*Enter in STOP mode */
    if (hpcd->Init.low_power_enable)
 8005102:	6a23      	ldr	r3, [r4, #32]
 8005104:	b123      	cbz	r3, 8005110 <HAL_PCDEx_LPM_Callback+0x5c>
    {   
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005106:	4a03      	ldr	r2, [pc, #12]	; (8005114 <HAL_PCDEx_LPM_Callback+0x60>)
 8005108:	6913      	ldr	r3, [r2, #16]
 800510a:	f043 0306 	orr.w	r3, r3, #6
 800510e:	6113      	str	r3, [r2, #16]
 8005110:	bd10      	pop	{r4, pc}
 8005112:	bf00      	nop
 8005114:	e000ed00 	.word	0xe000ed00

08005118 <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8005118:	2312      	movs	r3, #18
 800511a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800511c:	4800      	ldr	r0, [pc, #0]	; (8005120 <USBD_FS_DeviceDescriptor+0x8>)
 800511e:	4770      	bx	lr
 8005120:	200000dc 	.word	0x200000dc

08005124 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8005124:	2304      	movs	r3, #4
 8005126:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8005128:	4800      	ldr	r0, [pc, #0]	; (800512c <USBD_FS_LangIDStrDescriptor+0x8>)
 800512a:	4770      	bx	lr
 800512c:	200000cc 	.word	0x200000cc

08005130 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 8005130:	230c      	movs	r3, #12
 8005132:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8005134:	4800      	ldr	r0, [pc, #0]	; (8005138 <USBD_FS_USR_BOSDescriptor+0x8>)
 8005136:	4770      	bx	lr
 8005138:	200000d0 	.word	0x200000d0

0800513c <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800513c:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800513e:	4c04      	ldr	r4, [pc, #16]	; (8005150 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8005140:	4804      	ldr	r0, [pc, #16]	; (8005154 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005142:	460a      	mov	r2, r1
 8005144:	4621      	mov	r1, r4
 8005146:	f7fe fcce 	bl	8003ae6 <USBD_GetString>
  return USBD_StrDesc;
}
 800514a:	4620      	mov	r0, r4
 800514c:	bd10      	pop	{r4, pc}
 800514e:	bf00      	nop
 8005150:	2000466c 	.word	0x2000466c
 8005154:	080054ce 	.word	0x080054ce

08005158 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8005158:	b510      	push	{r4, lr}
  if(speed == 0)
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800515a:	4c04      	ldr	r4, [pc, #16]	; (800516c <USBD_FS_ProductStrDescriptor+0x14>)
 800515c:	4804      	ldr	r0, [pc, #16]	; (8005170 <USBD_FS_ProductStrDescriptor+0x18>)
 800515e:	460a      	mov	r2, r1
 8005160:	4621      	mov	r1, r4
 8005162:	f7fe fcc0 	bl	8003ae6 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8005166:	4620      	mov	r0, r4
 8005168:	bd10      	pop	{r4, pc}
 800516a:	bf00      	nop
 800516c:	2000466c 	.word	0x2000466c
 8005170:	080054e1 	.word	0x080054e1

08005174 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8005174:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8005176:	4c04      	ldr	r4, [pc, #16]	; (8005188 <USBD_FS_SerialStrDescriptor+0x14>)
 8005178:	4804      	ldr	r0, [pc, #16]	; (800518c <USBD_FS_SerialStrDescriptor+0x18>)
 800517a:	460a      	mov	r2, r1
 800517c:	4621      	mov	r1, r4
 800517e:	f7fe fcb2 	bl	8003ae6 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8005182:	4620      	mov	r0, r4
 8005184:	bd10      	pop	{r4, pc}
 8005186:	bf00      	nop
 8005188:	2000466c 	.word	0x2000466c
 800518c:	080054f4 	.word	0x080054f4

08005190 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8005190:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005192:	4c04      	ldr	r4, [pc, #16]	; (80051a4 <USBD_FS_ConfigStrDescriptor+0x14>)
 8005194:	4804      	ldr	r0, [pc, #16]	; (80051a8 <USBD_FS_ConfigStrDescriptor+0x18>)
 8005196:	460a      	mov	r2, r1
 8005198:	4621      	mov	r1, r4
 800519a:	f7fe fca4 	bl	8003ae6 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 800519e:	4620      	mov	r0, r4
 80051a0:	bd10      	pop	{r4, pc}
 80051a2:	bf00      	nop
 80051a4:	2000466c 	.word	0x2000466c
 80051a8:	08005501 	.word	0x08005501

080051ac <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80051ac:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80051ae:	4c04      	ldr	r4, [pc, #16]	; (80051c0 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80051b0:	4804      	ldr	r0, [pc, #16]	; (80051c4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80051b2:	460a      	mov	r2, r1
 80051b4:	4621      	mov	r1, r4
 80051b6:	f7fe fc96 	bl	8003ae6 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 80051ba:	4620      	mov	r0, r4
 80051bc:	bd10      	pop	{r4, pc}
 80051be:	bf00      	nop
 80051c0:	2000466c 	.word	0x2000466c
 80051c4:	0800550c 	.word	0x0800550c

080051c8 <STORAGE_GetCapacity_FS>:
* Return         : None.
*******************************************************************************/
int8_t STORAGE_GetCapacity_FS (uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
  /* USER CODE BEGIN 3 */   
  *block_num  = STORAGE_BLK_NBR;
 80051c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051cc:	600b      	str	r3, [r1, #0]
  *block_size = STORAGE_BLK_SIZ;
 80051ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051d2:	8013      	strh	r3, [r2, #0]
  return (USBD_OK);
  /* USER CODE END 3 */ 
}
 80051d4:	2000      	movs	r0, #0
 80051d6:	4770      	bx	lr

080051d8 <STORAGE_IsWriteProtected_FS>:
int8_t  STORAGE_IsWriteProtected_FS (uint8_t lun)
{
  /* USER CODE BEGIN 5 */ 
  return (USBD_OK);
  /* USER CODE END 5 */ 
}
 80051d8:	2000      	movs	r0, #0
 80051da:	4770      	bx	lr

080051dc <STORAGE_Write_FS>:
                         uint16_t blk_len)
{
  /* USER CODE BEGIN 7 */ 
  return (USBD_OK);
  /* USER CODE END 7 */ 
}
 80051dc:	2000      	movs	r0, #0
 80051de:	4770      	bx	lr

080051e0 <STORAGE_GetMaxLun_FS>:
int8_t STORAGE_GetMaxLun_FS (void)
{
  /* USER CODE BEGIN 8 */ 
  return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */ 
}
 80051e0:	2000      	movs	r0, #0
 80051e2:	4770      	bx	lr

080051e4 <STORAGE_Read_FS>:
 80051e4:	2000      	movs	r0, #0
 80051e6:	4770      	bx	lr

080051e8 <STORAGE_Init_FS>:
 80051e8:	2000      	movs	r0, #0
 80051ea:	4770      	bx	lr

080051ec <STORAGE_IsReady_FS>:
 80051ec:	2000      	movs	r0, #0
 80051ee:	4770      	bx	lr

080051f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80051f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005228 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80051f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80051f6:	e003      	b.n	8005200 <LoopCopyDataInit>

080051f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80051f8:	4b0c      	ldr	r3, [pc, #48]	; (800522c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80051fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80051fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80051fe:	3104      	adds	r1, #4

08005200 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005200:	480b      	ldr	r0, [pc, #44]	; (8005230 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005202:	4b0c      	ldr	r3, [pc, #48]	; (8005234 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005204:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005206:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005208:	d3f6      	bcc.n	80051f8 <CopyDataInit>
  ldr  r2, =_sbss
 800520a:	4a0b      	ldr	r2, [pc, #44]	; (8005238 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800520c:	e002      	b.n	8005214 <LoopFillZerobss>

0800520e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800520e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005210:	f842 3b04 	str.w	r3, [r2], #4

08005214 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005214:	4b09      	ldr	r3, [pc, #36]	; (800523c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005216:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005218:	d3f9      	bcc.n	800520e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800521a:	f7ff fcf9 	bl	8004c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800521e:	f000 f811 	bl	8005244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005222:	f7ff fbf9 	bl	8004a18 <main>
  bx  lr    
 8005226:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005228:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800522c:	08005548 	.word	0x08005548
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005230:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005234:	20000174 	.word	0x20000174
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8005238:	20000174 	.word	0x20000174
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800523c:	20004870 	.word	0x20004870

08005240 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005240:	e7fe      	b.n	8005240 <ADC_IRQHandler>
	...

08005244 <__libc_init_array>:
 8005244:	b570      	push	{r4, r5, r6, lr}
 8005246:	4b0e      	ldr	r3, [pc, #56]	; (8005280 <__libc_init_array+0x3c>)
 8005248:	4c0e      	ldr	r4, [pc, #56]	; (8005284 <__libc_init_array+0x40>)
 800524a:	1ae4      	subs	r4, r4, r3
 800524c:	10a4      	asrs	r4, r4, #2
 800524e:	2500      	movs	r5, #0
 8005250:	461e      	mov	r6, r3
 8005252:	42a5      	cmp	r5, r4
 8005254:	d004      	beq.n	8005260 <__libc_init_array+0x1c>
 8005256:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800525a:	4798      	blx	r3
 800525c:	3501      	adds	r5, #1
 800525e:	e7f8      	b.n	8005252 <__libc_init_array+0xe>
 8005260:	f000 f8fa 	bl	8005458 <_init>
 8005264:	4c08      	ldr	r4, [pc, #32]	; (8005288 <__libc_init_array+0x44>)
 8005266:	4b09      	ldr	r3, [pc, #36]	; (800528c <__libc_init_array+0x48>)
 8005268:	1ae4      	subs	r4, r4, r3
 800526a:	10a4      	asrs	r4, r4, #2
 800526c:	2500      	movs	r5, #0
 800526e:	461e      	mov	r6, r3
 8005270:	42a5      	cmp	r5, r4
 8005272:	d004      	beq.n	800527e <__libc_init_array+0x3a>
 8005274:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005278:	4798      	blx	r3
 800527a:	3501      	adds	r5, #1
 800527c:	e7f8      	b.n	8005270 <__libc_init_array+0x2c>
 800527e:	bd70      	pop	{r4, r5, r6, pc}
 8005280:	08005540 	.word	0x08005540
 8005284:	08005540 	.word	0x08005540
 8005288:	08005544 	.word	0x08005544
 800528c:	08005540 	.word	0x08005540

08005290 <malloc>:
 8005290:	4b02      	ldr	r3, [pc, #8]	; (800529c <malloc+0xc>)
 8005292:	4601      	mov	r1, r0
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	f000 b861 	b.w	800535c <_malloc_r>
 800529a:	bf00      	nop
 800529c:	20000170 	.word	0x20000170

080052a0 <free>:
 80052a0:	4b02      	ldr	r3, [pc, #8]	; (80052ac <free+0xc>)
 80052a2:	4601      	mov	r1, r0
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	f000 b80b 	b.w	80052c0 <_free_r>
 80052aa:	bf00      	nop
 80052ac:	20000170 	.word	0x20000170

080052b0 <memset>:
 80052b0:	4402      	add	r2, r0
 80052b2:	4603      	mov	r3, r0
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d002      	beq.n	80052be <memset+0xe>
 80052b8:	f803 1b01 	strb.w	r1, [r3], #1
 80052bc:	e7fa      	b.n	80052b4 <memset+0x4>
 80052be:	4770      	bx	lr

080052c0 <_free_r>:
 80052c0:	b538      	push	{r3, r4, r5, lr}
 80052c2:	4605      	mov	r5, r0
 80052c4:	2900      	cmp	r1, #0
 80052c6:	d046      	beq.n	8005356 <_free_r+0x96>
 80052c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052cc:	1f0c      	subs	r4, r1, #4
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	bfb8      	it	lt
 80052d2:	18e4      	addlt	r4, r4, r3
 80052d4:	f000 f8b0 	bl	8005438 <__malloc_lock>
 80052d8:	4a1f      	ldr	r2, [pc, #124]	; (8005358 <_free_r+0x98>)
 80052da:	6813      	ldr	r3, [r2, #0]
 80052dc:	4611      	mov	r1, r2
 80052de:	b913      	cbnz	r3, 80052e6 <_free_r+0x26>
 80052e0:	6063      	str	r3, [r4, #4]
 80052e2:	6014      	str	r4, [r2, #0]
 80052e4:	e032      	b.n	800534c <_free_r+0x8c>
 80052e6:	42a3      	cmp	r3, r4
 80052e8:	d90e      	bls.n	8005308 <_free_r+0x48>
 80052ea:	6822      	ldr	r2, [r4, #0]
 80052ec:	18a0      	adds	r0, r4, r2
 80052ee:	4283      	cmp	r3, r0
 80052f0:	bf04      	itt	eq
 80052f2:	6818      	ldreq	r0, [r3, #0]
 80052f4:	685b      	ldreq	r3, [r3, #4]
 80052f6:	6063      	str	r3, [r4, #4]
 80052f8:	bf04      	itt	eq
 80052fa:	1812      	addeq	r2, r2, r0
 80052fc:	6022      	streq	r2, [r4, #0]
 80052fe:	600c      	str	r4, [r1, #0]
 8005300:	e024      	b.n	800534c <_free_r+0x8c>
 8005302:	42a2      	cmp	r2, r4
 8005304:	d803      	bhi.n	800530e <_free_r+0x4e>
 8005306:	4613      	mov	r3, r2
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	2a00      	cmp	r2, #0
 800530c:	d1f9      	bne.n	8005302 <_free_r+0x42>
 800530e:	6818      	ldr	r0, [r3, #0]
 8005310:	1819      	adds	r1, r3, r0
 8005312:	42a1      	cmp	r1, r4
 8005314:	d10b      	bne.n	800532e <_free_r+0x6e>
 8005316:	6821      	ldr	r1, [r4, #0]
 8005318:	4401      	add	r1, r0
 800531a:	1858      	adds	r0, r3, r1
 800531c:	4282      	cmp	r2, r0
 800531e:	6019      	str	r1, [r3, #0]
 8005320:	d114      	bne.n	800534c <_free_r+0x8c>
 8005322:	6810      	ldr	r0, [r2, #0]
 8005324:	6852      	ldr	r2, [r2, #4]
 8005326:	605a      	str	r2, [r3, #4]
 8005328:	4401      	add	r1, r0
 800532a:	6019      	str	r1, [r3, #0]
 800532c:	e00e      	b.n	800534c <_free_r+0x8c>
 800532e:	d902      	bls.n	8005336 <_free_r+0x76>
 8005330:	230c      	movs	r3, #12
 8005332:	602b      	str	r3, [r5, #0]
 8005334:	e00a      	b.n	800534c <_free_r+0x8c>
 8005336:	6821      	ldr	r1, [r4, #0]
 8005338:	1860      	adds	r0, r4, r1
 800533a:	4282      	cmp	r2, r0
 800533c:	bf04      	itt	eq
 800533e:	6810      	ldreq	r0, [r2, #0]
 8005340:	6852      	ldreq	r2, [r2, #4]
 8005342:	6062      	str	r2, [r4, #4]
 8005344:	bf04      	itt	eq
 8005346:	1809      	addeq	r1, r1, r0
 8005348:	6021      	streq	r1, [r4, #0]
 800534a:	605c      	str	r4, [r3, #4]
 800534c:	4628      	mov	r0, r5
 800534e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005352:	f000 b872 	b.w	800543a <__malloc_unlock>
 8005356:	bd38      	pop	{r3, r4, r5, pc}
 8005358:	20003ee4 	.word	0x20003ee4

0800535c <_malloc_r>:
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	1ccd      	adds	r5, r1, #3
 8005360:	f025 0503 	bic.w	r5, r5, #3
 8005364:	3508      	adds	r5, #8
 8005366:	2d0c      	cmp	r5, #12
 8005368:	bf38      	it	cc
 800536a:	250c      	movcc	r5, #12
 800536c:	2d00      	cmp	r5, #0
 800536e:	4606      	mov	r6, r0
 8005370:	db01      	blt.n	8005376 <_malloc_r+0x1a>
 8005372:	42a9      	cmp	r1, r5
 8005374:	d902      	bls.n	800537c <_malloc_r+0x20>
 8005376:	230c      	movs	r3, #12
 8005378:	6033      	str	r3, [r6, #0]
 800537a:	e046      	b.n	800540a <_malloc_r+0xae>
 800537c:	f000 f85c 	bl	8005438 <__malloc_lock>
 8005380:	4b23      	ldr	r3, [pc, #140]	; (8005410 <_malloc_r+0xb4>)
 8005382:	681c      	ldr	r4, [r3, #0]
 8005384:	461a      	mov	r2, r3
 8005386:	4621      	mov	r1, r4
 8005388:	b1a1      	cbz	r1, 80053b4 <_malloc_r+0x58>
 800538a:	680b      	ldr	r3, [r1, #0]
 800538c:	1b5b      	subs	r3, r3, r5
 800538e:	d40e      	bmi.n	80053ae <_malloc_r+0x52>
 8005390:	2b0b      	cmp	r3, #11
 8005392:	d903      	bls.n	800539c <_malloc_r+0x40>
 8005394:	600b      	str	r3, [r1, #0]
 8005396:	18cc      	adds	r4, r1, r3
 8005398:	50cd      	str	r5, [r1, r3]
 800539a:	e01e      	b.n	80053da <_malloc_r+0x7e>
 800539c:	428c      	cmp	r4, r1
 800539e:	bf0d      	iteet	eq
 80053a0:	6863      	ldreq	r3, [r4, #4]
 80053a2:	684b      	ldrne	r3, [r1, #4]
 80053a4:	6063      	strne	r3, [r4, #4]
 80053a6:	6013      	streq	r3, [r2, #0]
 80053a8:	bf18      	it	ne
 80053aa:	460c      	movne	r4, r1
 80053ac:	e015      	b.n	80053da <_malloc_r+0x7e>
 80053ae:	460c      	mov	r4, r1
 80053b0:	6849      	ldr	r1, [r1, #4]
 80053b2:	e7e9      	b.n	8005388 <_malloc_r+0x2c>
 80053b4:	4c17      	ldr	r4, [pc, #92]	; (8005414 <_malloc_r+0xb8>)
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	b91b      	cbnz	r3, 80053c2 <_malloc_r+0x66>
 80053ba:	4630      	mov	r0, r6
 80053bc:	f000 f82c 	bl	8005418 <_sbrk_r>
 80053c0:	6020      	str	r0, [r4, #0]
 80053c2:	4629      	mov	r1, r5
 80053c4:	4630      	mov	r0, r6
 80053c6:	f000 f827 	bl	8005418 <_sbrk_r>
 80053ca:	1c43      	adds	r3, r0, #1
 80053cc:	d018      	beq.n	8005400 <_malloc_r+0xa4>
 80053ce:	1cc4      	adds	r4, r0, #3
 80053d0:	f024 0403 	bic.w	r4, r4, #3
 80053d4:	42a0      	cmp	r0, r4
 80053d6:	d10d      	bne.n	80053f4 <_malloc_r+0x98>
 80053d8:	6025      	str	r5, [r4, #0]
 80053da:	4630      	mov	r0, r6
 80053dc:	f000 f82d 	bl	800543a <__malloc_unlock>
 80053e0:	f104 000b 	add.w	r0, r4, #11
 80053e4:	1d23      	adds	r3, r4, #4
 80053e6:	f020 0007 	bic.w	r0, r0, #7
 80053ea:	1ac3      	subs	r3, r0, r3
 80053ec:	d00e      	beq.n	800540c <_malloc_r+0xb0>
 80053ee:	425a      	negs	r2, r3
 80053f0:	50e2      	str	r2, [r4, r3]
 80053f2:	bd70      	pop	{r4, r5, r6, pc}
 80053f4:	1a21      	subs	r1, r4, r0
 80053f6:	4630      	mov	r0, r6
 80053f8:	f000 f80e 	bl	8005418 <_sbrk_r>
 80053fc:	3001      	adds	r0, #1
 80053fe:	d1eb      	bne.n	80053d8 <_malloc_r+0x7c>
 8005400:	230c      	movs	r3, #12
 8005402:	6033      	str	r3, [r6, #0]
 8005404:	4630      	mov	r0, r6
 8005406:	f000 f818 	bl	800543a <__malloc_unlock>
 800540a:	2000      	movs	r0, #0
 800540c:	bd70      	pop	{r4, r5, r6, pc}
 800540e:	bf00      	nop
 8005410:	20003ee4 	.word	0x20003ee4
 8005414:	20003ee0 	.word	0x20003ee0

08005418 <_sbrk_r>:
 8005418:	b538      	push	{r3, r4, r5, lr}
 800541a:	4c06      	ldr	r4, [pc, #24]	; (8005434 <_sbrk_r+0x1c>)
 800541c:	2300      	movs	r3, #0
 800541e:	4605      	mov	r5, r0
 8005420:	4608      	mov	r0, r1
 8005422:	6023      	str	r3, [r4, #0]
 8005424:	f000 f80a 	bl	800543c <_sbrk>
 8005428:	1c43      	adds	r3, r0, #1
 800542a:	d102      	bne.n	8005432 <_sbrk_r+0x1a>
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	b103      	cbz	r3, 8005432 <_sbrk_r+0x1a>
 8005430:	602b      	str	r3, [r5, #0]
 8005432:	bd38      	pop	{r3, r4, r5, pc}
 8005434:	2000486c 	.word	0x2000486c

08005438 <__malloc_lock>:
 8005438:	4770      	bx	lr

0800543a <__malloc_unlock>:
 800543a:	4770      	bx	lr

0800543c <_sbrk>:
 800543c:	4b04      	ldr	r3, [pc, #16]	; (8005450 <_sbrk+0x14>)
 800543e:	6819      	ldr	r1, [r3, #0]
 8005440:	4602      	mov	r2, r0
 8005442:	b909      	cbnz	r1, 8005448 <_sbrk+0xc>
 8005444:	4903      	ldr	r1, [pc, #12]	; (8005454 <_sbrk+0x18>)
 8005446:	6019      	str	r1, [r3, #0]
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	4402      	add	r2, r0
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	4770      	bx	lr
 8005450:	20003ee8 	.word	0x20003ee8
 8005454:	20004870 	.word	0x20004870

08005458 <_init>:
 8005458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545a:	bf00      	nop
 800545c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800545e:	bc08      	pop	{r3}
 8005460:	469e      	mov	lr, r3
 8005462:	4770      	bx	lr

08005464 <_fini>:
 8005464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005466:	bf00      	nop
 8005468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800546a:	bc08      	pop	{r3}
 800546c:	469e      	mov	lr, r3
 800546e:	4770      	bx	lr
